
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000bd8  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .eeprom       00000065  00810000  00810000  00000ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c6  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d0  00000000  00000000  00002446  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000631  00000000  00000000  00002e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00003448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce7  00000000  00000000  00003ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000049c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 de 02 	call	0x5bc	; 0x5bc <main>
  8e:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initSPI>:
    _delay_ms(2000);    // Wait for 2 seconds
}

// Function to initialize the SPI interface
void initSPI(void) {
    DDRB = (1 << PB3) | (1 << PB5) | (1 << PB2);  // Set MOSI, SCK, and SS as output
  96:	8c e2       	ldi	r24, 0x2C	; 44
  98:	84 b9       	out	0x04, r24	; 4
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // Enable SPI as Master, set clock rate
  9a:	81 e5       	ldi	r24, 0x51	; 81
  9c:	8c bd       	out	0x2c, r24	; 44
}
  9e:	08 95       	ret

000000a0 <SPI_send>:

// Function to send data over SPI
void SPI_send(char data) {
    SPDR = data;
  a0:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF))); // Wait for transmission complete
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <SPI_send+0x2>
}
  a8:	08 95       	ret

000000aa <SPI_receive>:

// Function to receive data from SPI
char SPI_receive(void) {
    SPI_send(0x00);  // Send dummy data to read from slave
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_send>
    while (!(SPSR & (1 << SPIF))); // Wait for reception complete
  b0:	0d b4       	in	r0, 0x2d	; 45
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <SPI_receive+0x6>
    return SPDR;
  b6:	8e b5       	in	r24, 0x2e	; 46
}
  b8:	08 95       	ret

000000ba <MFRC522_write>:
void MFRC522_reset(void) {
    MFRC522_write(0x01, 0x0F);  // PCD_RESETPHASE
}

// Write a value to a register of MFRC522
void MFRC522_write(uint8_t addr, uint8_t val) {
  ba:	cf 93       	push	r28
  bc:	c6 2f       	mov	r28, r22
    PORTB &= ~(1 << PB2); // Select MFRC522
  be:	2a 98       	cbi	0x05, 2	; 5
    SPI_send((addr << 1) & 0x7E); // Send address
  c0:	88 0f       	add	r24, r24
  c2:	8e 77       	andi	r24, 0x7E	; 126
  c4:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_send>
    SPI_send(val);                // Send value
  c8:	8c 2f       	mov	r24, r28
  ca:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_send>
    PORTB |= (1 << PB2);          // Deselect MFRC522
  ce:	2a 9a       	sbi	0x05, 2	; 5
}
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <MFRC522_reset>:
    MFRC522_antennaOn();
}

// Reset the MFRC522 module
void MFRC522_reset(void) {
    MFRC522_write(0x01, 0x0F);  // PCD_RESETPHASE
  d4:	6f e0       	ldi	r22, 0x0F	; 15
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0c 94 5d 00 	jmp	0xba	; 0xba <MFRC522_write>

000000dc <MFRC522_read>:
}

// Read a value from a register of MFRC522
uint8_t MFRC522_read(uint8_t addr) {
    uint8_t val;
    PORTB &= ~(1 << PB2);          // Select MFRC522
  dc:	2a 98       	cbi	0x05, 2	; 5
    SPI_send(((addr << 1) & 0x7E) | 0x80);  // Send address + read command
  de:	88 0f       	add	r24, r24
  e0:	8e 77       	andi	r24, 0x7E	; 126
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_send>
    val = SPI_receive();           // Receive value
  e8:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_receive>
    PORTB |= (1 << PB2);           // Deselect MFRC522
  ec:	2a 9a       	sbi	0x05, 2	; 5
    return val;
}
  ee:	08 95       	ret

000000f0 <MFRC522_antennaOn>:

// Turn on the antenna for MFRC522
void MFRC522_antennaOn(void) {
    uint8_t temp = MFRC522_read(0x14); // TxControlReg
  f0:	84 e1       	ldi	r24, 0x14	; 20
  f2:	0e 94 6e 00 	call	0xdc	; 0xdc <MFRC522_read>
    if (!(temp & 0x03)) {
  f6:	98 2f       	mov	r25, r24
  f8:	93 70       	andi	r25, 0x03	; 3
  fa:	29 f4       	brne	.+10     	; 0x106 <MFRC522_antennaOn+0x16>
        MFRC522_write(0x14, temp | 0x03);
  fc:	68 2f       	mov	r22, r24
  fe:	63 60       	ori	r22, 0x03	; 3
 100:	84 e1       	ldi	r24, 0x14	; 20
 102:	0c 94 5d 00 	jmp	0xba	; 0xba <MFRC522_write>
    }
}
 106:	08 95       	ret

00000108 <MFRC522_init>:
    return SPDR;
}

// Function to initialize the RFID MFRC522 module
void MFRC522_init(void) {
    MFRC522_reset();
 108:	0e 94 6a 00 	call	0xd4	; 0xd4 <MFRC522_reset>
    MFRC522_write(0x2A, 0x8D);  // TModeReg
 10c:	6d e8       	ldi	r22, 0x8D	; 141
 10e:	8a e2       	ldi	r24, 0x2A	; 42
 110:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    MFRC522_write(0x2B, 0x3E);  // TPrescalerReg
 114:	6e e3       	ldi	r22, 0x3E	; 62
 116:	8b e2       	ldi	r24, 0x2B	; 43
 118:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    MFRC522_write(0x2C, 30);    // TReloadRegL
 11c:	6e e1       	ldi	r22, 0x1E	; 30
 11e:	8c e2       	ldi	r24, 0x2C	; 44
 120:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    MFRC522_write(0x2D, 0);     // TReloadRegH
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	8d e2       	ldi	r24, 0x2D	; 45
 128:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    MFRC522_write(0x15, 0x40);  // TxASKReg
 12c:	60 e4       	ldi	r22, 0x40	; 64
 12e:	85 e1       	ldi	r24, 0x15	; 21
 130:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    MFRC522_write(0x11, 0x3D);  // ModeReg
 134:	6d e3       	ldi	r22, 0x3D	; 61
 136:	81 e1       	ldi	r24, 0x11	; 17
 138:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    MFRC522_antennaOn();
 13c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <MFRC522_antennaOn>

00000140 <MFRC522_setBitMask>:

    return status;
}

// Set specific bits of a register
void MFRC522_setBitMask(uint8_t reg, uint8_t mask) {
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	d8 2f       	mov	r29, r24
 146:	c6 2f       	mov	r28, r22
    uint8_t tmp = MFRC522_read(reg);
 148:	0e 94 6e 00 	call	0xdc	; 0xdc <MFRC522_read>
    MFRC522_write(reg, tmp | mask);
 14c:	68 2f       	mov	r22, r24
 14e:	6c 2b       	or	r22, r28
 150:	8d 2f       	mov	r24, r29
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
}

// Set specific bits of a register
void MFRC522_setBitMask(uint8_t reg, uint8_t mask) {
    uint8_t tmp = MFRC522_read(reg);
    MFRC522_write(reg, tmp | mask);
 156:	0c 94 5d 00 	jmp	0xba	; 0xba <MFRC522_write>

0000015a <MFRC522_clearBitMask>:
}

// Clear specific bits of a register
void MFRC522_clearBitMask(uint8_t reg, uint8_t mask) {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	d8 2f       	mov	r29, r24
 160:	c6 2f       	mov	r28, r22
    uint8_t tmp = MFRC522_read(reg);
 162:	0e 94 6e 00 	call	0xdc	; 0xdc <MFRC522_read>
    MFRC522_write(reg, tmp & (~mask));
 166:	c0 95       	com	r28
 168:	6c 2f       	mov	r22, r28
 16a:	68 23       	and	r22, r24
 16c:	8d 2f       	mov	r24, r29
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
}

// Clear specific bits of a register
void MFRC522_clearBitMask(uint8_t reg, uint8_t mask) {
    uint8_t tmp = MFRC522_read(reg);
    MFRC522_write(reg, tmp & (~mask));
 172:	0c 94 5d 00 	jmp	0xba	; 0xba <MFRC522_write>

00000176 <MFRC522_toCard>:
    }
    return status;
}

// Send command to MFRC522 and handle response
uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
 176:	6f 92       	push	r6
 178:	7f 92       	push	r7
 17a:	8f 92       	push	r8
 17c:	9f 92       	push	r9
 17e:	af 92       	push	r10
 180:	bf 92       	push	r11
 182:	cf 92       	push	r12
 184:	df 92       	push	r13
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	d8 2f       	mov	r29, r24
 194:	5b 01       	movw	r10, r22
 196:	64 2e       	mov	r6, r20
 198:	79 01       	movw	r14, r18
 19a:	68 01       	movw	r12, r16
            irqEn = 0x12;
            waitIRq = 0x10;
            break;
        case 0x0C:  // PCD_TRANSCEIVE
            irqEn = 0x77;
            waitIRq = 0x30;
 19c:	90 e3       	ldi	r25, 0x30	; 48
 19e:	79 2e       	mov	r7, r25
        case 0x0E:  // PCD_AUTHENT
            irqEn = 0x12;
            waitIRq = 0x10;
            break;
        case 0x0C:  // PCD_TRANSCEIVE
            irqEn = 0x77;
 1a0:	c7 e7       	ldi	r28, 0x77	; 119
    uint8_t waitIRq = 0x00;
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;  // Changed to uint16_t to avoid integer truncation warning

    switch (command) {
 1a2:	8c 30       	cpi	r24, 0x0C	; 12
 1a4:	39 f0       	breq	.+14     	; 0x1b4 <MFRC522_toCard+0x3e>
        case 0x0E:  // PCD_AUTHENT
            irqEn = 0x12;
            waitIRq = 0x10;
 1a6:	20 e1       	ldi	r18, 0x10	; 16
 1a8:	72 2e       	mov	r7, r18
    uint8_t n;
    uint16_t i;  // Changed to uint16_t to avoid integer truncation warning

    switch (command) {
        case 0x0E:  // PCD_AUTHENT
            irqEn = 0x12;
 1aa:	c2 e1       	ldi	r28, 0x12	; 18
    uint8_t waitIRq = 0x00;
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;  // Changed to uint16_t to avoid integer truncation warning

    switch (command) {
 1ac:	8e 30       	cpi	r24, 0x0E	; 14
 1ae:	11 f0       	breq	.+4      	; 0x1b4 <MFRC522_toCard+0x3e>

// Send command to MFRC522 and handle response
uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
    uint8_t status = MI_ERR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 1b0:	71 2c       	mov	r7, r1
}

// Send command to MFRC522 and handle response
uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
    uint8_t status = MI_ERR;
    uint8_t irqEn = 0x00;
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
            break;
        default:
            break;
    }

    MFRC522_write(0x02, irqEn | 0x80); // CommIEnReg
 1b4:	6c 2f       	mov	r22, r28
 1b6:	60 68       	ori	r22, 0x80	; 128
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    MFRC522_clearBitMask(0x04, 0x80); // CommIrqReg
 1be:	60 e8       	ldi	r22, 0x80	; 128
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	0e 94 ad 00 	call	0x15a	; 0x15a <MFRC522_clearBitMask>
    MFRC522_setBitMask(0x0A, 0x80);   // FIFOLevelReg
 1c6:	60 e8       	ldi	r22, 0x80	; 128
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	0e 94 a0 00 	call	0x140	; 0x140 <MFRC522_setBitMask>

    MFRC522_write(0x01, 0x00);  // CommandReg
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>

    for (i = 0; i < sendLen; i++) {
 1d6:	45 01       	movw	r8, r10
 1d8:	06 2d       	mov	r16, r6
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	c4 01       	movw	r24, r8
 1de:	8a 19       	sub	r24, r10
 1e0:	9b 09       	sbc	r25, r11
 1e2:	80 17       	cp	r24, r16
 1e4:	91 07       	cpc	r25, r17
 1e6:	90 f1       	brcs	.+100    	; 0x24c <MFRC522_toCard+0xd6>
        MFRC522_write(0x09, sendData[i]);  // FIFODataReg
    }

    MFRC522_write(0x01, command); // CommandReg
 1e8:	6d 2f       	mov	r22, r29
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    if (command == 0x0C) {  // PCD_TRANSCEIVE
 1f0:	dc 30       	cpi	r29, 0x0C	; 12
 1f2:	21 f4       	brne	.+8      	; 0x1fc <MFRC522_toCard+0x86>
        MFRC522_setBitMask(0x0D, 0x80);  // BitFramingReg
 1f4:	60 e8       	ldi	r22, 0x80	; 128
 1f6:	8d e0       	ldi	r24, 0x0D	; 13
 1f8:	0e 94 a0 00 	call	0x140	; 0x140 <MFRC522_setBitMask>
    MFRC522_clearBitMask(0x04, 0x80); // CommIrqReg
    MFRC522_setBitMask(0x0A, 0x80);   // FIFOLevelReg

    MFRC522_write(0x01, 0x00);  // CommandReg

    for (i = 0; i < sendLen; i++) {
 1fc:	80 ed       	ldi	r24, 0xD0	; 208
 1fe:	a8 2e       	mov	r10, r24
 200:	87 e0       	ldi	r24, 0x07	; 7
 202:	b8 2e       	mov	r11, r24

    i = 2000;  // Timeout counter
    do {
        n = MFRC522_read(0x04);  // CommIrqReg
        i--;
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 204:	07 2d       	mov	r16, r7
 206:	01 60       	ori	r16, 0x01	; 1
        MFRC522_setBitMask(0x0D, 0x80);  // BitFramingReg
    }

    i = 2000;  // Timeout counter
    do {
        n = MFRC522_read(0x04);  // CommIrqReg
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	0e 94 6e 00 	call	0xdc	; 0xdc <MFRC522_read>
 20e:	18 2f       	mov	r17, r24
        i--;
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	af 1a       	sub	r10, r31
 214:	b1 08       	sbc	r11, r1
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 216:	19 f0       	breq	.+6      	; 0x21e <MFRC522_toCard+0xa8>
 218:	80 2f       	mov	r24, r16
 21a:	81 23       	and	r24, r17
 21c:	a9 f3       	breq	.-22     	; 0x208 <MFRC522_toCard+0x92>

    MFRC522_clearBitMask(0x0D, 0x80);  // BitFramingReg
 21e:	60 e8       	ldi	r22, 0x80	; 128
 220:	8d e0       	ldi	r24, 0x0D	; 13
 222:	0e 94 ad 00 	call	0x15a	; 0x15a <MFRC522_clearBitMask>

    if (i != 0) {
 226:	ab 28       	or	r10, r11
 228:	c1 f4       	brne	.+48     	; 0x25a <MFRC522_toCard+0xe4>
    return status;
}

// Send command to MFRC522 and handle response
uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
    uint8_t status = MI_ERR;
 22a:	12 e0       	ldi	r17, 0x02	; 2
            status = MI_ERR;
        }
    }

    return status;
}
 22c:	81 2f       	mov	r24, r17
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	ff 90       	pop	r15
 238:	ef 90       	pop	r14
 23a:	df 90       	pop	r13
 23c:	cf 90       	pop	r12
 23e:	bf 90       	pop	r11
 240:	af 90       	pop	r10
 242:	9f 90       	pop	r9
 244:	8f 90       	pop	r8
 246:	7f 90       	pop	r7
 248:	6f 90       	pop	r6
 24a:	08 95       	ret
    MFRC522_setBitMask(0x0A, 0x80);   // FIFOLevelReg

    MFRC522_write(0x01, 0x00);  // CommandReg

    for (i = 0; i < sendLen; i++) {
        MFRC522_write(0x09, sendData[i]);  // FIFODataReg
 24c:	f4 01       	movw	r30, r8
 24e:	61 91       	ld	r22, Z+
 250:	4f 01       	movw	r8, r30
 252:	89 e0       	ldi	r24, 0x09	; 9
 254:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
 258:	c1 cf       	rjmp	.-126    	; 0x1dc <MFRC522_toCard+0x66>
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));

    MFRC522_clearBitMask(0x0D, 0x80);  // BitFramingReg

    if (i != 0) {
        if (!(MFRC522_read(0x06) & 0x1B)) {  // ErrorReg
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	0e 94 6e 00 	call	0xdc	; 0xdc <MFRC522_read>
 260:	8b 71       	andi	r24, 0x1B	; 27
 262:	19 f7       	brne	.-58     	; 0x22a <MFRC522_toCard+0xb4>
 264:	c1 70       	andi	r28, 0x01	; 1
 266:	1c 23       	and	r17, r28
            status = MI_OK;
            if (n & irqEn & 0x01) {
                status = MI_NOTAGERR;
            }

            if (command == 0x0C) {  // PCD_TRANSCEIVE
 268:	dc 30       	cpi	r29, 0x0C	; 12
 26a:	01 f7       	brne	.-64     	; 0x22c <MFRC522_toCard+0xb6>
                n = MFRC522_read(0x0A);  // FIFOLevelReg
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	0e 94 6e 00 	call	0xdc	; 0xdc <MFRC522_read>
 272:	c8 2f       	mov	r28, r24
                lastBits = MFRC522_read(0x0C) & 0x07;  // ControlReg
 274:	8c e0       	ldi	r24, 0x0C	; 12
 276:	0e 94 6e 00 	call	0xdc	; 0xdc <MFRC522_read>
 27a:	98 2f       	mov	r25, r24
 27c:	97 70       	andi	r25, 0x07	; 7
                if (lastBits) {
 27e:	e9 f0       	breq	.+58     	; 0x2ba <MFRC522_toCard+0x144>
                    *backLen = (n - 1) * 8 + lastBits;
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	8c 0f       	add	r24, r28
 284:	88 0f       	add	r24, r24
 286:	88 0f       	add	r24, r24
 288:	88 0f       	add	r24, r24
 28a:	89 0f       	add	r24, r25
                } else {
                    *backLen = n * 8;
 28c:	f6 01       	movw	r30, r12
 28e:	80 83       	st	Z, r24
                }

                if (n == 0) {
 290:	cc 23       	and	r28, r28
 292:	c1 f0       	breq	.+48     	; 0x2c4 <MFRC522_toCard+0x14e>
 294:	c1 31       	cpi	r28, 0x11	; 17
 296:	08 f0       	brcs	.+2      	; 0x29a <MFRC522_toCard+0x124>
 298:	c0 e1       	ldi	r28, 0x10	; 16
                }
                if (n > MAX_LEN) {
                    n = MAX_LEN;
                }

                for (i = 0; i < n; i++) {
 29a:	67 01       	movw	r12, r14
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	c6 01       	movw	r24, r12
 2a0:	8e 19       	sub	r24, r14
 2a2:	9f 09       	sbc	r25, r15
 2a4:	8c 17       	cp	r24, r28
 2a6:	9d 07       	cpc	r25, r29
 2a8:	08 f0       	brcs	.+2      	; 0x2ac <MFRC522_toCard+0x136>
 2aa:	c0 cf       	rjmp	.-128    	; 0x22c <MFRC522_toCard+0xb6>
                    backData[i] = MFRC522_read(0x09);  // FIFODataReg
 2ac:	89 e0       	ldi	r24, 0x09	; 9
 2ae:	0e 94 6e 00 	call	0xdc	; 0xdc <MFRC522_read>
 2b2:	f6 01       	movw	r30, r12
 2b4:	81 93       	st	Z+, r24
 2b6:	6f 01       	movw	r12, r30
 2b8:	f2 cf       	rjmp	.-28     	; 0x29e <MFRC522_toCard+0x128>
                n = MFRC522_read(0x0A);  // FIFOLevelReg
                lastBits = MFRC522_read(0x0C) & 0x07;  // ControlReg
                if (lastBits) {
                    *backLen = (n - 1) * 8 + lastBits;
                } else {
                    *backLen = n * 8;
 2ba:	8c 2f       	mov	r24, r28
 2bc:	88 0f       	add	r24, r24
 2be:	88 0f       	add	r24, r24
 2c0:	88 0f       	add	r24, r24
 2c2:	e4 cf       	rjmp	.-56     	; 0x28c <MFRC522_toCard+0x116>
                }

                if (n == 0) {
                    n = 1;
 2c4:	c1 e0       	ldi	r28, 0x01	; 1
 2c6:	e9 cf       	rjmp	.-46     	; 0x29a <MFRC522_toCard+0x124>

000002c8 <MFRC522_request>:
        MFRC522_write(0x14, temp | 0x03);
    }
}

// Request a tag from the RFID reader
uint8_t MFRC522_request(uint8_t reqMode, uint8_t *TagType) {
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	1f 92       	push	r1
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	18 2f       	mov	r17, r24
 2dc:	7b 01       	movw	r14, r22
    uint8_t status;
    uint8_t backBits;  // The received bit count
    MFRC522_write(0x0D, 0x07);  // BitFramingReg
 2de:	67 e0       	ldi	r22, 0x07	; 7
 2e0:	8d e0       	ldi	r24, 0x0D	; 13
 2e2:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    TagType[0] = reqMode;
 2e6:	f7 01       	movw	r30, r14
 2e8:	10 83       	st	Z, r17
    status = MFRC522_toCard(0x0C, TagType, 1, TagType, &backBits);  // PCD_TRANSCEIVE
 2ea:	8e 01       	movw	r16, r28
 2ec:	0f 5f       	subi	r16, 0xFF	; 255
 2ee:	1f 4f       	sbci	r17, 0xFF	; 255
 2f0:	97 01       	movw	r18, r14
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	b7 01       	movw	r22, r14
 2f6:	8c e0       	ldi	r24, 0x0C	; 12
 2f8:	0e 94 bb 00 	call	0x176	; 0x176 <MFRC522_toCard>
    if ((status != MI_OK) || (backBits != 0x10)) {
 2fc:	81 11       	cpse	r24, r1
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <MFRC522_request+0x3e>
 300:	99 81       	ldd	r25, Y+1	; 0x01
 302:	90 31       	cpi	r25, 0x10	; 16
 304:	09 f0       	breq	.+2      	; 0x308 <MFRC522_request+0x40>
        status = MI_ERR;
 306:	82 e0       	ldi	r24, 0x02	; 2
    }
    return status;
}
 308:	0f 90       	pop	r0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	08 95       	ret

00000318 <MFRC522_anticoll>:

// Anti-collision detection (get unique serial number)
uint8_t MFRC522_anticoll(uint8_t *serNum) {
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	1f 92       	push	r1
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	7c 01       	movw	r14, r24
    uint8_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
    uint8_t unLen;
    MFRC522_write(0x0D, 0x00);  // BitFramingReg
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	8d e0       	ldi	r24, 0x0D	; 13
 330:	0e 94 5d 00 	call	0xba	; 0xba <MFRC522_write>
    serNum[0] = 0x93;  // PICC_ANTICOLL
 334:	83 e9       	ldi	r24, 0x93	; 147
 336:	f7 01       	movw	r30, r14
 338:	80 83       	st	Z, r24
    serNum[1] = 0x20;
 33a:	80 e2       	ldi	r24, 0x20	; 32
 33c:	81 83       	std	Z+1, r24	; 0x01
    status = MFRC522_toCard(0x0C, serNum, 2, serNum, &unLen);  // PCD_TRANSCEIVE
 33e:	8e 01       	movw	r16, r28
 340:	0f 5f       	subi	r16, 0xFF	; 255
 342:	1f 4f       	sbci	r17, 0xFF	; 255
 344:	97 01       	movw	r18, r14
 346:	42 e0       	ldi	r20, 0x02	; 2
 348:	b7 01       	movw	r22, r14
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 bb 00 	call	0x176	; 0x176 <MFRC522_toCard>
    if (status == MI_OK) {
 350:	81 11       	cpse	r24, r1
 352:	0e c0       	rjmp	.+28     	; 0x370 <MFRC522_anticoll+0x58>
 354:	f7 01       	movw	r30, r14
 356:	97 01       	movw	r18, r14
 358:	2c 5f       	subi	r18, 0xFC	; 252
 35a:	3f 4f       	sbci	r19, 0xFF	; 255

// Anti-collision detection (get unique serial number)
uint8_t MFRC522_anticoll(uint8_t *serNum) {
    uint8_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
 35c:	90 e0       	ldi	r25, 0x00	; 0
    serNum[0] = 0x93;  // PICC_ANTICOLL
    serNum[1] = 0x20;
    status = MFRC522_toCard(0x0C, serNum, 2, serNum, &unLen);  // PCD_TRANSCEIVE
    if (status == MI_OK) {
        for (i = 0; i < 4; i++) {
            serNumCheck ^= serNum[i];
 35e:	41 91       	ld	r20, Z+
 360:	94 27       	eor	r25, r20
    MFRC522_write(0x0D, 0x00);  // BitFramingReg
    serNum[0] = 0x93;  // PICC_ANTICOLL
    serNum[1] = 0x20;
    status = MFRC522_toCard(0x0C, serNum, 2, serNum, &unLen);  // PCD_TRANSCEIVE
    if (status == MI_OK) {
        for (i = 0; i < 4; i++) {
 362:	e2 17       	cp	r30, r18
 364:	f3 07       	cpc	r31, r19
 366:	d9 f7       	brne	.-10     	; 0x35e <MFRC522_anticoll+0x46>
            serNumCheck ^= serNum[i];
        }
        if (serNumCheck != serNum[i]) {
 368:	f7 01       	movw	r30, r14
 36a:	24 81       	ldd	r18, Z+4	; 0x04
 36c:	92 13       	cpse	r25, r18
            status = MI_ERR;
 36e:	82 e0       	ldi	r24, 0x02	; 2
        }
    }
    return status;
}
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	08 95       	ret

00000380 <i2c_init>:
    MFRC522_write(reg, tmp & (~mask));
}

// Function to initialize I2C
void i2c_init(void) {
    TWSR = 0x00; // Prescaler value of 1
 380:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    TWBR = ((F_CPU / 100000UL) - 16) / 2; // SCL frequency 100kHz
 384:	88 e4       	ldi	r24, 0x48	; 72
 386:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
}
 38a:	08 95       	ret

0000038c <i2c_start>:

// Function to start I2C communication
void i2c_start(uint8_t address) {
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); // Send start condition
 38c:	94 ea       	ldi	r25, 0xA4	; 164
 38e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT))); // Wait for start to be transmitted
 392:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 396:	97 ff       	sbrs	r25, 7
 398:	fc cf       	rjmp	.-8      	; 0x392 <i2c_start+0x6>
    TWDR = address;  // Load address
 39a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWEN) | (1 << TWINT); // Start transmission
 39e:	84 e8       	ldi	r24, 0x84	; 132
 3a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT))); // Wait for end of transmission
 3a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a8:	87 ff       	sbrs	r24, 7
 3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <i2c_start+0x18>
}
 3ac:	08 95       	ret

000003ae <i2c_stop>:

// Function to stop I2C communication
void i2c_stop(void) {
    TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);  // Send stop condition
 3ae:	84 e9       	ldi	r24, 0x94	; 148
 3b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (TWCR & (1 << TWSTO));  // Wait for stop to be transmitted
 3b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3b8:	84 fd       	sbrc	r24, 4
 3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <i2c_stop+0x6>
}
 3bc:	08 95       	ret

000003be <i2c_write>:

// Function to write data over I2C
void i2c_write(uint8_t data) {
    TWDR = data;
 3be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWEN) | (1 << TWINT);
 3c2:	84 e8       	ldi	r24, 0x84	; 132
 3c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT))); // Wait for end of transmission
 3c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3cc:	87 ff       	sbrs	r24, 7
 3ce:	fc cf       	rjmp	.-8      	; 0x3c8 <i2c_write+0xa>
}
 3d0:	08 95       	ret

000003d2 <LCD_SendCommand>:
    LCD_SendCommand(0x01);  // Clear display
    _delay_ms(2);  // Delay after clearing display
}

// Send a command to the LCD
void LCD_SendCommand(uint8_t cmd) {
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	c8 2f       	mov	r28, r24
    i2c_start(LCD_ADDR << 1);
 3da:	8e e4       	ldi	r24, 0x4E	; 78
 3dc:	0e 94 c6 01 	call	0x38c	; 0x38c <i2c_start>
    i2c_write((cmd & 0xF0) | 0x08);  // Send high nibble
 3e0:	1c 2f       	mov	r17, r28
 3e2:	10 7f       	andi	r17, 0xF0	; 240
 3e4:	d1 2f       	mov	r29, r17
 3e6:	d8 60       	ori	r29, 0x08	; 8
 3e8:	8d 2f       	mov	r24, r29
 3ea:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((cmd & 0xF0) | 0x0C);  // Enable bit high
 3ee:	81 2f       	mov	r24, r17
 3f0:	8c 60       	ori	r24, 0x0C	; 12
 3f2:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((cmd & 0xF0) | 0x08);  // Enable bit low
 3f6:	8d 2f       	mov	r24, r29
 3f8:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((cmd << 4) | 0x08);    // Send low nibble
 3fc:	80 e1       	ldi	r24, 0x10	; 16
 3fe:	c8 9f       	mul	r28, r24
 400:	e0 01       	movw	r28, r0
 402:	11 24       	eor	r1, r1
 404:	dc 2f       	mov	r29, r28
 406:	d8 60       	ori	r29, 0x08	; 8
 408:	8d 2f       	mov	r24, r29
 40a:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((cmd << 4) | 0x0C);    // Enable bit high
 40e:	8c 2f       	mov	r24, r28
 410:	8c 60       	ori	r24, 0x0C	; 12
 412:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((cmd << 4) | 0x08);    // Enable bit low
 416:	8d 2f       	mov	r24, r29
 418:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_stop();
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
    i2c_write((cmd & 0xF0) | 0x0C);  // Enable bit high
    i2c_write((cmd & 0xF0) | 0x08);  // Enable bit low
    i2c_write((cmd << 4) | 0x08);    // Send low nibble
    i2c_write((cmd << 4) | 0x0C);    // Enable bit high
    i2c_write((cmd << 4) | 0x08);    // Enable bit low
    i2c_stop();
 422:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <i2c_stop>

00000426 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	80 e7       	ldi	r24, 0x70	; 112
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <LCD_Init+0x6>
 434:	00 c0       	rjmp	.+0      	; 0x436 <LCD_Init+0x10>
 436:	00 00       	nop
}

// Function to initialize the LCD (Assuming 4-bit mode)
void LCD_Init(void) {
    _delay_ms(50);  // Wait for more than 40ms after VCC rises to 4.5V
    LCD_SendCommand(0x03);
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
 43e:	8f e1       	ldi	r24, 0x1F	; 31
 440:	9e e4       	ldi	r25, 0x4E	; 78
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <LCD_Init+0x1c>
 446:	00 c0       	rjmp	.+0      	; 0x448 <LCD_Init+0x22>
 448:	00 00       	nop
    _delay_ms(5);
    LCD_SendCommand(0x03);
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	87 e5       	ldi	r24, 0x57	; 87
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <LCD_Init+0x2e>
 458:	00 c0       	rjmp	.+0      	; 0x45a <LCD_Init+0x34>
 45a:	00 00       	nop
    _delay_us(150);
    LCD_SendCommand(0x03);
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
    LCD_SendCommand(0x02);  // Set to 4-bit mode
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
    LCD_SendCommand(0x28);  // Function set: 4-bit, 2 lines, 5x8 dots
 468:	88 e2       	ldi	r24, 0x28	; 40
 46a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
    LCD_SendCommand(0x0C);  // Display ON, cursor OFF, blink OFF
 46e:	8c e0       	ldi	r24, 0x0C	; 12
 470:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
    LCD_SendCommand(0x06);  // Entry mode set: increment automatically, no shift
 474:	86 e0       	ldi	r24, 0x06	; 6
 476:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
    LCD_SendCommand(0x01);  // Clear display
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	8f e3       	ldi	r24, 0x3F	; 63
 482:	9f e1       	ldi	r25, 0x1F	; 31
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <LCD_Init+0x5e>
 488:	00 c0       	rjmp	.+0      	; 0x48a <LCD_Init+0x64>
 48a:	00 00       	nop
    _delay_ms(2);  // Delay after clearing display
}
 48c:	08 95       	ret

0000048e <LCD_SendData>:
    i2c_write((cmd << 4) | 0x08);    // Enable bit low
    i2c_stop();
}

// Send data to the LCD
void LCD_SendData(uint8_t data) {
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	c8 2f       	mov	r28, r24
    i2c_start(LCD_ADDR << 1);
 496:	8e e4       	ldi	r24, 0x4E	; 78
 498:	0e 94 c6 01 	call	0x38c	; 0x38c <i2c_start>
    i2c_write((data & 0xF0) | 0x09);  // Send high nibble
 49c:	1c 2f       	mov	r17, r28
 49e:	10 7f       	andi	r17, 0xF0	; 240
 4a0:	d1 2f       	mov	r29, r17
 4a2:	d9 60       	ori	r29, 0x09	; 9
 4a4:	8d 2f       	mov	r24, r29
 4a6:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((data & 0xF0) | 0x0D);  // Enable bit high
 4aa:	81 2f       	mov	r24, r17
 4ac:	8d 60       	ori	r24, 0x0D	; 13
 4ae:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((data & 0xF0) | 0x09);  // Enable bit low
 4b2:	8d 2f       	mov	r24, r29
 4b4:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((data << 4) | 0x09);    // Send low nibble
 4b8:	80 e1       	ldi	r24, 0x10	; 16
 4ba:	c8 9f       	mul	r28, r24
 4bc:	e0 01       	movw	r28, r0
 4be:	11 24       	eor	r1, r1
 4c0:	dc 2f       	mov	r29, r28
 4c2:	d9 60       	ori	r29, 0x09	; 9
 4c4:	8d 2f       	mov	r24, r29
 4c6:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((data << 4) | 0x0D);    // Enable bit high
 4ca:	8c 2f       	mov	r24, r28
 4cc:	8d 60       	ori	r24, 0x0D	; 13
 4ce:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_write((data << 4) | 0x09);    // Enable bit low
 4d2:	8d 2f       	mov	r24, r29
 4d4:	0e 94 df 01 	call	0x3be	; 0x3be <i2c_write>
    i2c_stop();
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
    i2c_write((data & 0xF0) | 0x0D);  // Enable bit high
    i2c_write((data & 0xF0) | 0x09);  // Enable bit low
    i2c_write((data << 4) | 0x09);    // Send low nibble
    i2c_write((data << 4) | 0x0D);    // Enable bit high
    i2c_write((data << 4) | 0x09);    // Enable bit low
    i2c_stop();
 4de:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <i2c_stop>

000004e2 <LCD_Print>:
}

// Print a string on the LCD
void LCD_Print(char *str) {
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	ec 01       	movw	r28, r24
    while (*str) {
 4e8:	89 91       	ld	r24, Y+
 4ea:	81 11       	cpse	r24, r1
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <LCD_Print+0x12>
        LCD_SendData(*str++);
    }
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret
}

// Print a string on the LCD
void LCD_Print(char *str) {
    while (*str) {
        LCD_SendData(*str++);
 4f4:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_SendData>
 4f8:	f7 cf       	rjmp	.-18     	; 0x4e8 <LCD_Print+0x6>

000004fa <LCD_SetPosition>:
    }
}

// Set cursor position on the LCD
void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 4fa:	81 11       	cpse	r24, r1
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <LCD_SetPosition+0xc>
 4fe:	80 e8       	ldi	r24, 0x80	; 128
 500:	86 0f       	add	r24, r22
    LCD_SendCommand(pos);
 502:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <LCD_SendCommand>
    }
}

// Set cursor position on the LCD
void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 506:	80 ec       	ldi	r24, 0xC0	; 192
 508:	fb cf       	rjmp	.-10     	; 0x500 <LCD_SetPosition+0x6>

0000050a <LCD_Clear>:
    LCD_SendCommand(pos);
}

// Clear the LCD display
void LCD_Clear(void) {
    LCD_SendCommand(0x01);  // Send clear display command
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
 510:	8f e3       	ldi	r24, 0x3F	; 63
 512:	9f e1       	ldi	r25, 0x1F	; 31
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <LCD_Clear+0xa>
 518:	00 c0       	rjmp	.+0      	; 0x51a <LCD_Clear+0x10>
 51a:	00 00       	nop
    _delay_ms(2);           // Wait for the command to execute
}
 51c:	08 95       	ret

0000051e <displayUID>:
void LCD_SetPosition(uint8_t row, uint8_t col);
void LCD_Clear(void);
void displayUID(uint8_t *uid);

// Function to display a UID on the LCD
void displayUID(uint8_t *uid) {
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	61 97       	sbiw	r28, 0x11	; 17
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	fc 01       	movw	r30, r24
    char uidStr[17];  // String to hold UID
    sprintf(uidStr, "%02X%02X%02X%02X%02X", uid[0], uid[1], uid[2], uid[3], uid[4]); // Format UID as hex string
 538:	84 81       	ldd	r24, Z+4	; 0x04
 53a:	1f 92       	push	r1
 53c:	8f 93       	push	r24
 53e:	83 81       	ldd	r24, Z+3	; 0x03
 540:	1f 92       	push	r1
 542:	8f 93       	push	r24
 544:	82 81       	ldd	r24, Z+2	; 0x02
 546:	1f 92       	push	r1
 548:	8f 93       	push	r24
 54a:	81 81       	ldd	r24, Z+1	; 0x01
 54c:	1f 92       	push	r1
 54e:	8f 93       	push	r24
 550:	80 81       	ld	r24, Z
 552:	1f 92       	push	r1
 554:	8f 93       	push	r24
 556:	85 e0       	ldi	r24, 0x05	; 5
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	9f 93       	push	r25
 55c:	8f 93       	push	r24
 55e:	8e 01       	movw	r16, r28
 560:	0f 5f       	subi	r16, 0xFF	; 255
 562:	1f 4f       	sbci	r17, 0xFF	; 255
 564:	1f 93       	push	r17
 566:	0f 93       	push	r16
 568:	0e 94 12 03 	call	0x624	; 0x624 <sprintf>
    LCD_Clear();
 56c:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_Clear>
}

// Set cursor position on the LCD
void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
void displayUID(uint8_t *uid) {
    char uidStr[17];  // String to hold UID
    sprintf(uidStr, "%02X%02X%02X%02X%02X", uid[0], uid[1], uid[2], uid[3], uid[4]); // Format UID as hex string
    LCD_Clear();
    LCD_SetPosition(0, 0);
    LCD_Print("Admin UID:");
 576:	8a e1       	ldi	r24, 0x1A	; 26
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_Print>
}

// Set cursor position on the LCD
void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>
    sprintf(uidStr, "%02X%02X%02X%02X%02X", uid[0], uid[1], uid[2], uid[3], uid[4]); // Format UID as hex string
    LCD_Clear();
    LCD_SetPosition(0, 0);
    LCD_Print("Admin UID:");
    LCD_SetPosition(1, 0);
    LCD_Print(uidStr);  // Display UID on the LCD
 584:	c8 01       	movw	r24, r16
 586:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_Print>
 58a:	2f ef       	ldi	r18, 0xFF	; 255
 58c:	87 ea       	ldi	r24, 0xA7	; 167
 58e:	91 e6       	ldi	r25, 0x61	; 97
 590:	21 50       	subi	r18, 0x01	; 1
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	90 40       	sbci	r25, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <displayUID+0x72>
 598:	00 c0       	rjmp	.+0      	; 0x59a <displayUID+0x7c>
 59a:	00 00       	nop
    _delay_ms(2000);    // Wait for 2 seconds
}
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
 5a6:	61 96       	adiw	r28, 0x11	; 17
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	08 95       	ret

000005bc <main>:
void LCD_Clear(void) {
    LCD_SendCommand(0x01);  // Send clear display command
    _delay_ms(2);           // Wait for the command to execute
}

int main(void) {
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <main+0x6>
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <main+0x8>
 5c4:	1f 92       	push	r1
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
    uint8_t serial[5];
    uint8_t status;

    // Initialization
    initSPI();
 5ca:	0e 94 4b 00 	call	0x96	; 0x96 <initSPI>
    MFRC522_init();
 5ce:	0e 94 84 00 	call	0x108	; 0x108 <MFRC522_init>
    LCD_Init();
 5d2:	0e 94 13 02 	call	0x426	; 0x426 <LCD_Init>
    i2c_init();
 5d6:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_init>

    // Main loop
    while (1) {
        LCD_Clear();
 5da:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_Clear>
}

// Set cursor position on the LCD
void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_SendCommand>

    // Main loop
    while (1) {
        LCD_Clear();
        LCD_SetPosition(0, 0);
        LCD_Print("Tap Admin Card");
 5e4:	85 e2       	ldi	r24, 0x25	; 37
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_Print>

        // Wait for a card to be tapped
        while (1) {
            status = MFRC522_request(0x26, serial);  // Request card
 5ec:	be 01       	movw	r22, r28
 5ee:	6f 5f       	subi	r22, 0xFF	; 255
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	86 e2       	ldi	r24, 0x26	; 38
 5f4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <MFRC522_request>
            if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
 5f8:	81 11       	cpse	r24, r1
 5fa:	f8 cf       	rjmp	.-16     	; 0x5ec <main+0x30>
 5fc:	ce 01       	movw	r24, r28
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	0e 94 8c 01 	call	0x318	; 0x318 <MFRC522_anticoll>
 604:	81 11       	cpse	r24, r1
 606:	f2 cf       	rjmp	.-28     	; 0x5ec <main+0x30>
                // Display the tapped card's UID on the LCD
                displayUID(serial);
 608:	ce 01       	movw	r24, r28
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	0e 94 8f 02 	call	0x51e	; 0x51e <displayUID>
 610:	2f ef       	ldi	r18, 0xFF	; 255
 612:	87 ea       	ldi	r24, 0xA7	; 167
 614:	91 e6       	ldi	r25, 0x61	; 97
 616:	21 50       	subi	r18, 0x01	; 1
 618:	80 40       	sbci	r24, 0x00	; 0
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	e1 f7       	brne	.-8      	; 0x616 <main+0x5a>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0x64>
 620:	00 00       	nop
 622:	db cf       	rjmp	.-74     	; 0x5da <main+0x1e>

00000624 <sprintf>:
 624:	ae e0       	ldi	r26, 0x0E	; 14
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e8 e1       	ldi	r30, 0x18	; 24
 62a:	f3 e0       	ldi	r31, 0x03	; 3
 62c:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__prologue_saves__+0x1c>
 630:	0d 89       	ldd	r16, Y+21	; 0x15
 632:	1e 89       	ldd	r17, Y+22	; 0x16
 634:	86 e0       	ldi	r24, 0x06	; 6
 636:	8c 83       	std	Y+4, r24	; 0x04
 638:	1a 83       	std	Y+2, r17	; 0x02
 63a:	09 83       	std	Y+1, r16	; 0x01
 63c:	8f ef       	ldi	r24, 0xFF	; 255
 63e:	9f e7       	ldi	r25, 0x7F	; 127
 640:	9e 83       	std	Y+6, r25	; 0x06
 642:	8d 83       	std	Y+5, r24	; 0x05
 644:	ae 01       	movw	r20, r28
 646:	47 5e       	subi	r20, 0xE7	; 231
 648:	5f 4f       	sbci	r21, 0xFF	; 255
 64a:	6f 89       	ldd	r22, Y+23	; 0x17
 64c:	78 8d       	ldd	r23, Y+24	; 0x18
 64e:	ce 01       	movw	r24, r28
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	0e 94 35 03 	call	0x66a	; 0x66a <vfprintf>
 656:	2f 81       	ldd	r18, Y+7	; 0x07
 658:	38 85       	ldd	r19, Y+8	; 0x08
 65a:	02 0f       	add	r16, r18
 65c:	13 1f       	adc	r17, r19
 65e:	f8 01       	movw	r30, r16
 660:	10 82       	st	Z, r1
 662:	2e 96       	adiw	r28, 0x0e	; 14
 664:	e4 e0       	ldi	r30, 0x04	; 4
 666:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__epilogue_restores__+0x1c>

0000066a <vfprintf>:
 66a:	ab e0       	ldi	r26, 0x0B	; 11
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	eb e3       	ldi	r30, 0x3B	; 59
 670:	f3 e0       	ldi	r31, 0x03	; 3
 672:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__prologue_saves__>
 676:	7c 01       	movw	r14, r24
 678:	3b 01       	movw	r6, r22
 67a:	8a 01       	movw	r16, r20
 67c:	fc 01       	movw	r30, r24
 67e:	17 82       	std	Z+7, r1	; 0x07
 680:	16 82       	std	Z+6, r1	; 0x06
 682:	83 81       	ldd	r24, Z+3	; 0x03
 684:	81 ff       	sbrs	r24, 1
 686:	c8 c1       	rjmp	.+912    	; 0xa18 <__stack+0x119>
 688:	ce 01       	movw	r24, r28
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	5c 01       	movw	r10, r24
 68e:	f7 01       	movw	r30, r14
 690:	93 81       	ldd	r25, Z+3	; 0x03
 692:	f3 01       	movw	r30, r6
 694:	93 fd       	sbrc	r25, 3
 696:	85 91       	lpm	r24, Z+
 698:	93 ff       	sbrs	r25, 3
 69a:	81 91       	ld	r24, Z+
 69c:	3f 01       	movw	r6, r30
 69e:	88 23       	and	r24, r24
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <vfprintf+0x3a>
 6a2:	53 c1       	rjmp	.+678    	; 0x94a <__stack+0x4b>
 6a4:	85 32       	cpi	r24, 0x25	; 37
 6a6:	39 f4       	brne	.+14     	; 0x6b6 <vfprintf+0x4c>
 6a8:	93 fd       	sbrc	r25, 3
 6aa:	85 91       	lpm	r24, Z+
 6ac:	93 ff       	sbrs	r25, 3
 6ae:	81 91       	ld	r24, Z+
 6b0:	3f 01       	movw	r6, r30
 6b2:	85 32       	cpi	r24, 0x25	; 37
 6b4:	29 f4       	brne	.+10     	; 0x6c0 <vfprintf+0x56>
 6b6:	b7 01       	movw	r22, r14
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 6be:	e7 cf       	rjmp	.-50     	; 0x68e <vfprintf+0x24>
 6c0:	91 2c       	mov	r9, r1
 6c2:	21 2c       	mov	r2, r1
 6c4:	31 2c       	mov	r3, r1
 6c6:	ff e1       	ldi	r31, 0x1F	; 31
 6c8:	f3 15       	cp	r31, r3
 6ca:	38 f0       	brcs	.+14     	; 0x6da <vfprintf+0x70>
 6cc:	8b 32       	cpi	r24, 0x2B	; 43
 6ce:	11 f1       	breq	.+68     	; 0x714 <vfprintf+0xaa>
 6d0:	90 f4       	brcc	.+36     	; 0x6f6 <vfprintf+0x8c>
 6d2:	80 32       	cpi	r24, 0x20	; 32
 6d4:	09 f1       	breq	.+66     	; 0x718 <vfprintf+0xae>
 6d6:	83 32       	cpi	r24, 0x23	; 35
 6d8:	29 f1       	breq	.+74     	; 0x724 <vfprintf+0xba>
 6da:	37 fc       	sbrc	r3, 7
 6dc:	3c c0       	rjmp	.+120    	; 0x756 <vfprintf+0xec>
 6de:	20 ed       	ldi	r18, 0xD0	; 208
 6e0:	28 0f       	add	r18, r24
 6e2:	2a 30       	cpi	r18, 0x0A	; 10
 6e4:	50 f5       	brcc	.+84     	; 0x73a <vfprintf+0xd0>
 6e6:	36 fe       	sbrs	r3, 6
 6e8:	20 c0       	rjmp	.+64     	; 0x72a <vfprintf+0xc0>
 6ea:	8a e0       	ldi	r24, 0x0A	; 10
 6ec:	98 9e       	mul	r9, r24
 6ee:	20 0d       	add	r18, r0
 6f0:	11 24       	eor	r1, r1
 6f2:	92 2e       	mov	r9, r18
 6f4:	06 c0       	rjmp	.+12     	; 0x702 <vfprintf+0x98>
 6f6:	8d 32       	cpi	r24, 0x2D	; 45
 6f8:	91 f0       	breq	.+36     	; 0x71e <vfprintf+0xb4>
 6fa:	80 33       	cpi	r24, 0x30	; 48
 6fc:	71 f7       	brne	.-36     	; 0x6da <vfprintf+0x70>
 6fe:	68 94       	set
 700:	30 f8       	bld	r3, 0
 702:	f3 01       	movw	r30, r6
 704:	93 fd       	sbrc	r25, 3
 706:	85 91       	lpm	r24, Z+
 708:	93 ff       	sbrs	r25, 3
 70a:	81 91       	ld	r24, Z+
 70c:	3f 01       	movw	r6, r30
 70e:	81 11       	cpse	r24, r1
 710:	da cf       	rjmp	.-76     	; 0x6c6 <vfprintf+0x5c>
 712:	21 c0       	rjmp	.+66     	; 0x756 <vfprintf+0xec>
 714:	68 94       	set
 716:	31 f8       	bld	r3, 1
 718:	68 94       	set
 71a:	32 f8       	bld	r3, 2
 71c:	f2 cf       	rjmp	.-28     	; 0x702 <vfprintf+0x98>
 71e:	68 94       	set
 720:	33 f8       	bld	r3, 3
 722:	ef cf       	rjmp	.-34     	; 0x702 <vfprintf+0x98>
 724:	68 94       	set
 726:	34 f8       	bld	r3, 4
 728:	ec cf       	rjmp	.-40     	; 0x702 <vfprintf+0x98>
 72a:	ea e0       	ldi	r30, 0x0A	; 10
 72c:	2e 9e       	mul	r2, r30
 72e:	20 0d       	add	r18, r0
 730:	11 24       	eor	r1, r1
 732:	22 2e       	mov	r2, r18
 734:	68 94       	set
 736:	35 f8       	bld	r3, 5
 738:	e4 cf       	rjmp	.-56     	; 0x702 <vfprintf+0x98>
 73a:	8e 32       	cpi	r24, 0x2E	; 46
 73c:	29 f4       	brne	.+10     	; 0x748 <vfprintf+0xde>
 73e:	36 fc       	sbrc	r3, 6
 740:	04 c1       	rjmp	.+520    	; 0x94a <__stack+0x4b>
 742:	68 94       	set
 744:	36 f8       	bld	r3, 6
 746:	dd cf       	rjmp	.-70     	; 0x702 <vfprintf+0x98>
 748:	8c 36       	cpi	r24, 0x6C	; 108
 74a:	19 f4       	brne	.+6      	; 0x752 <vfprintf+0xe8>
 74c:	68 94       	set
 74e:	37 f8       	bld	r3, 7
 750:	d8 cf       	rjmp	.-80     	; 0x702 <vfprintf+0x98>
 752:	88 36       	cpi	r24, 0x68	; 104
 754:	b1 f2       	breq	.-84     	; 0x702 <vfprintf+0x98>
 756:	98 2f       	mov	r25, r24
 758:	9f 7d       	andi	r25, 0xDF	; 223
 75a:	95 54       	subi	r25, 0x45	; 69
 75c:	93 30       	cpi	r25, 0x03	; 3
 75e:	e0 f0       	brcs	.+56     	; 0x798 <vfprintf+0x12e>
 760:	83 36       	cpi	r24, 0x63	; 99
 762:	a1 f1       	breq	.+104    	; 0x7cc <vfprintf+0x162>
 764:	83 37       	cpi	r24, 0x73	; 115
 766:	c1 f1       	breq	.+112    	; 0x7d8 <vfprintf+0x16e>
 768:	83 35       	cpi	r24, 0x53	; 83
 76a:	09 f0       	breq	.+2      	; 0x76e <vfprintf+0x104>
 76c:	63 c0       	rjmp	.+198    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 76e:	28 01       	movw	r4, r16
 770:	f2 e0       	ldi	r31, 0x02	; 2
 772:	4f 0e       	add	r4, r31
 774:	51 1c       	adc	r5, r1
 776:	f8 01       	movw	r30, r16
 778:	c0 80       	ld	r12, Z
 77a:	d1 80       	ldd	r13, Z+1	; 0x01
 77c:	69 2d       	mov	r22, r9
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	36 fc       	sbrc	r3, 6
 782:	02 c0       	rjmp	.+4      	; 0x788 <vfprintf+0x11e>
 784:	6f ef       	ldi	r22, 0xFF	; 255
 786:	7f ef       	ldi	r23, 0xFF	; 255
 788:	c6 01       	movw	r24, r12
 78a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <strnlen_P>
 78e:	4c 01       	movw	r8, r24
 790:	68 94       	set
 792:	37 f8       	bld	r3, 7
 794:	82 01       	movw	r16, r4
 796:	0a c0       	rjmp	.+20     	; 0x7ac <vfprintf+0x142>
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	ff e3       	ldi	r31, 0x3F	; 63
 79e:	f9 83       	std	Y+1, r31	; 0x01
 7a0:	88 24       	eor	r8, r8
 7a2:	83 94       	inc	r8
 7a4:	91 2c       	mov	r9, r1
 7a6:	65 01       	movw	r12, r10
 7a8:	e8 94       	clt
 7aa:	37 f8       	bld	r3, 7
 7ac:	33 fe       	sbrs	r3, 3
 7ae:	2d c0       	rjmp	.+90     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7b0:	52 2c       	mov	r5, r2
 7b2:	81 14       	cp	r8, r1
 7b4:	91 04       	cpc	r9, r1
 7b6:	71 f5       	brne	.+92     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7b8:	55 20       	and	r5, r5
 7ba:	09 f4       	brne	.+2      	; 0x7be <vfprintf+0x154>
 7bc:	68 cf       	rjmp	.-304    	; 0x68e <vfprintf+0x24>
 7be:	b7 01       	movw	r22, r14
 7c0:	80 e2       	ldi	r24, 0x20	; 32
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 7c8:	5a 94       	dec	r5
 7ca:	f6 cf       	rjmp	.-20     	; 0x7b8 <vfprintf+0x14e>
 7cc:	f8 01       	movw	r30, r16
 7ce:	80 81       	ld	r24, Z
 7d0:	89 83       	std	Y+1, r24	; 0x01
 7d2:	0e 5f       	subi	r16, 0xFE	; 254
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	e4 cf       	rjmp	.-56     	; 0x7a0 <vfprintf+0x136>
 7d8:	28 01       	movw	r4, r16
 7da:	f2 e0       	ldi	r31, 0x02	; 2
 7dc:	4f 0e       	add	r4, r31
 7de:	51 1c       	adc	r5, r1
 7e0:	f8 01       	movw	r30, r16
 7e2:	c0 80       	ld	r12, Z
 7e4:	d1 80       	ldd	r13, Z+1	; 0x01
 7e6:	69 2d       	mov	r22, r9
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	36 fc       	sbrc	r3, 6
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0x188>
 7ee:	6f ef       	ldi	r22, 0xFF	; 255
 7f0:	7f ef       	ldi	r23, 0xFF	; 255
 7f2:	c6 01       	movw	r24, r12
 7f4:	0e 94 1a 05 	call	0xa34	; 0xa34 <strnlen>
 7f8:	4c 01       	movw	r8, r24
 7fa:	82 01       	movw	r16, r4
 7fc:	d5 cf       	rjmp	.-86     	; 0x7a8 <vfprintf+0x13e>
 7fe:	b7 01       	movw	r22, r14
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 808:	2a 94       	dec	r2
 80a:	28 14       	cp	r2, r8
 80c:	19 04       	cpc	r1, r9
 80e:	09 f0       	breq	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 810:	b0 f7       	brcc	.-20     	; 0x7fe <vfprintf+0x194>
 812:	ce cf       	rjmp	.-100    	; 0x7b0 <vfprintf+0x146>
 814:	f6 01       	movw	r30, r12
 816:	37 fc       	sbrc	r3, 7
 818:	85 91       	lpm	r24, Z+
 81a:	37 fe       	sbrs	r3, 7
 81c:	81 91       	ld	r24, Z+
 81e:	6f 01       	movw	r12, r30
 820:	b7 01       	movw	r22, r14
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 828:	51 10       	cpse	r5, r1
 82a:	5a 94       	dec	r5
 82c:	f1 e0       	ldi	r31, 0x01	; 1
 82e:	8f 1a       	sub	r8, r31
 830:	91 08       	sbc	r9, r1
 832:	bf cf       	rjmp	.-130    	; 0x7b2 <vfprintf+0x148>
 834:	84 36       	cpi	r24, 0x64	; 100
 836:	19 f0       	breq	.+6      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 838:	89 36       	cpi	r24, 0x69	; 105
 83a:	09 f0       	breq	.+2      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83c:	77 c0       	rjmp	.+238    	; 0x92c <__stack+0x2d>
 83e:	f8 01       	movw	r30, r16
 840:	37 fe       	sbrs	r3, 7
 842:	6b c0       	rjmp	.+214    	; 0x91a <__stack+0x1b>
 844:	60 81       	ld	r22, Z
 846:	71 81       	ldd	r23, Z+1	; 0x01
 848:	82 81       	ldd	r24, Z+2	; 0x02
 84a:	93 81       	ldd	r25, Z+3	; 0x03
 84c:	0c 5f       	subi	r16, 0xFC	; 252
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	f3 2d       	mov	r31, r3
 852:	ff 76       	andi	r31, 0x6F	; 111
 854:	3f 2e       	mov	r3, r31
 856:	97 ff       	sbrs	r25, 7
 858:	09 c0       	rjmp	.+18     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 85a:	90 95       	com	r25
 85c:	80 95       	com	r24
 85e:	70 95       	com	r23
 860:	61 95       	neg	r22
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	8f 4f       	sbci	r24, 0xFF	; 255
 866:	9f 4f       	sbci	r25, 0xFF	; 255
 868:	68 94       	set
 86a:	37 f8       	bld	r3, 7
 86c:	2a e0       	ldi	r18, 0x0A	; 10
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	a5 01       	movw	r20, r10
 872:	0e 94 55 05 	call	0xaaa	; 0xaaa <__ultoa_invert>
 876:	c8 2e       	mov	r12, r24
 878:	ca 18       	sub	r12, r10
 87a:	8c 2c       	mov	r8, r12
 87c:	43 2c       	mov	r4, r3
 87e:	36 fe       	sbrs	r3, 6
 880:	0c c0       	rjmp	.+24     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 882:	e8 94       	clt
 884:	40 f8       	bld	r4, 0
 886:	c9 14       	cp	r12, r9
 888:	40 f4       	brcc	.+16     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 88a:	34 fe       	sbrs	r3, 4
 88c:	05 c0       	rjmp	.+10     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 88e:	32 fc       	sbrc	r3, 2
 890:	03 c0       	rjmp	.+6      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 892:	f3 2d       	mov	r31, r3
 894:	fe 7e       	andi	r31, 0xEE	; 238
 896:	4f 2e       	mov	r4, r31
 898:	89 2c       	mov	r8, r9
 89a:	44 fe       	sbrs	r4, 4
 89c:	95 c0       	rjmp	.+298    	; 0x9c8 <__stack+0xc9>
 89e:	fe 01       	movw	r30, r28
 8a0:	ec 0d       	add	r30, r12
 8a2:	f1 1d       	adc	r31, r1
 8a4:	80 81       	ld	r24, Z
 8a6:	80 33       	cpi	r24, 0x30	; 48
 8a8:	09 f0       	breq	.+2      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8aa:	87 c0       	rjmp	.+270    	; 0x9ba <__stack+0xbb>
 8ac:	24 2d       	mov	r18, r4
 8ae:	29 7e       	andi	r18, 0xE9	; 233
 8b0:	42 2e       	mov	r4, r18
 8b2:	84 2d       	mov	r24, r4
 8b4:	88 70       	andi	r24, 0x08	; 8
 8b6:	58 2e       	mov	r5, r24
 8b8:	43 fc       	sbrc	r4, 3
 8ba:	95 c0       	rjmp	.+298    	; 0x9e6 <__stack+0xe7>
 8bc:	40 fe       	sbrs	r4, 0
 8be:	8f c0       	rjmp	.+286    	; 0x9de <__stack+0xdf>
 8c0:	9c 2c       	mov	r9, r12
 8c2:	82 14       	cp	r8, r2
 8c4:	18 f4       	brcc	.+6      	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8c6:	2c 0c       	add	r2, r12
 8c8:	92 2c       	mov	r9, r2
 8ca:	98 18       	sub	r9, r8
 8cc:	44 fe       	sbrs	r4, 4
 8ce:	91 c0       	rjmp	.+290    	; 0x9f2 <__stack+0xf3>
 8d0:	b7 01       	movw	r22, r14
 8d2:	80 e3       	ldi	r24, 0x30	; 48
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 8da:	42 fe       	sbrs	r4, 2
 8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8de:	88 e7       	ldi	r24, 0x78	; 120
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	41 fe       	sbrs	r4, 1
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8e6:	88 e5       	ldi	r24, 0x58	; 88
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	b7 01       	movw	r22, r14
 8ec:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 8f0:	c9 14       	cp	r12, r9
 8f2:	08 f4       	brcc	.+2      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8f4:	8a c0       	rjmp	.+276    	; 0xa0a <__stack+0x10b>
 8f6:	ca 94       	dec	r12
 8f8:	d1 2c       	mov	r13, r1
 8fa:	9f ef       	ldi	r25, 0xFF	; 255
 8fc:	c9 1a       	sub	r12, r25
 8fe:	d9 0a       	sbc	r13, r25
 900:	ca 0c       	add	r12, r10
 902:	db 1c       	adc	r13, r11
 904:	f6 01       	movw	r30, r12
 906:	82 91       	ld	r24, -Z
 908:	6f 01       	movw	r12, r30
 90a:	b7 01       	movw	r22, r14
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 912:	ac 14       	cp	r10, r12
 914:	bd 04       	cpc	r11, r13
 916:	b1 f7       	brne	.-20     	; 0x904 <__stack+0x5>
 918:	4f cf       	rjmp	.-354    	; 0x7b8 <vfprintf+0x14e>
 91a:	60 81       	ld	r22, Z
 91c:	71 81       	ldd	r23, Z+1	; 0x01
 91e:	07 2e       	mov	r0, r23
 920:	00 0c       	add	r0, r0
 922:	88 0b       	sbc	r24, r24
 924:	99 0b       	sbc	r25, r25
 926:	0e 5f       	subi	r16, 0xFE	; 254
 928:	1f 4f       	sbci	r17, 0xFF	; 255
 92a:	92 cf       	rjmp	.-220    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 92c:	d3 2c       	mov	r13, r3
 92e:	e8 94       	clt
 930:	d4 f8       	bld	r13, 4
 932:	2a e0       	ldi	r18, 0x0A	; 10
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	85 37       	cpi	r24, 0x75	; 117
 938:	39 f1       	breq	.+78     	; 0x988 <__stack+0x89>
 93a:	23 2d       	mov	r18, r3
 93c:	29 7f       	andi	r18, 0xF9	; 249
 93e:	d2 2e       	mov	r13, r18
 940:	8f 36       	cpi	r24, 0x6F	; 111
 942:	01 f1       	breq	.+64     	; 0x984 <__stack+0x85>
 944:	48 f4       	brcc	.+18     	; 0x958 <__stack+0x59>
 946:	88 35       	cpi	r24, 0x58	; 88
 948:	a9 f0       	breq	.+42     	; 0x974 <__stack+0x75>
 94a:	f7 01       	movw	r30, r14
 94c:	86 81       	ldd	r24, Z+6	; 0x06
 94e:	97 81       	ldd	r25, Z+7	; 0x07
 950:	2b 96       	adiw	r28, 0x0b	; 11
 952:	e2 e1       	ldi	r30, 0x12	; 18
 954:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__epilogue_restores__>
 958:	80 37       	cpi	r24, 0x70	; 112
 95a:	49 f0       	breq	.+18     	; 0x96e <__stack+0x6f>
 95c:	88 37       	cpi	r24, 0x78	; 120
 95e:	a9 f7       	brne	.-22     	; 0x94a <__stack+0x4b>
 960:	d4 fe       	sbrs	r13, 4
 962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
 964:	68 94       	set
 966:	d2 f8       	bld	r13, 2
 968:	20 e1       	ldi	r18, 0x10	; 16
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	0d c0       	rjmp	.+26     	; 0x988 <__stack+0x89>
 96e:	68 94       	set
 970:	d4 f8       	bld	r13, 4
 972:	f6 cf       	rjmp	.-20     	; 0x960 <__stack+0x61>
 974:	34 fe       	sbrs	r3, 4
 976:	03 c0       	rjmp	.+6      	; 0x97e <__stack+0x7f>
 978:	82 2f       	mov	r24, r18
 97a:	86 60       	ori	r24, 0x06	; 6
 97c:	d8 2e       	mov	r13, r24
 97e:	20 e1       	ldi	r18, 0x10	; 16
 980:	32 e0       	ldi	r19, 0x02	; 2
 982:	02 c0       	rjmp	.+4      	; 0x988 <__stack+0x89>
 984:	28 e0       	ldi	r18, 0x08	; 8
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	f8 01       	movw	r30, r16
 98a:	d7 fe       	sbrs	r13, 7
 98c:	0f c0       	rjmp	.+30     	; 0x9ac <__stack+0xad>
 98e:	60 81       	ld	r22, Z
 990:	71 81       	ldd	r23, Z+1	; 0x01
 992:	82 81       	ldd	r24, Z+2	; 0x02
 994:	93 81       	ldd	r25, Z+3	; 0x03
 996:	0c 5f       	subi	r16, 0xFC	; 252
 998:	1f 4f       	sbci	r17, 0xFF	; 255
 99a:	a5 01       	movw	r20, r10
 99c:	0e 94 55 05 	call	0xaaa	; 0xaaa <__ultoa_invert>
 9a0:	c8 2e       	mov	r12, r24
 9a2:	ca 18       	sub	r12, r10
 9a4:	3d 2c       	mov	r3, r13
 9a6:	e8 94       	clt
 9a8:	37 f8       	bld	r3, 7
 9aa:	67 cf       	rjmp	.-306    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	0e 5f       	subi	r16, 0xFE	; 254
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	f0 cf       	rjmp	.-32     	; 0x99a <__stack+0x9b>
 9ba:	42 fc       	sbrc	r4, 2
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__stack+0xc3>
 9be:	83 94       	inc	r8
 9c0:	78 cf       	rjmp	.-272    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 9c2:	83 94       	inc	r8
 9c4:	83 94       	inc	r8
 9c6:	75 cf       	rjmp	.-278    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 9c8:	84 2d       	mov	r24, r4
 9ca:	86 78       	andi	r24, 0x86	; 134
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <__stack+0xd1>
 9ce:	71 cf       	rjmp	.-286    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 9d0:	f6 cf       	rjmp	.-20     	; 0x9be <__stack+0xbf>
 9d2:	b7 01       	movw	r22, r14
 9d4:	80 e2       	ldi	r24, 0x20	; 32
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 9dc:	83 94       	inc	r8
 9de:	82 14       	cp	r8, r2
 9e0:	c0 f3       	brcs	.-16     	; 0x9d2 <__stack+0xd3>
 9e2:	51 2c       	mov	r5, r1
 9e4:	73 cf       	rjmp	.-282    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 9e6:	52 2c       	mov	r5, r2
 9e8:	58 18       	sub	r5, r8
 9ea:	82 14       	cp	r8, r2
 9ec:	08 f4       	brcc	.+2      	; 0x9f0 <__stack+0xf1>
 9ee:	6e cf       	rjmp	.-292    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 9f0:	f8 cf       	rjmp	.-16     	; 0x9e2 <__stack+0xe3>
 9f2:	84 2d       	mov	r24, r4
 9f4:	86 78       	andi	r24, 0x86	; 134
 9f6:	09 f4       	brne	.+2      	; 0x9fa <__stack+0xfb>
 9f8:	7b cf       	rjmp	.-266    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 9fa:	8b e2       	ldi	r24, 0x2B	; 43
 9fc:	41 fe       	sbrs	r4, 1
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	47 fc       	sbrc	r4, 7
 a02:	8d e2       	ldi	r24, 0x2D	; 45
 a04:	b7 01       	movw	r22, r14
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	71 cf       	rjmp	.-286    	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 a0a:	b7 01       	movw	r22, r14
 a0c:	80 e3       	ldi	r24, 0x30	; 48
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 a14:	9a 94       	dec	r9
 a16:	6c cf       	rjmp	.-296    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	99 cf       	rjmp	.-206    	; 0x950 <__stack+0x51>

00000a1e <strnlen_P>:
 a1e:	fc 01       	movw	r30, r24
 a20:	05 90       	lpm	r0, Z+
 a22:	61 50       	subi	r22, 0x01	; 1
 a24:	70 40       	sbci	r23, 0x00	; 0
 a26:	01 10       	cpse	r0, r1
 a28:	d8 f7       	brcc	.-10     	; 0xa20 <strnlen_P+0x2>
 a2a:	80 95       	com	r24
 a2c:	90 95       	com	r25
 a2e:	8e 0f       	add	r24, r30
 a30:	9f 1f       	adc	r25, r31
 a32:	08 95       	ret

00000a34 <strnlen>:
 a34:	fc 01       	movw	r30, r24
 a36:	61 50       	subi	r22, 0x01	; 1
 a38:	70 40       	sbci	r23, 0x00	; 0
 a3a:	01 90       	ld	r0, Z+
 a3c:	01 10       	cpse	r0, r1
 a3e:	d8 f7       	brcc	.-10     	; 0xa36 <strnlen+0x2>
 a40:	80 95       	com	r24
 a42:	90 95       	com	r25
 a44:	8e 0f       	add	r24, r30
 a46:	9f 1f       	adc	r25, r31
 a48:	08 95       	ret

00000a4a <fputc>:
 a4a:	0f 93       	push	r16
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	18 2f       	mov	r17, r24
 a54:	09 2f       	mov	r16, r25
 a56:	eb 01       	movw	r28, r22
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	81 fd       	sbrc	r24, 1
 a5c:	09 c0       	rjmp	.+18     	; 0xa70 <fputc+0x26>
 a5e:	1f ef       	ldi	r17, 0xFF	; 255
 a60:	0f ef       	ldi	r16, 0xFF	; 255
 a62:	81 2f       	mov	r24, r17
 a64:	90 2f       	mov	r25, r16
 a66:	df 91       	pop	r29
 a68:	cf 91       	pop	r28
 a6a:	1f 91       	pop	r17
 a6c:	0f 91       	pop	r16
 a6e:	08 95       	ret
 a70:	82 ff       	sbrs	r24, 2
 a72:	14 c0       	rjmp	.+40     	; 0xa9c <fputc+0x52>
 a74:	2e 81       	ldd	r18, Y+6	; 0x06
 a76:	3f 81       	ldd	r19, Y+7	; 0x07
 a78:	8c 81       	ldd	r24, Y+4	; 0x04
 a7a:	9d 81       	ldd	r25, Y+5	; 0x05
 a7c:	28 17       	cp	r18, r24
 a7e:	39 07       	cpc	r19, r25
 a80:	3c f4       	brge	.+14     	; 0xa90 <fputc+0x46>
 a82:	e8 81       	ld	r30, Y
 a84:	f9 81       	ldd	r31, Y+1	; 0x01
 a86:	cf 01       	movw	r24, r30
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	99 83       	std	Y+1, r25	; 0x01
 a8c:	88 83       	st	Y, r24
 a8e:	10 83       	st	Z, r17
 a90:	8e 81       	ldd	r24, Y+6	; 0x06
 a92:	9f 81       	ldd	r25, Y+7	; 0x07
 a94:	01 96       	adiw	r24, 0x01	; 1
 a96:	9f 83       	std	Y+7, r25	; 0x07
 a98:	8e 83       	std	Y+6, r24	; 0x06
 a9a:	e3 cf       	rjmp	.-58     	; 0xa62 <fputc+0x18>
 a9c:	e8 85       	ldd	r30, Y+8	; 0x08
 a9e:	f9 85       	ldd	r31, Y+9	; 0x09
 aa0:	81 2f       	mov	r24, r17
 aa2:	09 95       	icall
 aa4:	89 2b       	or	r24, r25
 aa6:	a1 f3       	breq	.-24     	; 0xa90 <fputc+0x46>
 aa8:	da cf       	rjmp	.-76     	; 0xa5e <fputc+0x14>

00000aaa <__ultoa_invert>:
 aaa:	fa 01       	movw	r30, r20
 aac:	aa 27       	eor	r26, r26
 aae:	28 30       	cpi	r18, 0x08	; 8
 ab0:	51 f1       	breq	.+84     	; 0xb06 <__ultoa_invert+0x5c>
 ab2:	20 31       	cpi	r18, 0x10	; 16
 ab4:	81 f1       	breq	.+96     	; 0xb16 <__ultoa_invert+0x6c>
 ab6:	e8 94       	clt
 ab8:	6f 93       	push	r22
 aba:	6e 7f       	andi	r22, 0xFE	; 254
 abc:	6e 5f       	subi	r22, 0xFE	; 254
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	af 4f       	sbci	r26, 0xFF	; 255
 ac6:	b1 e0       	ldi	r27, 0x01	; 1
 ac8:	3e d0       	rcall	.+124    	; 0xb46 <__ultoa_invert+0x9c>
 aca:	b4 e0       	ldi	r27, 0x04	; 4
 acc:	3c d0       	rcall	.+120    	; 0xb46 <__ultoa_invert+0x9c>
 ace:	67 0f       	add	r22, r23
 ad0:	78 1f       	adc	r23, r24
 ad2:	89 1f       	adc	r24, r25
 ad4:	9a 1f       	adc	r25, r26
 ad6:	a1 1d       	adc	r26, r1
 ad8:	68 0f       	add	r22, r24
 ada:	79 1f       	adc	r23, r25
 adc:	8a 1f       	adc	r24, r26
 ade:	91 1d       	adc	r25, r1
 ae0:	a1 1d       	adc	r26, r1
 ae2:	6a 0f       	add	r22, r26
 ae4:	71 1d       	adc	r23, r1
 ae6:	81 1d       	adc	r24, r1
 ae8:	91 1d       	adc	r25, r1
 aea:	a1 1d       	adc	r26, r1
 aec:	20 d0       	rcall	.+64     	; 0xb2e <__ultoa_invert+0x84>
 aee:	09 f4       	brne	.+2      	; 0xaf2 <__ultoa_invert+0x48>
 af0:	68 94       	set
 af2:	3f 91       	pop	r19
 af4:	2a e0       	ldi	r18, 0x0A	; 10
 af6:	26 9f       	mul	r18, r22
 af8:	11 24       	eor	r1, r1
 afa:	30 19       	sub	r19, r0
 afc:	30 5d       	subi	r19, 0xD0	; 208
 afe:	31 93       	st	Z+, r19
 b00:	de f6       	brtc	.-74     	; 0xab8 <__ultoa_invert+0xe>
 b02:	cf 01       	movw	r24, r30
 b04:	08 95       	ret
 b06:	46 2f       	mov	r20, r22
 b08:	47 70       	andi	r20, 0x07	; 7
 b0a:	40 5d       	subi	r20, 0xD0	; 208
 b0c:	41 93       	st	Z+, r20
 b0e:	b3 e0       	ldi	r27, 0x03	; 3
 b10:	0f d0       	rcall	.+30     	; 0xb30 <__ultoa_invert+0x86>
 b12:	c9 f7       	brne	.-14     	; 0xb06 <__ultoa_invert+0x5c>
 b14:	f6 cf       	rjmp	.-20     	; 0xb02 <__ultoa_invert+0x58>
 b16:	46 2f       	mov	r20, r22
 b18:	4f 70       	andi	r20, 0x0F	; 15
 b1a:	40 5d       	subi	r20, 0xD0	; 208
 b1c:	4a 33       	cpi	r20, 0x3A	; 58
 b1e:	18 f0       	brcs	.+6      	; 0xb26 <__ultoa_invert+0x7c>
 b20:	49 5d       	subi	r20, 0xD9	; 217
 b22:	31 fd       	sbrc	r19, 1
 b24:	40 52       	subi	r20, 0x20	; 32
 b26:	41 93       	st	Z+, r20
 b28:	02 d0       	rcall	.+4      	; 0xb2e <__ultoa_invert+0x84>
 b2a:	a9 f7       	brne	.-22     	; 0xb16 <__ultoa_invert+0x6c>
 b2c:	ea cf       	rjmp	.-44     	; 0xb02 <__ultoa_invert+0x58>
 b2e:	b4 e0       	ldi	r27, 0x04	; 4
 b30:	a6 95       	lsr	r26
 b32:	97 95       	ror	r25
 b34:	87 95       	ror	r24
 b36:	77 95       	ror	r23
 b38:	67 95       	ror	r22
 b3a:	ba 95       	dec	r27
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__ultoa_invert+0x86>
 b3e:	00 97       	sbiw	r24, 0x00	; 0
 b40:	61 05       	cpc	r22, r1
 b42:	71 05       	cpc	r23, r1
 b44:	08 95       	ret
 b46:	9b 01       	movw	r18, r22
 b48:	ac 01       	movw	r20, r24
 b4a:	0a 2e       	mov	r0, r26
 b4c:	06 94       	lsr	r0
 b4e:	57 95       	ror	r21
 b50:	47 95       	ror	r20
 b52:	37 95       	ror	r19
 b54:	27 95       	ror	r18
 b56:	ba 95       	dec	r27
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__ultoa_invert+0xa2>
 b5a:	62 0f       	add	r22, r18
 b5c:	73 1f       	adc	r23, r19
 b5e:	84 1f       	adc	r24, r20
 b60:	95 1f       	adc	r25, r21
 b62:	a0 1d       	adc	r26, r0
 b64:	08 95       	ret

00000b66 <__prologue_saves__>:
 b66:	2f 92       	push	r2
 b68:	3f 92       	push	r3
 b6a:	4f 92       	push	r4
 b6c:	5f 92       	push	r5
 b6e:	6f 92       	push	r6
 b70:	7f 92       	push	r7
 b72:	8f 92       	push	r8
 b74:	9f 92       	push	r9
 b76:	af 92       	push	r10
 b78:	bf 92       	push	r11
 b7a:	cf 92       	push	r12
 b7c:	df 92       	push	r13
 b7e:	ef 92       	push	r14
 b80:	ff 92       	push	r15
 b82:	0f 93       	push	r16
 b84:	1f 93       	push	r17
 b86:	cf 93       	push	r28
 b88:	df 93       	push	r29
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
 b8e:	ca 1b       	sub	r28, r26
 b90:	db 0b       	sbc	r29, r27
 b92:	0f b6       	in	r0, 0x3f	; 63
 b94:	f8 94       	cli
 b96:	de bf       	out	0x3e, r29	; 62
 b98:	0f be       	out	0x3f, r0	; 63
 b9a:	cd bf       	out	0x3d, r28	; 61
 b9c:	09 94       	ijmp

00000b9e <__epilogue_restores__>:
 b9e:	2a 88       	ldd	r2, Y+18	; 0x12
 ba0:	39 88       	ldd	r3, Y+17	; 0x11
 ba2:	48 88       	ldd	r4, Y+16	; 0x10
 ba4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ba6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ba8:	7d 84       	ldd	r7, Y+13	; 0x0d
 baa:	8c 84       	ldd	r8, Y+12	; 0x0c
 bac:	9b 84       	ldd	r9, Y+11	; 0x0b
 bae:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb0:	b9 84       	ldd	r11, Y+9	; 0x09
 bb2:	c8 84       	ldd	r12, Y+8	; 0x08
 bb4:	df 80       	ldd	r13, Y+7	; 0x07
 bb6:	ee 80       	ldd	r14, Y+6	; 0x06
 bb8:	fd 80       	ldd	r15, Y+5	; 0x05
 bba:	0c 81       	ldd	r16, Y+4	; 0x04
 bbc:	1b 81       	ldd	r17, Y+3	; 0x03
 bbe:	aa 81       	ldd	r26, Y+2	; 0x02
 bc0:	b9 81       	ldd	r27, Y+1	; 0x01
 bc2:	ce 0f       	add	r28, r30
 bc4:	d1 1d       	adc	r29, r1
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	f8 94       	cli
 bca:	de bf       	out	0x3e, r29	; 62
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	cd bf       	out	0x3d, r28	; 61
 bd0:	ed 01       	movw	r28, r26
 bd2:	08 95       	ret

00000bd4 <_exit>:
 bd4:	f8 94       	cli

00000bd6 <__stop_program>:
 bd6:	ff cf       	rjmp	.-2      	; 0xbd6 <__stop_program>
