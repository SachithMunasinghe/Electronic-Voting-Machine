
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  00001aec  00001ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aec  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800292  00800292  00001d32  2**0
                  ALLOC
  3 .eeprom       00000065  00810000  00810000  00001d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d7d  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009b0  00000000  00000000  00005b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f0f  00000000  00000000  0000653d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000045c  00000000  00000000  0000744c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007bf  00000000  00000000  000078a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002377  00000000  00000000  00008067  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a0  00000000  00000000  0000a3de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ee       	ldi	r30, 0xEC	; 236
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 39       	cpi	r26, 0x92	; 146
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 e9       	ldi	r26, 0x92	; 146
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 3a       	cpi	r26, 0xAE	; 174
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 80 04 	call	0x900	; 0x900 <main>
      9e:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <blinkLED_Buzzer.part.2>:
        	_delay_ms(50);         
        	PORTD &= ~(1<<led_pin);
		PORTD &= ~(1<<Buzzer_PIN);

    	}else if (led_pin == LED_PIN_RR) {
		PORTD |= (1<<led_pin);
      a6:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD |= (1<<Buzzer_PIN);
      a8:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      aa:	2f ef       	ldi	r18, 0xFF	; 255
      ac:	80 e7       	ldi	r24, 0x70	; 112
      ae:	92 e0       	ldi	r25, 0x02	; 2
      b0:	21 50       	subi	r18, 0x01	; 1
      b2:	80 40       	sbci	r24, 0x00	; 0
      b4:	90 40       	sbci	r25, 0x00	; 0
      b6:	e1 f7       	brne	.-8      	; 0xb0 <blinkLED_Buzzer.part.2+0xa>
      b8:	00 c0       	rjmp	.+0      	; 0xba <blinkLED_Buzzer.part.2+0x14>
      ba:	00 00       	nop
		_delay_ms(50);
		PORTD &= ~(1<<led_pin);
      bc:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~(1<<Buzzer_PIN);
      be:	5f 98       	cbi	0x0b, 7	; 11
	}
}
      c0:	08 95       	ret

000000c2 <initButton>:
}

// Function to initialize buttons with internal pull-up resistors
void initButton(void) {
    // Set buttons connected to PORTC (A, B, C, D) as input with pull-up
    DDRC &= ~((1 << Button_PIN_A) | (1 << Button_PIN_B) | (1 << Button_PIN_C) | (1 << Button_PIN_D)); // Set PORTC pins as input
      c2:	87 b1       	in	r24, 0x07	; 7
      c4:	80 7f       	andi	r24, 0xF0	; 240
      c6:	87 b9       	out	0x07, r24	; 7
    PORTC |= (1 << Button_PIN_A) | (1 << Button_PIN_B) | (1 << Button_PIN_C) | (1 << Button_PIN_D);   // Enable pull-up resistors on PORTC pins
      c8:	88 b1       	in	r24, 0x08	; 8
      ca:	8f 60       	ori	r24, 0x0F	; 15
      cc:	88 b9       	out	0x08, r24	; 8

    // Set buttons connected to PORTB (Register, Start, Result, Reset) as input with pull-up
    DDRB &= ~((1 << Button_PIN_Reg) | (1 << Button_PIN_St) | (1 << Button_PIN_Result) | (1 << Button_PIN_Reset)); // Set PORTB pins as input
      ce:	84 b1       	in	r24, 0x04	; 4
      d0:	8c 73       	andi	r24, 0x3C	; 60
      d2:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1 << Button_PIN_Reg) | (1 << Button_PIN_St) | (1 << Button_PIN_Result) | (1 << Button_PIN_Reset);   // Enable pull-up resistors on PORTB pins
      d4:	85 b1       	in	r24, 0x05	; 5
      d6:	83 6c       	ori	r24, 0xC3	; 195
      d8:	85 b9       	out	0x05, r24	; 5
}
      da:	08 95       	ret

000000dc <initSPI>:

void initSPI(void) {
    DDRB = (1<<PB3) | (1<<PB5) | (1<<PB2);
      dc:	8c e2       	ldi	r24, 0x2C	; 44
      de:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
      e0:	81 e5       	ldi	r24, 0x51	; 81
      e2:	8c bd       	out	0x2c, r24	; 44
}
      e4:	08 95       	ret

000000e6 <SPI_send>:

void SPI_send(char data) {
    SPDR = data;
      e6:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1<<SPIF)));
      e8:	0d b4       	in	r0, 0x2d	; 45
      ea:	07 fe       	sbrs	r0, 7
      ec:	fd cf       	rjmp	.-6      	; 0xe8 <SPI_send+0x2>
}
      ee:	08 95       	ret

000000f0 <SPI_receive>:

char SPI_receive(void) {
    SPI_send(0x00);
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_send>
    while(!(SPSR & (1<<SPIF)));
      f6:	0d b4       	in	r0, 0x2d	; 45
      f8:	07 fe       	sbrs	r0, 7
      fa:	fd cf       	rjmp	.-6      	; 0xf6 <SPI_receive+0x6>
    return SPDR;
      fc:	8e b5       	in	r24, 0x2e	; 46
}
      fe:	08 95       	ret

00000100 <MFRC522_write>:

void MFRC522_reset(void) {
    MFRC522_write(CommandReg, PCD_RESETPHASE);
}

void MFRC522_write(uint8_t addr, uint8_t val) {
     100:	cf 93       	push	r28
     102:	c6 2f       	mov	r28, r22
    PORTB &= ~(1<<PB2);
     104:	2a 98       	cbi	0x05, 2	; 5
    SPI_send((addr<<1)&0x7E);
     106:	88 0f       	add	r24, r24
     108:	8e 77       	andi	r24, 0x7E	; 126
     10a:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_send>
    SPI_send(val);
     10e:	8c 2f       	mov	r24, r28
     110:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_send>
    PORTB |= (1<<PB2);
     114:	2a 9a       	sbi	0x05, 2	; 5
}
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <MFRC522_reset>:
    MFRC522_write(ModeReg, 0x3D);
    MFRC522_antennaOn();
}

void MFRC522_reset(void) {
    MFRC522_write(CommandReg, PCD_RESETPHASE);
     11a:	6f e0       	ldi	r22, 0x0F	; 15
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0c 94 80 00 	jmp	0x100	; 0x100 <MFRC522_write>

00000122 <MFRC522_read>:
    PORTB |= (1<<PB2);
}

uint8_t MFRC522_read(uint8_t addr) {
    uint8_t val;
    PORTB &= ~(1<<PB2);
     122:	2a 98       	cbi	0x05, 2	; 5
    SPI_send(((addr<<1)&0x7E) | 0x80);
     124:	88 0f       	add	r24, r24
     126:	8e 77       	andi	r24, 0x7E	; 126
     128:	80 68       	ori	r24, 0x80	; 128
     12a:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_send>
    val = SPI_receive();
     12e:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_receive>
    PORTB |= (1<<PB2);
     132:	2a 9a       	sbi	0x05, 2	; 5
    return val;
}
     134:	08 95       	ret

00000136 <MFRC522_setBitMask>:

void MFRC522_setBitMask(uint8_t reg, uint8_t mask) {
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	d8 2f       	mov	r29, r24
     13c:	c6 2f       	mov	r28, r22
    uint8_t tmp = MFRC522_read(reg);
     13e:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
    MFRC522_write(reg, tmp | mask);
     142:	68 2f       	mov	r22, r24
     144:	6c 2b       	or	r22, r28
     146:	8d 2f       	mov	r24, r29
}
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
    return val;
}

void MFRC522_setBitMask(uint8_t reg, uint8_t mask) {
    uint8_t tmp = MFRC522_read(reg);
    MFRC522_write(reg, tmp | mask);
     14c:	0c 94 80 00 	jmp	0x100	; 0x100 <MFRC522_write>

00000150 <MFRC522_clearBitMask>:
}

void MFRC522_clearBitMask(uint8_t reg, uint8_t mask) {
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	d8 2f       	mov	r29, r24
     156:	c6 2f       	mov	r28, r22
    uint8_t tmp = MFRC522_read(reg);
     158:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
    MFRC522_write(reg, tmp & (~mask));
     15c:	c0 95       	com	r28
     15e:	6c 2f       	mov	r22, r28
     160:	68 23       	and	r22, r24
     162:	8d 2f       	mov	r24, r29
}
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
    MFRC522_write(reg, tmp | mask);
}

void MFRC522_clearBitMask(uint8_t reg, uint8_t mask) {
    uint8_t tmp = MFRC522_read(reg);
    MFRC522_write(reg, tmp & (~mask));
     168:	0c 94 80 00 	jmp	0x100	; 0x100 <MFRC522_write>

0000016c <MFRC522_antennaOn>:
}

void MFRC522_antennaOn(void) {
    uint8_t temp = MFRC522_read(TxControlReg);
     16c:	84 e1       	ldi	r24, 0x14	; 20
     16e:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
    if (!(temp & 0x03)) {
     172:	83 70       	andi	r24, 0x03	; 3
     174:	21 f4       	brne	.+8      	; 0x17e <MFRC522_antennaOn+0x12>
        MFRC522_setBitMask(TxControlReg, 0x03);
     176:	63 e0       	ldi	r22, 0x03	; 3
     178:	84 e1       	ldi	r24, 0x14	; 20
     17a:	0c 94 9b 00 	jmp	0x136	; 0x136 <MFRC522_setBitMask>
    }
}
     17e:	08 95       	ret

00000180 <MFRC522_init>:
    while(!(SPSR & (1<<SPIF)));
    return SPDR;
}

void MFRC522_init(void) {
    MFRC522_reset();
     180:	0e 94 8d 00 	call	0x11a	; 0x11a <MFRC522_reset>
    MFRC522_write(TModeReg, 0x8D);
     184:	6d e8       	ldi	r22, 0x8D	; 141
     186:	8a e2       	ldi	r24, 0x2A	; 42
     188:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    MFRC522_write(TPrescalerReg, 0x3E);
     18c:	6e e3       	ldi	r22, 0x3E	; 62
     18e:	8b e2       	ldi	r24, 0x2B	; 43
     190:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    MFRC522_write(TReloadRegL, 30);
     194:	6e e1       	ldi	r22, 0x1E	; 30
     196:	8d e2       	ldi	r24, 0x2D	; 45
     198:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    MFRC522_write(TReloadRegH, 0);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	8c e2       	ldi	r24, 0x2C	; 44
     1a0:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    MFRC522_write(TxASKReg, 0x40);
     1a4:	60 e4       	ldi	r22, 0x40	; 64
     1a6:	85 e1       	ldi	r24, 0x15	; 21
     1a8:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    MFRC522_write(ModeReg, 0x3D);
     1ac:	6d e3       	ldi	r22, 0x3D	; 61
     1ae:	81 e1       	ldi	r24, 0x11	; 17
     1b0:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    MFRC522_antennaOn();
     1b4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <MFRC522_antennaOn>

000001b8 <MFRC522_toCard>:
    }

    return status;
}

uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
     1b8:	8f 92       	push	r8
     1ba:	9f 92       	push	r9
     1bc:	af 92       	push	r10
     1be:	bf 92       	push	r11
     1c0:	cf 92       	push	r12
     1c2:	df 92       	push	r13
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	0f 93       	push	r16
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	d8 2f       	mov	r29, r24
     1d2:	86 2e       	mov	r8, r22
     1d4:	b7 2e       	mov	r11, r23
     1d6:	a4 2e       	mov	r10, r20
     1d8:	69 01       	movw	r12, r18
            irqEn = 0x12;
            waitIRq = 0x10;
            break;
        case PCD_TRANSCEIVE:
            irqEn = 0x77;
            waitIRq = 0x30;
     1da:	90 e3       	ldi	r25, 0x30	; 48
     1dc:	99 2e       	mov	r9, r25
        case PCD_AUTHENT:
            irqEn = 0x12;
            waitIRq = 0x10;
            break;
        case PCD_TRANSCEIVE:
            irqEn = 0x77;
     1de:	c7 e7       	ldi	r28, 0x77	; 119
    uint8_t waitIRq = 0x00;
    uint8_t lastBits;
    uint8_t n;
    uint8_t i;

    switch (command) {
     1e0:	8c 30       	cpi	r24, 0x0C	; 12
     1e2:	39 f0       	breq	.+14     	; 0x1f2 <MFRC522_toCard+0x3a>
        case PCD_AUTHENT:
            irqEn = 0x12;
            waitIRq = 0x10;
     1e4:	20 e1       	ldi	r18, 0x10	; 16
     1e6:	92 2e       	mov	r9, r18
    uint8_t n;
    uint8_t i;

    switch (command) {
        case PCD_AUTHENT:
            irqEn = 0x12;
     1e8:	c2 e1       	ldi	r28, 0x12	; 18
    uint8_t waitIRq = 0x00;
    uint8_t lastBits;
    uint8_t n;
    uint8_t i;

    switch (command) {
     1ea:	8e 30       	cpi	r24, 0x0E	; 14
     1ec:	11 f0       	breq	.+4      	; 0x1f2 <MFRC522_toCard+0x3a>
}

uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
    uint8_t status = MI_ERR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
     1ee:	91 2c       	mov	r9, r1
    return status;
}

uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
    uint8_t status = MI_ERR;
    uint8_t irqEn = 0x00;
     1f0:	c0 e0       	ldi	r28, 0x00	; 0
            break;
        default:
            break;
    }

    MFRC522_write(CommIEnReg, irqEn | 0x80);
     1f2:	6c 2f       	mov	r22, r28
     1f4:	60 68       	ori	r22, 0x80	; 128
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    MFRC522_clearBitMask(CommIrqReg, 0x80);
     1fc:	60 e8       	ldi	r22, 0x80	; 128
     1fe:	84 e0       	ldi	r24, 0x04	; 4
     200:	0e 94 a8 00 	call	0x150	; 0x150 <MFRC522_clearBitMask>
    MFRC522_setBitMask(FIFOLevelReg, 0x80);
     204:	60 e8       	ldi	r22, 0x80	; 128
     206:	8a e0       	ldi	r24, 0x0A	; 10
     208:	0e 94 9b 00 	call	0x136	; 0x136 <MFRC522_setBitMask>

    MFRC522_write(CommandReg, PCD_IDLE);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
     214:	e8 2c       	mov	r14, r8
     216:	fb 2c       	mov	r15, r11
     218:	ae 0c       	add	r10, r14
     21a:	bf 2c       	mov	r11, r15
     21c:	b1 1c       	adc	r11, r1

    for (i = 0; i < sendLen; i++) {
     21e:	ae 14       	cp	r10, r14
     220:	bf 04       	cpc	r11, r15
     222:	09 f0       	breq	.+2      	; 0x226 <MFRC522_toCard+0x6e>
     224:	5a c0       	rjmp	.+180    	; 0x2da <MFRC522_toCard+0x122>
        MFRC522_write(FIFODataReg, sendData[i]);
    }

    MFRC522_write(CommandReg, command);
     226:	6d 2f       	mov	r22, r29
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    if (command == PCD_TRANSCEIVE) {
     22e:	dc 30       	cpi	r29, 0x0C	; 12
     230:	21 f4       	brne	.+8      	; 0x23a <MFRC522_toCard+0x82>
        MFRC522_setBitMask(BitFramingReg, 0x80);
     232:	60 e8       	ldi	r22, 0x80	; 128
     234:	8d e0       	ldi	r24, 0x0D	; 13
     236:	0e 94 9b 00 	call	0x136	; 0x136 <MFRC522_setBitMask>
    return status;
}

uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
    uint8_t status = MI_ERR;
    uint8_t irqEn = 0x00;
     23a:	80 ed       	ldi	r24, 0xD0	; 208
     23c:	f8 2e       	mov	r15, r24

    i = 2000;
    do {
        n = MFRC522_read(CommIrqReg);
        i--;
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
     23e:	68 94       	set
     240:	90 f8       	bld	r9, 0
        MFRC522_setBitMask(BitFramingReg, 0x80);
    }

    i = 2000;
    do {
        n = MFRC522_read(CommIrqReg);
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
     248:	e8 2e       	mov	r14, r24
        i--;
     24a:	fa 94       	dec	r15
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
     24c:	ff 20       	and	r15, r15
     24e:	19 f0       	breq	.+6      	; 0x256 <MFRC522_toCard+0x9e>
     250:	89 2d       	mov	r24, r9
     252:	8e 21       	and	r24, r14
     254:	b1 f3       	breq	.-20     	; 0x242 <MFRC522_toCard+0x8a>

    MFRC522_clearBitMask(BitFramingReg, 0x80);
     256:	60 e8       	ldi	r22, 0x80	; 128
     258:	8d e0       	ldi	r24, 0x0D	; 13
     25a:	0e 94 a8 00 	call	0x150	; 0x150 <MFRC522_clearBitMask>

    if (i != 0) {
     25e:	ff 20       	and	r15, r15
     260:	09 f4       	brne	.+2      	; 0x264 <MFRC522_toCard+0xac>
     262:	47 c0       	rjmp	.+142    	; 0x2f2 <MFRC522_toCard+0x13a>
        if (!(MFRC522_read(ErrorReg) & 0x1B)) {
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
     26a:	8b 71       	andi	r24, 0x1B	; 27
     26c:	09 f0       	breq	.+2      	; 0x270 <MFRC522_toCard+0xb8>
     26e:	41 c0       	rjmp	.+130    	; 0x2f2 <MFRC522_toCard+0x13a>
     270:	c1 70       	andi	r28, 0x01	; 1
     272:	ce 21       	and	r28, r14
            status = MI_OK;
            if (n & irqEn & 0x01) {
                status = MI_NOTAGERR;
            }

            if (command == PCD_TRANSCEIVE) {
     274:	dc 30       	cpi	r29, 0x0C	; 12
     276:	19 f5       	brne	.+70     	; 0x2be <MFRC522_toCard+0x106>
                n = MFRC522_read(FIFOLevelReg);
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
     27e:	d8 2f       	mov	r29, r24
                lastBits = MFRC522_read(ControlReg) & 0x07;
     280:	8c e0       	ldi	r24, 0x0C	; 12
     282:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
     286:	98 2f       	mov	r25, r24
     288:	97 70       	andi	r25, 0x07	; 7
                if (lastBits) {
     28a:	71 f1       	breq	.+92     	; 0x2e8 <MFRC522_toCard+0x130>
                    *backLen = (n - 1) * 8 + lastBits;
     28c:	8f e1       	ldi	r24, 0x1F	; 31
     28e:	8d 0f       	add	r24, r29
     290:	88 0f       	add	r24, r24
     292:	88 0f       	add	r24, r24
     294:	88 0f       	add	r24, r24
     296:	89 0f       	add	r24, r25
                } else {
                    *backLen = n * 8;
     298:	f8 01       	movw	r30, r16
     29a:	80 83       	st	Z, r24
                }

                if (n == 0) {
     29c:	dd 23       	and	r29, r29
     29e:	59 f1       	breq	.+86     	; 0x2f6 <MFRC522_toCard+0x13e>
     2a0:	d1 31       	cpi	r29, 0x11	; 17
     2a2:	08 f0       	brcs	.+2      	; 0x2a6 <MFRC522_toCard+0xee>
     2a4:	d0 e1       	ldi	r29, 0x10	; 16
     2a6:	1c 2d       	mov	r17, r12
     2a8:	76 01       	movw	r14, r12
                if (n > MAX_LEN) {
                    n = MAX_LEN;
                }

                for (i = 0; i < n; i++) {
                    backData[i] = MFRC522_read(FIFODataReg);
     2aa:	89 e0       	ldi	r24, 0x09	; 9
     2ac:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
     2b0:	f7 01       	movw	r30, r14
     2b2:	81 93       	st	Z+, r24
     2b4:	7f 01       	movw	r14, r30
                }
                if (n > MAX_LEN) {
                    n = MAX_LEN;
                }

                for (i = 0; i < n; i++) {
     2b6:	8e 2f       	mov	r24, r30
     2b8:	81 1b       	sub	r24, r17
     2ba:	8d 17       	cp	r24, r29
     2bc:	b0 f3       	brcs	.-20     	; 0x2aa <MFRC522_toCard+0xf2>
            status = MI_ERR;
        }
    }

    return status;
}
     2be:	8c 2f       	mov	r24, r28
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	bf 90       	pop	r11
     2d2:	af 90       	pop	r10
     2d4:	9f 90       	pop	r9
     2d6:	8f 90       	pop	r8
     2d8:	08 95       	ret
    MFRC522_setBitMask(FIFOLevelReg, 0x80);

    MFRC522_write(CommandReg, PCD_IDLE);

    for (i = 0; i < sendLen; i++) {
        MFRC522_write(FIFODataReg, sendData[i]);
     2da:	f7 01       	movw	r30, r14
     2dc:	61 91       	ld	r22, Z+
     2de:	7f 01       	movw	r14, r30
     2e0:	89 e0       	ldi	r24, 0x09	; 9
     2e2:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
     2e6:	9b cf       	rjmp	.-202    	; 0x21e <MFRC522_toCard+0x66>
                n = MFRC522_read(FIFOLevelReg);
                lastBits = MFRC522_read(ControlReg) & 0x07;
                if (lastBits) {
                    *backLen = (n - 1) * 8 + lastBits;
                } else {
                    *backLen = n * 8;
     2e8:	8d 2f       	mov	r24, r29
     2ea:	88 0f       	add	r24, r24
     2ec:	88 0f       	add	r24, r24
     2ee:	88 0f       	add	r24, r24
     2f0:	d3 cf       	rjmp	.-90     	; 0x298 <MFRC522_toCard+0xe0>

    return status;
}

uint8_t MFRC522_toCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
    uint8_t status = MI_ERR;
     2f2:	c2 e0       	ldi	r28, 0x02	; 2
        } else {
            status = MI_ERR;
        }
    }

    return status;
     2f4:	e4 cf       	rjmp	.-56     	; 0x2be <MFRC522_toCard+0x106>
                if (n > MAX_LEN) {
                    n = MAX_LEN;
                }

                for (i = 0; i < n; i++) {
                    backData[i] = MFRC522_read(FIFODataReg);
     2f6:	89 e0       	ldi	r24, 0x09	; 9
     2f8:	0e 94 91 00 	call	0x122	; 0x122 <MFRC522_read>
     2fc:	f6 01       	movw	r30, r12
     2fe:	80 83       	st	Z, r24
     300:	de cf       	rjmp	.-68     	; 0x2be <MFRC522_toCard+0x106>

00000302 <MFRC522_request>:
    if (!(temp & 0x03)) {
        MFRC522_setBitMask(TxControlReg, 0x03);
    }
}

uint8_t MFRC522_request(uint8_t reqMode, uint8_t *TagType) {
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	1f 92       	push	r1
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	18 2f       	mov	r17, r24
     316:	7b 01       	movw	r14, r22
    uint8_t status;
    uint8_t backBits;

    MFRC522_write(BitFramingReg, 0x07);
     318:	67 e0       	ldi	r22, 0x07	; 7
     31a:	8d e0       	ldi	r24, 0x0D	; 13
     31c:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    TagType[0] = reqMode;
     320:	f7 01       	movw	r30, r14
     322:	10 83       	st	Z, r17
    status = MFRC522_toCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
     324:	8e 01       	movw	r16, r28
     326:	0f 5f       	subi	r16, 0xFF	; 255
     328:	1f 4f       	sbci	r17, 0xFF	; 255
     32a:	97 01       	movw	r18, r14
     32c:	41 e0       	ldi	r20, 0x01	; 1
     32e:	b7 01       	movw	r22, r14
     330:	8c e0       	ldi	r24, 0x0C	; 12
     332:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <MFRC522_toCard>

    if ((status != MI_OK) || (backBits != 0x10)) {
     336:	81 11       	cpse	r24, r1
     338:	03 c0       	rjmp	.+6      	; 0x340 <MFRC522_request+0x3e>
     33a:	99 81       	ldd	r25, Y+1	; 0x01
     33c:	90 31       	cpi	r25, 0x10	; 16
     33e:	09 f0       	breq	.+2      	; 0x342 <MFRC522_request+0x40>
        status = MI_ERR;
     340:	82 e0       	ldi	r24, 0x02	; 2
    }

    return status;
}
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	08 95       	ret

00000352 <MFRC522_anticoll>:
    }

    return status;
}

uint8_t MFRC522_anticoll(uint8_t *serNum) {
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	1f 92       	push	r1
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	7c 01       	movw	r14, r24
    uint8_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
    uint8_t unLen;

    MFRC522_write(BitFramingReg, 0x00);
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	8d e0       	ldi	r24, 0x0D	; 13
     36a:	0e 94 80 00 	call	0x100	; 0x100 <MFRC522_write>
    serNum[0] = PICC_ANTICOLL;
     36e:	83 e9       	ldi	r24, 0x93	; 147
     370:	f7 01       	movw	r30, r14
     372:	80 83       	st	Z, r24
    serNum[1] = 0x20;
     374:	80 e2       	ldi	r24, 0x20	; 32
     376:	81 83       	std	Z+1, r24	; 0x01
    status = MFRC522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
     378:	8e 01       	movw	r16, r28
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	97 01       	movw	r18, r14
     380:	42 e0       	ldi	r20, 0x02	; 2
     382:	b7 01       	movw	r22, r14
     384:	8c e0       	ldi	r24, 0x0C	; 12
     386:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <MFRC522_toCard>

    if (status == MI_OK) {
     38a:	81 11       	cpse	r24, r1
     38c:	0e c0       	rjmp	.+28     	; 0x3aa <MFRC522_anticoll+0x58>
     38e:	f7 01       	movw	r30, r14
     390:	97 01       	movw	r18, r14
     392:	2c 5f       	subi	r18, 0xFC	; 252
     394:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t MFRC522_anticoll(uint8_t *serNum) {
    uint8_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
     396:	90 e0       	ldi	r25, 0x00	; 0
    serNum[1] = 0x20;
    status = MFRC522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);

    if (status == MI_OK) {
        for (i = 0; i < 4; i++) {
            serNumCheck ^= serNum[i];
     398:	41 91       	ld	r20, Z+
     39a:	94 27       	eor	r25, r20
    serNum[0] = PICC_ANTICOLL;
    serNum[1] = 0x20;
    status = MFRC522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);

    if (status == MI_OK) {
        for (i = 0; i < 4; i++) {
     39c:	e2 17       	cp	r30, r18
     39e:	f3 07       	cpc	r31, r19
     3a0:	d9 f7       	brne	.-10     	; 0x398 <MFRC522_anticoll+0x46>
            serNumCheck ^= serNum[i];
        }
        if (serNumCheck != serNum[i]) {
     3a2:	f7 01       	movw	r30, r14
     3a4:	24 81       	ldd	r18, Z+4	; 0x04
     3a6:	92 13       	cpse	r25, r18
            status = MI_ERR;
     3a8:	82 e0       	ldi	r24, 0x02	; 2
        }
    }

    return status;
}
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	08 95       	ret

000003ba <initLEDs_Buzzer>:

void initLEDs_Buzzer(void) {
    	// Initialize both LEDs and the buzzer
	DDRD |= (1<<LED_PIN_Reg) | (1<<LED_PIN_Vote) | (1<<LED_PIN_RR) | (1<<Buzzer_PIN);
     3ba:	8a b1       	in	r24, 0x0a	; 10
     3bc:	88 6e       	ori	r24, 0xE8	; 232
     3be:	8a b9       	out	0x0a, r24	; 10
}
     3c0:	08 95       	ret

000003c2 <blinkLED_Buzzer>:

void blinkLED_Buzzer(uint8_t led_pin) {
    // Blink the specified LED
	if (led_pin == LED_PIN_Reg) {
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	71 f4       	brne	.+28     	; 0x3e2 <blinkLED_Buzzer+0x20>
        	PORTD |= (1<<led_pin);
     3c6:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD |= (1<<Buzzer_PIN);
     3c8:	5f 9a       	sbi	0x0b, 7	; 11
     3ca:	2f ef       	ldi	r18, 0xFF	; 255
     3cc:	80 e7       	ldi	r24, 0x70	; 112
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	80 40       	sbci	r24, 0x00	; 0
     3d4:	90 40       	sbci	r25, 0x00	; 0
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <blinkLED_Buzzer+0xe>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <blinkLED_Buzzer+0x18>
     3da:	00 00       	nop
        	_delay_ms(50);         
        	PORTD &= ~(1<<led_pin);
     3dc:	5b 98       	cbi	0x0b, 3	; 11
    	} else if (led_pin == LED_PIN_Vote) {
        	PORTD |= (1<<led_pin);
		PORTD |= (1<<Buzzer_PIN);
        	_delay_ms(50);         
        	PORTD &= ~(1<<led_pin);
		PORTD &= ~(1<<Buzzer_PIN);
     3de:	5f 98       	cbi	0x0b, 7	; 11
     3e0:	08 95       	ret
		PORTD |= (1<<Buzzer_PIN);
        	_delay_ms(50);         
        	PORTD &= ~(1<<led_pin);
		PORTD &= ~(1<<Buzzer_PIN);

    	} else if (led_pin == LED_PIN_Vote) {
     3e2:	85 30       	cpi	r24, 0x05	; 5
     3e4:	69 f4       	brne	.+26     	; 0x400 <__EEPROM_REGION_LENGTH__>
        	PORTD |= (1<<led_pin);
     3e6:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1<<Buzzer_PIN);
     3e8:	5f 9a       	sbi	0x0b, 7	; 11
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	80 e7       	ldi	r24, 0x70	; 112
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	21 50       	subi	r18, 0x01	; 1
     3f2:	80 40       	sbci	r24, 0x00	; 0
     3f4:	90 40       	sbci	r25, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <blinkLED_Buzzer+0x2e>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <blinkLED_Buzzer+0x38>
     3fa:	00 00       	nop
        	_delay_ms(50);         
        	PORTD &= ~(1<<led_pin);
     3fc:	5d 98       	cbi	0x0b, 5	; 11
     3fe:	ef cf       	rjmp	.-34     	; 0x3de <blinkLED_Buzzer+0x1c>
		PORTD &= ~(1<<Buzzer_PIN);

    	}else if (led_pin == LED_PIN_RR) {
     400:	86 30       	cpi	r24, 0x06	; 6
     402:	11 f4       	brne	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     404:	0c 94 53 00 	jmp	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
		PORTD |= (1<<Buzzer_PIN);
		_delay_ms(50);
		PORTD &= ~(1<<led_pin);
		PORTD &= ~(1<<Buzzer_PIN);
	}
}
     408:	08 95       	ret

0000040a <i2c_init>:

void i2c_init(void) {
    // Initialize I2C (TWI) interface
    TWSR = 0x00; // Prescaler value of 1
     40a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    TWBR = ((F_CPU/100000UL) - 16) / 2; // SCL frequency 100kHz
     40e:	88 e4       	ldi	r24, 0x48	; 72
     410:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
}
     414:	08 95       	ret

00000416 <i2c_start>:

void i2c_start(uint8_t address) {
    // Send start condition
    TWCR = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);
     416:	94 ea       	ldi	r25, 0xA4	; 164
     418:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT))); // Wait for start to be transmitted
     41c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     420:	97 ff       	sbrs	r25, 7
     422:	fc cf       	rjmp	.-8      	; 0x41c <i2c_start+0x6>

    // Load slave address into data register
    TWDR = address;
     424:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWEN) | (1<<TWINT); // Clear TWINT to start transmission
     428:	84 e8       	ldi	r24, 0x84	; 132
     42a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT))); // Wait for end of transmission
     42e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     432:	87 ff       	sbrs	r24, 7
     434:	fc cf       	rjmp	.-8      	; 0x42e <i2c_start+0x18>
}
     436:	08 95       	ret

00000438 <i2c_stop>:

void i2c_stop(void) {
    // Send stop condition
    TWCR = (1<<TWSTO) | (1<<TWEN) | (1<<TWINT);
     438:	84 e9       	ldi	r24, 0x94	; 148
     43a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (TWCR & (1<<TWSTO)); // Wait for stop to be transmitted
     43e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     442:	84 fd       	sbrc	r24, 4
     444:	fc cf       	rjmp	.-8      	; 0x43e <i2c_stop+0x6>
}
     446:	08 95       	ret

00000448 <i2c_write>:

void i2c_write(uint8_t data) {
    TWDR = data;
     448:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWEN) | (1<<TWINT);
     44c:	84 e8       	ldi	r24, 0x84	; 132
     44e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT))); // Wait for end of transmission
     452:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     456:	87 ff       	sbrs	r24, 7
     458:	fc cf       	rjmp	.-8      	; 0x452 <i2c_write+0xa>
}
     45a:	08 95       	ret

0000045c <LCD_SendCommand>:
    LCD_SendCommand(0x06); // Entry mode set: increment automatically, no shift
    LCD_SendCommand(0x01); // Clear display
    _delay_ms(2);  // Delay after clearing display
}

void LCD_SendCommand(uint8_t cmd) {
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	c8 2f       	mov	r28, r24
    // Send a command to the LCD
    i2c_start(LCD_ADDR<<1);
     464:	8e e4       	ldi	r24, 0x4E	; 78
     466:	0e 94 0b 02 	call	0x416	; 0x416 <i2c_start>
    i2c_write((cmd & 0xF0) | 0x08); // Send high nibble
     46a:	1c 2f       	mov	r17, r28
     46c:	10 7f       	andi	r17, 0xF0	; 240
     46e:	d1 2f       	mov	r29, r17
     470:	d8 60       	ori	r29, 0x08	; 8
     472:	8d 2f       	mov	r24, r29
     474:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((cmd & 0xF0) | 0x0C); // Enable bit high
     478:	81 2f       	mov	r24, r17
     47a:	8c 60       	ori	r24, 0x0C	; 12
     47c:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((cmd & 0xF0) | 0x08); // Enable bit low
     480:	8d 2f       	mov	r24, r29
     482:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((cmd << 4) | 0x08);   // Send low nibble
     486:	80 e1       	ldi	r24, 0x10	; 16
     488:	c8 9f       	mul	r28, r24
     48a:	e0 01       	movw	r28, r0
     48c:	11 24       	eor	r1, r1
     48e:	dc 2f       	mov	r29, r28
     490:	d8 60       	ori	r29, 0x08	; 8
     492:	8d 2f       	mov	r24, r29
     494:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((cmd << 4) | 0x0C);   // Enable bit high
     498:	8c 2f       	mov	r24, r28
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((cmd << 4) | 0x08);   // Enable bit low
     4a0:	8d 2f       	mov	r24, r29
     4a2:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_stop();
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
    i2c_write((cmd & 0xF0) | 0x0C); // Enable bit high
    i2c_write((cmd & 0xF0) | 0x08); // Enable bit low
    i2c_write((cmd << 4) | 0x08);   // Send low nibble
    i2c_write((cmd << 4) | 0x0C);   // Enable bit high
    i2c_write((cmd << 4) | 0x08);   // Enable bit low
    i2c_stop();
     4ac:	0c 94 1c 02 	jmp	0x438	; 0x438 <i2c_stop>

000004b0 <LCD_Init>:
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	80 e7       	ldi	r24, 0x70	; 112
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	21 50       	subi	r18, 0x01	; 1
     4b8:	80 40       	sbci	r24, 0x00	; 0
     4ba:	90 40       	sbci	r25, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <LCD_Init+0x6>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_Init+0x10>
     4c0:	00 00       	nop
}

void LCD_Init(void) {
    // Initialize LCD (Assuming 4-bit mode)
    _delay_ms(50); // Wait for more than 40ms after VCC rises to 4.5V
    LCD_SendCommand(0x03);
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
     4c8:	8f e1       	ldi	r24, 0x1F	; 31
     4ca:	9e e4       	ldi	r25, 0x4E	; 78
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_Init+0x1c>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCD_Init+0x22>
     4d2:	00 00       	nop
    _delay_ms(5);  // Wait for more than 4.1ms
    LCD_SendCommand(0x03);
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4da:	87 e5       	ldi	r24, 0x57	; 87
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_Init+0x2e>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <LCD_Init+0x34>
     4e4:	00 00       	nop
    _delay_us(150);
    LCD_SendCommand(0x03);
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
    LCD_SendCommand(0x02); // Set to 4-bit mode
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
    LCD_SendCommand(0x28); // Function set: 4-bit, 2 lines, 5x8 dots
     4f2:	88 e2       	ldi	r24, 0x28	; 40
     4f4:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, cursor OFF, blink OFF
     4f8:	8c e0       	ldi	r24, 0x0C	; 12
     4fa:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode set: increment automatically, no shift
     4fe:	86 e0       	ldi	r24, 0x06	; 6
     500:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     50a:	8f e3       	ldi	r24, 0x3F	; 63
     50c:	9f e1       	ldi	r25, 0x1F	; 31
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <LCD_Init+0x5e>
     512:	00 c0       	rjmp	.+0      	; 0x514 <LCD_Init+0x64>
     514:	00 00       	nop
    _delay_ms(2);  // Delay after clearing display
}
     516:	08 95       	ret

00000518 <LCD_SendData>:
    i2c_write((cmd << 4) | 0x0C);   // Enable bit high
    i2c_write((cmd << 4) | 0x08);   // Enable bit low
    i2c_stop();
}

void LCD_SendData(uint8_t data) {
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	c8 2f       	mov	r28, r24
    // Send data to the LCD
    i2c_start(LCD_ADDR<<1);
     520:	8e e4       	ldi	r24, 0x4E	; 78
     522:	0e 94 0b 02 	call	0x416	; 0x416 <i2c_start>
    i2c_write((data & 0xF0) | 0x09); // Send high nibble
     526:	1c 2f       	mov	r17, r28
     528:	10 7f       	andi	r17, 0xF0	; 240
     52a:	d1 2f       	mov	r29, r17
     52c:	d9 60       	ori	r29, 0x09	; 9
     52e:	8d 2f       	mov	r24, r29
     530:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((data & 0xF0) | 0x0D); // Enable bit high
     534:	81 2f       	mov	r24, r17
     536:	8d 60       	ori	r24, 0x0D	; 13
     538:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((data & 0xF0) | 0x09); // Enable bit low
     53c:	8d 2f       	mov	r24, r29
     53e:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((data << 4) | 0x09);   // Send low nibble
     542:	80 e1       	ldi	r24, 0x10	; 16
     544:	c8 9f       	mul	r28, r24
     546:	e0 01       	movw	r28, r0
     548:	11 24       	eor	r1, r1
     54a:	dc 2f       	mov	r29, r28
     54c:	d9 60       	ori	r29, 0x09	; 9
     54e:	8d 2f       	mov	r24, r29
     550:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((data << 4) | 0x0D);   // Enable bit high
     554:	8c 2f       	mov	r24, r28
     556:	8d 60       	ori	r24, 0x0D	; 13
     558:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_write((data << 4) | 0x09);   // Enable bit low
     55c:	8d 2f       	mov	r24, r29
     55e:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
    i2c_stop();
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
    i2c_write((data & 0xF0) | 0x0D); // Enable bit high
    i2c_write((data & 0xF0) | 0x09); // Enable bit low
    i2c_write((data << 4) | 0x09);   // Send low nibble
    i2c_write((data << 4) | 0x0D);   // Enable bit high
    i2c_write((data << 4) | 0x09);   // Enable bit low
    i2c_stop();
     568:	0c 94 1c 02 	jmp	0x438	; 0x438 <i2c_stop>

0000056c <LCD_Print>:
}

void LCD_Print(char *str) {
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
    while (*str) {
     572:	89 91       	ld	r24, Y+
     574:	81 11       	cpse	r24, r1
     576:	03 c0       	rjmp	.+6      	; 0x57e <LCD_Print+0x12>
        LCD_SendData(*str++);
    }
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret
    i2c_stop();
}

void LCD_Print(char *str) {
    while (*str) {
        LCD_SendData(*str++);
     57e:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_SendData>
     582:	f7 cf       	rjmp	.-18     	; 0x572 <LCD_Print+0x6>

00000584 <LCD_SetPosition>:
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
     584:	81 11       	cpse	r24, r1
     586:	04 c0       	rjmp	.+8      	; 0x590 <LCD_SetPosition+0xc>
     588:	80 e8       	ldi	r24, 0x80	; 128
     58a:	86 0f       	add	r24, r22
    LCD_SendCommand(pos);
     58c:	0c 94 2e 02 	jmp	0x45c	; 0x45c <LCD_SendCommand>
        LCD_SendData(*str++);
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
     590:	80 ec       	ldi	r24, 0xC0	; 192
     592:	fb cf       	rjmp	.-10     	; 0x58a <LCD_SetPosition+0x6>

00000594 <LCD_Clear>:
    LCD_SendCommand(pos);
}

void LCD_Clear(void) {
    LCD_SendCommand(0x01);  // Send clear display command
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
     59a:	8f e3       	ldi	r24, 0x3F	; 63
     59c:	9f e1       	ldi	r25, 0x1F	; 31
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <LCD_Clear+0xa>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <LCD_Clear+0x10>
     5a4:	00 00       	nop
    _delay_ms(2);           // Wait for the command to execute (it takes a bit of time)
}
     5a6:	08 95       	ret

000005a8 <LCD_ScrollText>:

// Scroll text on the specified row
void LCD_ScrollText(const char *str, uint8_t row, uint8_t scrollDist, uint8_t *index) {
     5a8:	8f 92       	push	r8
     5aa:	9f 92       	push	r9
     5ac:	af 92       	push	r10
     5ae:	bf 92       	push	r11
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	61 97       	sbiw	r28, 0x11	; 17
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	6c 01       	movw	r12, r24
     5d2:	86 2e       	mov	r8, r22
     5d4:	94 2e       	mov	r9, r20
     5d6:	79 01       	movw	r14, r18
    uint8_t len = strlen(str);
     5d8:	fc 01       	movw	r30, r24
     5da:	01 90       	ld	r0, Z+
     5dc:	00 20       	and	r0, r0
     5de:	e9 f7       	brne	.-6      	; 0x5da <LCD_ScrollText+0x32>
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	e8 1b       	sub	r30, r24
     5e4:	f9 0b       	sbc	r31, r25
    char buffer[MAX_LEN + 1];

    char *scrollText = malloc(len + MAX_LEN + 1);
     5e6:	8f 01       	movw	r16, r30
     5e8:	11 27       	eor	r17, r17
     5ea:	c8 01       	movw	r24, r16
     5ec:	41 96       	adiw	r24, 0x11	; 17
     5ee:	0e 94 0c 09 	call	0x1218	; 0x1218 <malloc>
     5f2:	5c 01       	movw	r10, r24
    if (scrollText == NULL) return;
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	e1 f1       	breq	.+120    	; 0x670 <LCD_ScrollText+0xc8>

    strcpy(scrollText, str);
     5f8:	b6 01       	movw	r22, r12
     5fa:	0e 94 49 0a 	call	0x1492	; 0x1492 <strcpy>
    strcat(scrollText, "                "); // Adding extra spaces for smooth scroll
     5fe:	6c e0       	ldi	r22, 0x0C	; 12
     600:	71 e0       	ldi	r23, 0x01	; 1
     602:	c5 01       	movw	r24, r10
     604:	0e 94 3e 0a 	call	0x147c	; 0x147c <strcat>

    // Copy the portion of the string to display
    strncpy(buffer, scrollText + *index, MAX_LEN);
     608:	f7 01       	movw	r30, r14
     60a:	60 81       	ld	r22, Z
     60c:	6a 0d       	add	r22, r10
     60e:	7b 2d       	mov	r23, r11
     610:	71 1d       	adc	r23, r1
     612:	40 e1       	ldi	r20, 0x10	; 16
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <strncpy>
    buffer[MAX_LEN] = '\0';  // Null-terminate
     61e:	19 8a       	std	Y+17, r1	; 0x11

    LCD_SetPosition(row, 0);  // Set the row position
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	88 2d       	mov	r24, r8
     624:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_SetPosition>
    LCD_Print(buffer);  // Print the current scroll position
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>

    // Increment the scroll index
    (*index)++;
     630:	f7 01       	movw	r30, r14
     632:	80 81       	ld	r24, Z
     634:	8f 5f       	subi	r24, 0xFF	; 255
    if (*index >= len + scrollDist) {
     636:	09 0d       	add	r16, r9
     638:	11 1d       	adc	r17, r1
     63a:	80 17       	cp	r24, r16
     63c:	11 06       	cpc	r1, r17
     63e:	b4 f4       	brge	.+44     	; 0x66c <LCD_ScrollText+0xc4>

    LCD_SetPosition(row, 0);  // Set the row position
    LCD_Print(buffer);  // Print the current scroll position

    // Increment the scroll index
    (*index)++;
     640:	80 83       	st	Z, r24
    if (*index >= len + scrollDist) {
        *index = 0;  // Reset the index once the entire text has scrolled
    }

    free(scrollText);  // Free the allocated memory
     642:	c5 01       	movw	r24, r10
}
     644:	61 96       	adiw	r28, 0x11	; 17
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	df 90       	pop	r13
     65e:	cf 90       	pop	r12
     660:	bf 90       	pop	r11
     662:	af 90       	pop	r10
     664:	9f 90       	pop	r9
     666:	8f 90       	pop	r8
    (*index)++;
    if (*index >= len + scrollDist) {
        *index = 0;  // Reset the index once the entire text has scrolled
    }

    free(scrollText);  // Free the allocated memory
     668:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <free>
    LCD_Print(buffer);  // Print the current scroll position

    // Increment the scroll index
    (*index)++;
    if (*index >= len + scrollDist) {
        *index = 0;  // Reset the index once the entire text has scrolled
     66c:	10 82       	st	Z, r1
     66e:	e9 cf       	rjmp	.-46     	; 0x642 <LCD_ScrollText+0x9a>
    }

    free(scrollText);  // Free the allocated memory
}
     670:	61 96       	adiw	r28, 0x11	; 17
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	08 95       	ret

00000696 <storeCard>:

void storeCard(uint8_t *serial) {
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	8c 01       	movw	r16, r24
    uint8_t userNum = eeprom_read_byte(&userCount);
     69e:	84 e6       	ldi	r24, 0x64	; 100
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_read_byte>
     6a6:	c8 2f       	mov	r28, r24
    eeprom_write_block(serial, storedIDs[userNum], 5);
     6a8:	85 e0       	ldi	r24, 0x05	; 5
     6aa:	c8 9f       	mul	r28, r24
     6ac:	b0 01       	movw	r22, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	60 50       	subi	r22, 0x00	; 0
     6b2:	70 40       	sbci	r23, 0x00	; 0
     6b4:	45 e0       	ldi	r20, 0x05	; 5
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	c8 01       	movw	r24, r16
     6ba:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <eeprom_write_block>
    eeprom_write_byte(&userCount, userNum + 1);
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	6c 0f       	add	r22, r28
     6c2:	84 e6       	ldi	r24, 0x64	; 100
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <eeprom_write_byte>
    free(scrollText);  // Free the allocated memory
}

void storeCard(uint8_t *serial) {
    uint8_t userNum = eeprom_read_byte(&userCount);
    eeprom_write_block(serial, storedIDs[userNum], 5);
     6ca:	ec 2f       	mov	r30, r28
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
    eeprom_write_byte(&userCount, userNum + 1);
    votedUsers[userNum] = 0;  // Mark as not voted in RAM
     6ce:	ea 56       	subi	r30, 0x6A	; 106
     6d0:	fd 4f       	sbci	r31, 0xFD	; 253
     6d2:	10 82       	st	Z, r1
}
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <getUserIndex>:

uint8_t getUserIndex(uint8_t *serial) {
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <getUserIndex+0x12>
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <getUserIndex+0x14>
     6f0:	1f 92       	push	r1
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	6c 01       	movw	r12, r24
    uint8_t userNum = eeprom_read_byte(&userCount);
     6f8:	84 e6       	ldi	r24, 0x64	; 100
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_read_byte>
     700:	08 2f       	mov	r16, r24
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	e8 2e       	mov	r14, r24
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	f8 2e       	mov	r15, r24
    uint8_t storedSerial[5];
    for (uint8_t i = 0; i < userNum; i++) {
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	10 13       	cpse	r17, r16
     70e:	10 c0       	rjmp	.+32     	; 0x730 <getUserIndex+0x54>
        eeprom_read_block(storedSerial, storedIDs[i], 5);
        if (memcmp(serial, storedSerial, 5) == 0) {
            return i;  // Return the index if user is found
        }
    }
    return 255;  // Return 255 if user is not found (invalid)
     710:	1f ef       	ldi	r17, 0xFF	; 255
}
     712:	81 2f       	mov	r24, r17
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

uint8_t getUserIndex(uint8_t *serial) {
    uint8_t userNum = eeprom_read_byte(&userCount);
    uint8_t storedSerial[5];
    for (uint8_t i = 0; i < userNum; i++) {
        eeprom_read_block(storedSerial, storedIDs[i], 5);
     730:	45 e0       	ldi	r20, 0x05	; 5
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	b7 01       	movw	r22, r14
     736:	ce 01       	movw	r24, r28
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <eeprom_read_block>
        if (memcmp(serial, storedSerial, 5) == 0) {
     73e:	45 e0       	ldi	r20, 0x05	; 5
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	be 01       	movw	r22, r28
     744:	6f 5f       	subi	r22, 0xFF	; 255
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	c6 01       	movw	r24, r12
     74a:	0e 94 31 0a 	call	0x1462	; 0x1462 <memcmp>
     74e:	25 e0       	ldi	r18, 0x05	; 5
     750:	e2 0e       	add	r14, r18
     752:	f1 1c       	adc	r15, r1
     754:	89 2b       	or	r24, r25
     756:	e9 f2       	breq	.-70     	; 0x712 <getUserIndex+0x36>
}

uint8_t getUserIndex(uint8_t *serial) {
    uint8_t userNum = eeprom_read_byte(&userCount);
    uint8_t storedSerial[5];
    for (uint8_t i = 0; i < userNum; i++) {
     758:	1f 5f       	subi	r17, 0xFF	; 255
     75a:	d8 cf       	rjmp	.-80     	; 0x70c <getUserIndex+0x30>

0000075c <isRegistered>:
        }
    }
    return 255;  // Return 255 if user is not found (invalid)
}

uint8_t isRegistered(uint8_t *serial) {
     75c:	af 92       	push	r10
     75e:	bf 92       	push	r11
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	00 d0       	rcall	.+0      	; 0x772 <isRegistered+0x16>
     772:	00 d0       	rcall	.+0      	; 0x774 <isRegistered+0x18>
     774:	1f 92       	push	r1
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	5c 01       	movw	r10, r24
    uint8_t userNum = eeprom_read_byte(&userCount);
     77c:	84 e6       	ldi	r24, 0x64	; 100
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_read_byte>
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	c9 2e       	mov	r12, r25
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	d9 2e       	mov	r13, r25
    uint8_t storedSerial[5];
    for (int i = 0; i < userNum; i++) {
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	e8 2e       	mov	r14, r24
     792:	f1 2c       	mov	r15, r1
     794:	0e 15       	cp	r16, r14
     796:	1f 05       	cpc	r17, r15
     798:	8c f0       	brlt	.+34     	; 0x7bc <isRegistered+0x60>
        eeprom_read_block(storedSerial, storedIDs[i], 5);
        if (memcmp(serial, storedSerial, 5) == 0) {
            return 1;
        }
    }
    return 0;
     79a:	80 e0       	ldi	r24, 0x00	; 0
}
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	08 95       	ret

uint8_t isRegistered(uint8_t *serial) {
    uint8_t userNum = eeprom_read_byte(&userCount);
    uint8_t storedSerial[5];
    for (int i = 0; i < userNum; i++) {
        eeprom_read_block(storedSerial, storedIDs[i], 5);
     7bc:	45 e0       	ldi	r20, 0x05	; 5
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	b6 01       	movw	r22, r12
     7c2:	ce 01       	movw	r24, r28
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <eeprom_read_block>
        if (memcmp(serial, storedSerial, 5) == 0) {
     7ca:	45 e0       	ldi	r20, 0x05	; 5
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	be 01       	movw	r22, r28
     7d0:	6f 5f       	subi	r22, 0xFF	; 255
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	c5 01       	movw	r24, r10
     7d6:	0e 94 31 0a 	call	0x1462	; 0x1462 <memcmp>
     7da:	25 e0       	ldi	r18, 0x05	; 5
     7dc:	c2 0e       	add	r12, r18
     7de:	d1 1c       	adc	r13, r1
     7e0:	89 2b       	or	r24, r25
     7e2:	19 f0       	breq	.+6      	; 0x7ea <isRegistered+0x8e>
}

uint8_t isRegistered(uint8_t *serial) {
    uint8_t userNum = eeprom_read_byte(&userCount);
    uint8_t storedSerial[5];
    for (int i = 0; i < userNum; i++) {
     7e4:	0f 5f       	subi	r16, 0xFF	; 255
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	d5 cf       	rjmp	.-86     	; 0x794 <isRegistered+0x38>
        eeprom_read_block(storedSerial, storedIDs[i], 5);
        if (memcmp(serial, storedSerial, 5) == 0) {
            return 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	d7 cf       	rjmp	.-82     	; 0x79c <isRegistered+0x40>

000007ee <checkAdmin>:
    }
    return 0;
}

uint8_t checkAdmin(uint8_t *serial) {
    return memcmp(serial, adminID, 5) == 0;
     7ee:	45 e0       	ldi	r20, 0x05	; 5
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	0e 94 31 0a 	call	0x1462	; 0x1462 <memcmp>
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	89 2b       	or	r24, r25
     7fe:	09 f0       	breq	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	20 e0       	ldi	r18, 0x00	; 0
}
     802:	82 2f       	mov	r24, r18
     804:	08 95       	ret

00000806 <isButtonPressed>:
int8_t isButtonPressed(uint8_t button_pin, uint8_t port) {
    static uint8_t previousState = 1;  // Keeps track of the previous button state (unpressed)
    uint8_t currentState;

    // Check if the button is connected to PORTB or PORTC
    if (port == 'B') {
     806:	62 34       	cpi	r22, 0x42	; 66
     808:	c9 f4       	brne	.+50     	; 0x83c <isButtonPressed+0x36>
        currentState = (PINB & (1 << button_pin)) ? 1 : 0;  // For buttons on PORTB
     80a:	23 b1       	in	r18, 0x03	; 3
    } else if (port == 'C') {
        currentState = (PINC & (1 << button_pin)) ? 1 : 0;  // For buttons on PORTC
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	02 c0       	rjmp	.+4      	; 0x814 <isButtonPressed+0xe>
     810:	35 95       	asr	r19
     812:	27 95       	ror	r18
     814:	8a 95       	dec	r24
     816:	e2 f7       	brpl	.-8      	; 0x810 <isButtonPressed+0xa>
     818:	92 2f       	mov	r25, r18
     81a:	91 70       	andi	r25, 0x01	; 1
    }

    // Detect a falling edge (button press)
    if (previousState == 1 && currentState == 0) {
     81c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	81 f4       	brne	.+32     	; 0x844 <isButtonPressed+0x3e>
     824:	91 11       	cpse	r25, r1
     826:	10 c0       	rjmp	.+32     	; 0x848 <isButtonPressed+0x42>
     828:	8f e3       	ldi	r24, 0x3F	; 63
     82a:	9c e9       	ldi	r25, 0x9C	; 156
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <isButtonPressed+0x26>
     830:	00 c0       	rjmp	.+0      	; 0x832 <isButtonPressed+0x2c>
     832:	00 00       	nop
        _delay_ms(10);  // Debouncing delay
        if (currentState == 0) {  // Check if the button is still pressed
            previousState = 0;  // Update previous state to pressed
     834:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
            return 1;  // Button was pressed
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	08 95       	ret
    uint8_t currentState;

    // Check if the button is connected to PORTB or PORTC
    if (port == 'B') {
        currentState = (PINB & (1 << button_pin)) ? 1 : 0;  // For buttons on PORTB
    } else if (port == 'C') {
     83c:	63 34       	cpi	r22, 0x43	; 67
     83e:	71 f7       	brne	.-36     	; 0x81c <isButtonPressed+0x16>
        currentState = (PINC & (1 << button_pin)) ? 1 : 0;  // For buttons on PORTC
     840:	26 b1       	in	r18, 0x06	; 6
     842:	e4 cf       	rjmp	.-56     	; 0x80c <isButtonPressed+0x6>
        _delay_ms(10);  // Debouncing delay
        if (currentState == 0) {  // Check if the button is still pressed
            previousState = 0;  // Update previous state to pressed
            return 1;  // Button was pressed
        }
    } else if (currentState == 1) {
     844:	91 30       	cpi	r25, 0x01	; 1
     846:	19 f4       	brne	.+6      	; 0x84e <isButtonPressed+0x48>
        previousState = 1;  // Button is unpressed
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }

    return 0;  // Button is not pressed
     84e:	80 e0       	ldi	r24, 0x00	; 0
}
     850:	08 95       	ret

00000852 <resetEEPROM>:

void resetEEPROM(void) {
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	00 d0       	rcall	.+0      	; 0x862 <resetEEPROM+0x10>
     862:	00 d0       	rcall	.+0      	; 0x864 <resetEEPROM+0x12>
     864:	1f 92       	push	r1
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
    // Reset the user count to 0
    eeprom_write_byte(&userCount, 0);
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	84 e6       	ldi	r24, 0x64	; 100
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <eeprom_write_byte>
     874:	8f e3       	ldi	r24, 0x3F	; 63
     876:	9c e9       	ldi	r25, 0x9C	; 156
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <resetEEPROM+0x26>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <resetEEPROM+0x2c>
     87e:	00 00       	nop
     880:	00 e0       	ldi	r16, 0x00	; 0
     882:	10 e0       	ldi	r17, 0x00	; 0
    _delay_ms(10); // Wait for EEPROM write to complete

    // Clear all stored IDs in EEPROM
    for (int i = 0; i < 20; i++) {
        uint8_t emptyID[5] = {0, 0, 0, 0, 0};
     884:	85 e0       	ldi	r24, 0x05	; 5
     886:	d8 2e       	mov	r13, r24
     888:	fe 01       	movw	r30, r28
     88a:	31 96       	adiw	r30, 0x01	; 1
     88c:	7f 01       	movw	r14, r30
     88e:	f7 01       	movw	r30, r14
     890:	8d 2d       	mov	r24, r13
     892:	11 92       	st	Z+, r1
     894:	8a 95       	dec	r24
     896:	e9 f7       	brne	.-6      	; 0x892 <resetEEPROM+0x40>
        eeprom_write_block(emptyID, storedIDs[i], 5);
     898:	45 e0       	ldi	r20, 0x05	; 5
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	b8 01       	movw	r22, r16
     89e:	c7 01       	movw	r24, r14
     8a0:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <eeprom_write_block>
     8a4:	ef e3       	ldi	r30, 0x3F	; 63
     8a6:	fc e9       	ldi	r31, 0x9C	; 156
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <resetEEPROM+0x56>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <resetEEPROM+0x5c>
     8ae:	00 00       	nop
     8b0:	0b 5f       	subi	r16, 0xFB	; 251
     8b2:	1f 4f       	sbci	r17, 0xFF	; 255
    // Reset the user count to 0
    eeprom_write_byte(&userCount, 0);
    _delay_ms(10); // Wait for EEPROM write to complete

    // Clear all stored IDs in EEPROM
    for (int i = 0; i < 20; i++) {
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	04 36       	cpi	r16, 0x64	; 100
     8b8:	1f 07       	cpc	r17, r31
     8ba:	49 f7       	brne	.-46     	; 0x88e <resetEEPROM+0x3c>
        uint8_t emptyID[5] = {0, 0, 0, 0, 0};
        eeprom_write_block(emptyID, storedIDs[i], 5);
        _delay_ms(10); // Wait for EEPROM write to complete
    }
    // Reset vote counts
    voteA = 0;
     8bc:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <voteA>
    voteB = 0;
     8c0:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <voteB>
    voteC = 0;
     8c4:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <voteC>
    voteD = 0;
     8c8:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <__data_end>
     8cc:	e6 e9       	ldi	r30, 0x96	; 150
     8ce:	f2 e0       	ldi	r31, 0x02	; 2

    // Optionally reset the votedUsers array (if stored in EEPROM)
    for (int i = 0; i < 20; i++) {
        votedUsers[i] = 0;  // Reset in RAM
     8d0:	11 92       	st	Z+, r1
     8d2:	8f e3       	ldi	r24, 0x3F	; 63
     8d4:	9c e9       	ldi	r25, 0x9C	; 156
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <resetEEPROM+0x84>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <resetEEPROM+0x8a>
     8dc:	00 00       	nop
    voteB = 0;
    voteC = 0;
    voteD = 0;

    // Optionally reset the votedUsers array (if stored in EEPROM)
    for (int i = 0; i < 20; i++) {
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	ea 3a       	cpi	r30, 0xAA	; 170
     8e2:	f9 07       	cpc	r31, r25
     8e4:	a9 f7       	brne	.-22     	; 0x8d0 <resetEEPROM+0x7e>
        votedUsers[i] = 0;  // Reset in RAM
        // If you store votedUsers in EEPROM, add EEPROM persistence here:
        // eeprom_write_byte(&votedUsers[i], 0);
        _delay_ms(10); // Wait for EEPROM write to complete
    }
}
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	08 95       	ret

00000900 <main>:
void i2c_stop(void);
void i2c_write(uint8_t data);
int8_t isButtonPressed(uint8_t button_pin, uint8_t port);
void resetEEPROM(void);  // Function for EEPROM reset

int main(void) {
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	c7 54       	subi	r28, 0x47	; 71
     90a:	d1 09       	sbc	r29, r1
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
        uint8_t serial[5];
	uint8_t status;
    	uint8_t str[MAX_LEN];
    	uint8_t scrollIndex = 0;  // Keeps track of the scroll position
     916:	27 96       	adiw	r28, 0x07	; 7
     918:	1f ae       	std	Y+63, r1	; 0x3f
     91a:	27 97       	sbiw	r28, 0x07	; 7

    	initSPI();
     91c:	0e 94 6e 00 	call	0xdc	; 0xdc <initSPI>
    	initLEDs_Buzzer(); // Initialize both LEDs	
     920:	0e 94 dd 01 	call	0x3ba	; 0x3ba <initLEDs_Buzzer>
    	MFRC522_init();
     924:	0e 94 c0 00 	call	0x180	; 0x180 <MFRC522_init>
    	i2c_init();  // Initialize I2C communication for LCD:
     928:	0e 94 05 02 	call	0x40a	; 0x40a <i2c_init>
    	LCD_Init();
     92c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LCD_Init>
    	initButton(); 
     930:	0e 94 61 00 	call	0xc2	; 0xc2 <initButton>
        blinkLED_Buzzer(LED_PIN_Vote);
     934:	85 e0       	ldi	r24, 0x05	; 5
     936:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
                            while (resultDisplayTime > 0) {
                                // Display the total votes for 1 second
                                LCD_Clear();
                                LCD_SetPosition(0, 0);
                                char resultMsg1[MAX_LEN];
                                snprintf(resultMsg1, MAX_LEN, "  A:%d      B:%d", voteA, voteB);
     93a:	50 e1       	ldi	r21, 0x10	; 16
     93c:	75 2e       	mov	r7, r21
     93e:	8e 01       	movw	r16, r28
     940:	0f 5c       	subi	r16, 0xCF	; 207
     942:	1f 4f       	sbci	r17, 0xFF	; 255
                                LCD_Print(resultMsg1);
                                LCD_SetPosition(1, 0);
                                char resultMsg2[MAX_LEN];
                                snprintf(resultMsg2, MAX_LEN, "  C:%d      D:%d", voteC, voteD);
     944:	7e 01       	movw	r14, r28
     946:	21 e2       	ldi	r18, 0x21	; 33
     948:	e2 0e       	add	r14, r18
     94a:	f1 1c       	adc	r15, r1

                                // Display the registered and voted count for 1 second
                                LCD_Clear();
                                LCD_SetPosition(0, 0);
                                char regMsg[MAX_LEN];
                                snprintf(regMsg, MAX_LEN, "Registered :%d", eeprom_read_byte(&userCount));
     94c:	68 eb       	ldi	r22, 0xB8	; 184
     94e:	26 2e       	mov	r2, r22
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	36 2e       	mov	r3, r22
     954:	6e 01       	movw	r12, r28
     956:	31 e1       	ldi	r19, 0x11	; 17
     958:	c3 0e       	add	r12, r19
     95a:	d1 1c       	adc	r13, r1
                                LCD_Print(regMsg);
                                LCD_SetPosition(1, 0);
                                char votedMsg[MAX_LEN];
                                snprintf(votedMsg, MAX_LEN, "Voted :%d", totalVoted);
     95c:	77 ec       	ldi	r23, 0xC7	; 199
     95e:	47 2e       	mov	r4, r23
     960:	71 e0       	ldi	r23, 0x01	; 1
     962:	57 2e       	mov	r5, r23
     964:	ce 01       	movw	r24, r28
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	5c 01       	movw	r10, r24
        blinkLED_Buzzer(LED_PIN_Vote);
	// Main loop: Scrolling display until register is pressed
initial_state:
    while (1) {
        // Non-blocking scrolling for first line
        LCD_ScrollText("Electronic Voting Machine", 0, 1, &scrollIndex);  // First line scrolls
     96a:	9e 01       	movw	r18, r28
     96c:	2a 5b       	subi	r18, 0xBA	; 186
     96e:	3f 4f       	sbci	r19, 0xFF	; 255
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	8d e1       	ldi	r24, 0x1D	; 29
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LCD_ScrollText>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     97c:	80 ec       	ldi	r24, 0xC0	; 192
     97e:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
initial_state:
    while (1) {
        // Non-blocking scrolling for first line
        LCD_ScrollText("Electronic Voting Machine", 0, 1, &scrollIndex);  // First line scrolls
        LCD_SetPosition(1, 0);  // Fixed message on second line
        LCD_Print("Press register");
     982:	87 e3       	ldi	r24, 0x37	; 55
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
        
        // Check for reset button press
        if (isButtonPressed(Button_PIN_Reset, 'B')) {
     98a:	62 e4       	ldi	r22, 0x42	; 66
     98c:	87 e0       	ldi	r24, 0x07	; 7
     98e:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     992:	88 23       	and	r24, r24
     994:	09 f4       	brne	.+2      	; 0x998 <main+0x98>
     996:	5f c0       	rjmp	.+190    	; 0xa56 <main+0x156>
     998:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
            blinkLED_Buzzer(LED_PIN_RR);
            LCD_Clear();
     99c:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
        // Check for reset button press
        if (isButtonPressed(Button_PIN_Reset, 'B')) {
            blinkLED_Buzzer(LED_PIN_RR);
            LCD_Clear();
            LCD_SetPosition(0, 0);
            LCD_Print("Tap Admin ID");
     9a6:	86 e4       	ldi	r24, 0x46	; 70
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     9ae:	44 e6       	ldi	r20, 0x64	; 100
     9b0:	84 2e       	mov	r8, r20
     9b2:	91 2c       	mov	r9, r1
            // Set up a timer for 1 seconds
            uint16_t timeout = 1000 / 10;  // 2000ms, with _delay_ms(10)

            while (timeout > 0) {
                // Actively scan for RFID card
                status = MFRC522_request(0x26, serial);  // Request RFID card scan
     9b4:	be 01       	movw	r22, r28
     9b6:	6f 5b       	subi	r22, 0xBF	; 191
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	86 e2       	ldi	r24, 0x26	; 38
     9bc:	0e 94 81 01 	call	0x302	; 0x302 <MFRC522_request>
                if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
     9c0:	81 11       	cpse	r24, r1
     9c2:	8d c1       	rjmp	.+794    	; 0xcde <main+0x3de>
     9c4:	ce 01       	movw	r24, r28
     9c6:	8f 5b       	subi	r24, 0xBF	; 191
     9c8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ca:	0e 94 a9 01 	call	0x352	; 0x352 <MFRC522_anticoll>
     9ce:	81 11       	cpse	r24, r1
     9d0:	86 c1       	rjmp	.+780    	; 0xcde <main+0x3de>
                    if (checkAdmin(serial)) {
     9d2:	ce 01       	movw	r24, r28
     9d4:	8f 5b       	subi	r24, 0xBF	; 191
     9d6:	9f 4f       	sbci	r25, 0xFF	; 255
     9d8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <checkAdmin>
     9dc:	88 23       	and	r24, r24
     9de:	09 f4       	brne	.+2      	; 0x9e2 <main+0xe2>
     9e0:	6b c1       	rjmp	.+726    	; 0xcb8 <main+0x3b8>
                        // Admin verified, reset EEPROM
                        LCD_Clear();
     9e2:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     9e6:	80 e8       	ldi	r24, 0x80	; 128
     9e8:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
                    if (checkAdmin(serial)) {
                        // Admin verified, reset EEPROM
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Admin Verified");
     9ec:	83 e5       	ldi	r24, 0x53	; 83
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     9f4:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
     9f8:	9f ef       	ldi	r25, 0xFF	; 255
     9fa:	e0 e7       	ldi	r30, 0x70	; 112
     9fc:	f2 e0       	ldi	r31, 0x02	; 2
     9fe:	91 50       	subi	r25, 0x01	; 1
     a00:	e0 40       	sbci	r30, 0x00	; 0
     a02:	f0 40       	sbci	r31, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <main+0xfe>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <main+0x108>
     a08:	00 00       	nop
                        blinkLED_Buzzer(LED_PIN_RR);
                        _delay_ms(50);
                        
                        LCD_Clear();
     a0a:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     a0e:	80 e8       	ldi	r24, 0x80	; 128
     a10:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        blinkLED_Buzzer(LED_PIN_RR);
                        _delay_ms(50);
                        
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Please wait");
     a14:	82 e6       	ldi	r24, 0x62	; 98
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                        resetEEPROM();  // Clear EEPROM after Admin verification
     a1c:	0e 94 29 04 	call	0x852	; 0x852 <resetEEPROM>
                        LCD_Clear();
     a20:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     a24:	80 e8       	ldi	r24, 0x80	; 128
     a26:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        LCD_SetPosition(0, 0);
                        LCD_Print("Please wait");
                        resetEEPROM();  // Clear EEPROM after Admin verification
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("System Reseted");
     a2a:	8e e6       	ldi	r24, 0x6E	; 110
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     a32:	80 ec       	ldi	r24, 0xC0	; 192
     a34:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        resetEEPROM();  // Clear EEPROM after Admin verification
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("System Reseted");
                        LCD_SetPosition(1, 0);
                        LCD_Print("Successfully");
     a38:	8d e7       	ldi	r24, 0x7D	; 125
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     a40:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
     a44:	2f ef       	ldi	r18, 0xFF	; 255
     a46:	30 e7       	ldi	r19, 0x70	; 112
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	21 50       	subi	r18, 0x01	; 1
     a4c:	30 40       	sbci	r19, 0x00	; 0
     a4e:	80 40       	sbci	r24, 0x00	; 0
     a50:	e1 f7       	brne	.-8      	; 0xa4a <main+0x14a>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <main+0x154>
     a54:	00 00       	nop
                timeout--;
            }
        }
        
        // Check for result button press
        if (isButtonPressed(Button_PIN_Result, 'B')) {
     a56:	62 e4       	ldi	r22, 0x42	; 66
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     a5e:	88 23       	and	r24, r24
     a60:	09 f4       	brne	.+2      	; 0xa64 <main+0x164>
     a62:	ab c0       	rjmp	.+342    	; 0xbba <main+0x2ba>
            uint8_t totalVoted = voteA + voteB + voteC + voteD;
     a64:	60 90 95 02 	lds	r6, 0x0295	; 0x800295 <voteA>
     a68:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <voteB>
     a6c:	68 0e       	add	r6, r24
     a6e:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <voteC>
     a72:	68 0e       	add	r6, r24
     a74:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     a78:	68 0e       	add	r6, r24
            if (totalVoted > 0) {
     a7a:	09 f4       	brne	.+2      	; 0xa7e <main+0x17e>
     a7c:	5a c1       	rjmp	.+692    	; 0xd32 <main+0x432>
     a7e:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
                // Admin authentication for displaying result
                blinkLED_Buzzer(LED_PIN_RR);
                LCD_Clear();
     a82:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     a86:	80 e8       	ldi	r24, 0x80	; 128
     a88:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
            if (totalVoted > 0) {
                // Admin authentication for displaying result
                blinkLED_Buzzer(LED_PIN_RR);
                LCD_Clear();
                LCD_SetPosition(0, 0);
                LCD_Print("Tap Admin ID");
     a8c:	86 e4       	ldi	r24, 0x46	; 70
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     a94:	32 e3       	ldi	r19, 0x32	; 50
     a96:	83 2e       	mov	r8, r19
     a98:	91 2c       	mov	r9, r1
                // Wait for admin authentication with timeout (0.5 second)
                uint16_t timeout = 500 / 10;  // 1000ms, with _delay_ms(10)
                uint8_t adminVerified = 0;

                while (timeout > 0) {
                    status = MFRC522_request(0x26, serial);  // Request RFID card scan
     a9a:	be 01       	movw	r22, r28
     a9c:	6f 5b       	subi	r22, 0xBF	; 191
     a9e:	7f 4f       	sbci	r23, 0xFF	; 255
     aa0:	86 e2       	ldi	r24, 0x26	; 38
     aa2:	0e 94 81 01 	call	0x302	; 0x302 <MFRC522_request>
                    if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
     aa6:	81 11       	cpse	r24, r1
     aa8:	26 c1       	rjmp	.+588    	; 0xcf6 <main+0x3f6>
     aaa:	ce 01       	movw	r24, r28
     aac:	8f 5b       	subi	r24, 0xBF	; 191
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	0e 94 a9 01 	call	0x352	; 0x352 <MFRC522_anticoll>
     ab4:	81 11       	cpse	r24, r1
     ab6:	1f c1       	rjmp	.+574    	; 0xcf6 <main+0x3f6>
                        if (checkAdmin(serial)) {
     ab8:	ce 01       	movw	r24, r28
     aba:	8f 5b       	subi	r24, 0xBF	; 191
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	0e 94 f7 03 	call	0x7ee	; 0x7ee <checkAdmin>
     ac2:	88 23       	and	r24, r24
     ac4:	09 f4       	brne	.+2      	; 0xac8 <main+0x1c8>
     ac6:	17 c1       	rjmp	.+558    	; 0xcf6 <main+0x3f6>
     ac8:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
     acc:	23 e0       	ldi	r18, 0x03	; 3
     ace:	82 2e       	mov	r8, r18
     ad0:	91 2c       	mov	r9, r1

                            // Show the result for 6 seconds (3 alternations of 2 seconds)
                            uint16_t resultDisplayTime = 6000 / 1000; // 6 seconds in 1-second increments
                            while (resultDisplayTime > 0) {
                                // Display the total votes for 1 second
                                LCD_Clear();
     ad2:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     ad6:	80 e8       	ldi	r24, 0x80	; 128
     ad8:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                            while (resultDisplayTime > 0) {
                                // Display the total votes for 1 second
                                LCD_Clear();
                                LCD_SetPosition(0, 0);
                                char resultMsg1[MAX_LEN];
                                snprintf(resultMsg1, MAX_LEN, "  A:%d      B:%d", voteA, voteB);
     adc:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <voteB>
     ae0:	1f 92       	push	r1
     ae2:	8f 93       	push	r24
     ae4:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <voteA>
     ae8:	1f 92       	push	r1
     aea:	8f 93       	push	r24
     aec:	e6 e9       	ldi	r30, 0x96	; 150
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	ff 93       	push	r31
     af2:	ef 93       	push	r30
     af4:	1f 92       	push	r1
     af6:	7f 92       	push	r7
     af8:	1f 93       	push	r17
     afa:	0f 93       	push	r16
     afc:	0e 94 5f 0a 	call	0x14be	; 0x14be <snprintf>
                                LCD_Print(resultMsg1);
     b00:	c8 01       	movw	r24, r16
     b02:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     b06:	80 ec       	ldi	r24, 0xC0	; 192
     b08:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                char resultMsg1[MAX_LEN];
                                snprintf(resultMsg1, MAX_LEN, "  A:%d      B:%d", voteA, voteB);
                                LCD_Print(resultMsg1);
                                LCD_SetPosition(1, 0);
                                char resultMsg2[MAX_LEN];
                                snprintf(resultMsg2, MAX_LEN, "  C:%d      D:%d", voteC, voteD);
     b0c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     b10:	1f 92       	push	r1
     b12:	8f 93       	push	r24
     b14:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <voteC>
     b18:	1f 92       	push	r1
     b1a:	8f 93       	push	r24
     b1c:	87 ea       	ldi	r24, 0xA7	; 167
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	1f 92       	push	r1
     b26:	7f 92       	push	r7
     b28:	ff 92       	push	r15
     b2a:	ef 92       	push	r14
     b2c:	0e 94 5f 0a 	call	0x14be	; 0x14be <snprintf>
                                LCD_Print(resultMsg2);
     b30:	c7 01       	movw	r24, r14
     b32:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     b36:	ff ef       	ldi	r31, 0xFF	; 255
     b38:	23 ed       	ldi	r18, 0xD3	; 211
     b3a:	30 e3       	ldi	r19, 0x30	; 48
     b3c:	f1 50       	subi	r31, 0x01	; 1
     b3e:	20 40       	sbci	r18, 0x00	; 0
     b40:	30 40       	sbci	r19, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <main+0x23c>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <main+0x246>
     b46:	00 00       	nop
                                _delay_ms(1000);

                                // Display the registered and voted count for 1 second
                                LCD_Clear();
     b48:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     b4c:	80 e8       	ldi	r24, 0x80	; 128
     b4e:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>

                                // Display the registered and voted count for 1 second
                                LCD_Clear();
                                LCD_SetPosition(0, 0);
                                char regMsg[MAX_LEN];
                                snprintf(regMsg, MAX_LEN, "Registered :%d", eeprom_read_byte(&userCount));
     b52:	84 e6       	ldi	r24, 0x64	; 100
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_read_byte>
     b5a:	1f 92       	push	r1
     b5c:	8f 93       	push	r24
     b5e:	3f 92       	push	r3
     b60:	2f 92       	push	r2
     b62:	1f 92       	push	r1
     b64:	7f 92       	push	r7
     b66:	df 92       	push	r13
     b68:	cf 92       	push	r12
     b6a:	0e 94 5f 0a 	call	0x14be	; 0x14be <snprintf>
                                LCD_Print(regMsg);
     b6e:	c6 01       	movw	r24, r12
     b70:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     b74:	80 ec       	ldi	r24, 0xC0	; 192
     b76:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                char regMsg[MAX_LEN];
                                snprintf(regMsg, MAX_LEN, "Registered :%d", eeprom_read_byte(&userCount));
                                LCD_Print(regMsg);
                                LCD_SetPosition(1, 0);
                                char votedMsg[MAX_LEN];
                                snprintf(votedMsg, MAX_LEN, "Voted :%d", totalVoted);
     b7a:	1f 92       	push	r1
     b7c:	6f 92       	push	r6
     b7e:	5f 92       	push	r5
     b80:	4f 92       	push	r4
     b82:	1f 92       	push	r1
     b84:	7f 92       	push	r7
     b86:	bf 92       	push	r11
     b88:	af 92       	push	r10
     b8a:	0e 94 5f 0a 	call	0x14be	; 0x14be <snprintf>
                                LCD_Print(votedMsg);
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	c5 01       	movw	r24, r10
     b9a:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	e3 ed       	ldi	r30, 0xD3	; 211
     ba2:	f0 e3       	ldi	r31, 0x30	; 48
     ba4:	91 50       	subi	r25, 0x01	; 1
     ba6:	e0 40       	sbci	r30, 0x00	; 0
     ba8:	f0 40       	sbci	r31, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <main+0x2a4>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <main+0x2ae>
     bae:	00 00       	nop
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	82 1a       	sub	r8, r18
     bb4:	91 08       	sbc	r9, r1
                            // Admin authenticated, display result
                            blinkLED_Buzzer(LED_PIN_RR);

                            // Show the result for 6 seconds (3 alternations of 2 seconds)
                            uint16_t resultDisplayTime = 6000 / 1000; // 6 seconds in 1-second increments
                            while (resultDisplayTime > 0) {
     bb6:	09 f0       	breq	.+2      	; 0xbba <main+0x2ba>
     bb8:	8c cf       	rjmp	.-232    	; 0xad2 <main+0x1d2>
                _delay_ms(100); // Display "No results" message for 2 seconds
            }
        }
        
        // Check for register button press frequently for quick response
        if (isButtonPressed(Button_PIN_Reg, 'B')) {
     bba:	62 e4       	ldi	r22, 0x42	; 66
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     bc2:	88 23       	and	r24, r24
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <main+0x2c8>
     bc6:	4e c0       	rjmp	.+156    	; 0xc64 <main+0x364>
            blinkLED_Buzzer(LED_PIN_Reg);
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
            LCD_Clear();  // Clear the screen when registration button is pressed
     bce:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     bd2:	80 e8       	ldi	r24, 0x80	; 128
     bd4:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
        if (isButtonPressed(Button_PIN_Reg, 'B')) {
            blinkLED_Buzzer(LED_PIN_Reg);
            LCD_Clear();  // Clear the screen when registration button is pressed
            // Enter registration mode when register button is pressed
            LCD_SetPosition(0, 0);
            LCD_Print("Tap Admin RFID");
     bd8:	87 ee       	ldi	r24, 0xE7	; 231
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
            

            while (1) {
                status = MFRC522_request(0x26, serial);  // Request IDLE cards
     be0:	be 01       	movw	r22, r28
     be2:	6f 5b       	subi	r22, 0xBF	; 191
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	86 e2       	ldi	r24, 0x26	; 38
     be8:	0e 94 81 01 	call	0x302	; 0x302 <MFRC522_request>
                if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
     bec:	81 11       	cpse	r24, r1
     bee:	f8 cf       	rjmp	.-16     	; 0xbe0 <main+0x2e0>
     bf0:	ce 01       	movw	r24, r28
     bf2:	8f 5b       	subi	r24, 0xBF	; 191
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	0e 94 a9 01 	call	0x352	; 0x352 <MFRC522_anticoll>
     bfa:	81 11       	cpse	r24, r1
     bfc:	f1 cf       	rjmp	.-30     	; 0xbe0 <main+0x2e0>
                    if (checkAdmin(serial)) {
     bfe:	ce 01       	movw	r24, r28
     c00:	8f 5b       	subi	r24, 0xBF	; 191
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	0e 94 f7 03 	call	0x7ee	; 0x7ee <checkAdmin>
     c08:	88 23       	and	r24, r24
     c0a:	09 f4       	brne	.+2      	; 0xc0e <main+0x30e>
     c0c:	0f c1       	rjmp	.+542    	; 0xe2c <main+0x52c>
     c0e:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
                        blinkLED_Buzzer(LED_PIN_RR);
                        LCD_Clear();
     c12:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
                    if (checkAdmin(serial)) {
                        blinkLED_Buzzer(LED_PIN_RR);
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Admin Verified");
     c1c:	83 e5       	ldi	r24, 0x53	; 83
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     c24:	3f ef       	ldi	r19, 0xFF	; 255
     c26:	81 ee       	ldi	r24, 0xE1	; 225
     c28:	94 e0       	ldi	r25, 0x04	; 4
     c2a:	31 50       	subi	r19, 0x01	; 1
     c2c:	80 40       	sbci	r24, 0x00	; 0
     c2e:	90 40       	sbci	r25, 0x00	; 0
     c30:	e1 f7       	brne	.-8      	; 0xc2a <main+0x32a>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <main+0x334>
     c34:	00 00       	nop
                        _delay_ms(100);
                        
                        LCD_Clear();  // Clear the screen for the next message
     c36:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     c3a:	80 e8       	ldi	r24, 0x80	; 128
     c3c:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        LCD_Print("Admin Verified");
                        _delay_ms(100);
                        
                        LCD_Clear();  // Clear the screen for the next message
                        LCD_SetPosition(0, 0);
                        LCD_Print("Registration");
     c40:	86 ef       	ldi	r24, 0xF6	; 246
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     c48:	80 ec       	ldi	r24, 0xC0	; 192
     c4a:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        LCD_Clear();  // Clear the screen for the next message
                        LCD_SetPosition(0, 0);
                        LCD_Print("Registration");

                        LCD_SetPosition(1, 0);
                        LCD_Print("Tap your RFID");
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>

                        // Registration Mode: Register users
                        while (!isButtonPressed(Button_PIN_St, 'B')) {
     c56:	62 e4       	ldi	r22, 0x42	; 66
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     c5e:	88 23       	and	r24, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <main+0x364>
     c62:	83 c0       	rjmp	.+262    	; 0xd6a <main+0x46a>
                }
            }
        }
        
        // Check for Start button press
        if (isButtonPressed(Button_PIN_St, 'B')) {
     c64:	62 e4       	ldi	r22, 0x42	; 66
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <main+0x372>
     c70:	cb c2       	rjmp	.+1430   	; 0x1208 <main+0x908>
            uint8_t userCountValue = eeprom_read_byte(&userCount); // Get the user count from EEPROM
     c72:	84 e6       	ldi	r24, 0x64	; 100
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_read_byte>
            if (userCountValue == 0) {
     c7a:	81 11       	cpse	r24, r1
     c7c:	f3 c0       	rjmp	.+486    	; 0xe64 <main+0x564>
                // No users registered, display a message and prevent voting
                blinkLED_Buzzer(LED_PIN_Vote);
     c7e:	85 e0       	ldi	r24, 0x05	; 5
     c80:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
                LCD_Clear();
     c84:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     c88:	80 e8       	ldi	r24, 0x80	; 128
     c8a:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
            if (userCountValue == 0) {
                // No users registered, display a message and prevent voting
                blinkLED_Buzzer(LED_PIN_Vote);
                LCD_Clear();
                LCD_SetPosition(0, 0);
                LCD_Print("No Voters");
     c8e:	89 e3       	ldi	r24, 0x39	; 57
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     c96:	80 ec       	ldi	r24, 0xC0	; 192
     c98:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                blinkLED_Buzzer(LED_PIN_Vote);
                LCD_Clear();
                LCD_SetPosition(0, 0);
                LCD_Print("No Voters");
                LCD_SetPosition(1, 0);
                LCD_Print("Register first");
     c9c:	83 e4       	ldi	r24, 0x43	; 67
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     ca4:	3f ef       	ldi	r19, 0xFF	; 255
     ca6:	81 ee       	ldi	r24, 0xE1	; 225
     ca8:	94 e0       	ldi	r25, 0x04	; 4
     caa:	31 50       	subi	r19, 0x01	; 1
     cac:	80 40       	sbci	r24, 0x00	; 0
     cae:	90 40       	sbci	r25, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <main+0x3aa>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <main+0x3b4>
     cb4:	00 00       	nop
     cb6:	59 ce       	rjmp	.-846    	; 0x96a <main+0x6a>
                        blinkLED_Buzzer(LED_PIN_RR);
                        _delay_ms(50);
                        break;  // Exit loop after reset
                    } else {
                        // Admin authentication failed
                        LCD_Clear();
     cb8:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     cbc:	80 e8       	ldi	r24, 0x80	; 128
     cbe:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        break;  // Exit loop after reset
                    } else {
                        // Admin authentication failed
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Auth Failed");
     cc2:	8a e8       	ldi	r24, 0x8A	; 138
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     cca:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
     cce:	9f ef       	ldi	r25, 0xFF	; 255
     cd0:	e0 e7       	ldi	r30, 0x70	; 112
     cd2:	f2 e0       	ldi	r31, 0x02	; 2
     cd4:	91 50       	subi	r25, 0x01	; 1
     cd6:	e0 40       	sbci	r30, 0x00	; 0
     cd8:	f0 40       	sbci	r31, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <main+0x3d4>
     cdc:	ba ce       	rjmp	.-652    	; 0xa52 <main+0x152>
     cde:	8f e3       	ldi	r24, 0x3F	; 63
     ce0:	9c e9       	ldi	r25, 0x9C	; 156
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <main+0x3e2>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <main+0x3e8>
     ce8:	00 00       	nop
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	89 1a       	sub	r8, r25
     cee:	91 08       	sbc	r9, r1
            LCD_Print("Tap Admin ID");

            // Set up a timer for 1 seconds
            uint16_t timeout = 1000 / 10;  // 2000ms, with _delay_ms(10)

            while (timeout > 0) {
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <main+0x3f4>
     cf2:	60 ce       	rjmp	.-832    	; 0x9b4 <main+0xb4>
     cf4:	b0 ce       	rjmp	.-672    	; 0xa56 <main+0x156>
     cf6:	8f e3       	ldi	r24, 0x3F	; 63
     cf8:	9c e9       	ldi	r25, 0x9C	; 156
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <main+0x3fa>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <main+0x400>
     d00:	00 00       	nop
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	89 1a       	sub	r8, r25
     d06:	91 08       	sbc	r9, r1

                // Wait for admin authentication with timeout (0.5 second)
                uint16_t timeout = 500 / 10;  // 1000ms, with _delay_ms(10)
                uint8_t adminVerified = 0;

                while (timeout > 0) {
     d08:	09 f0       	breq	.+2      	; 0xd0c <main+0x40c>
     d0a:	c7 ce       	rjmp	.-626    	; 0xa9a <main+0x19a>
                    timeout--;
                }

                if (!adminVerified) {
                    // Admin authentication failed or timeout
                    LCD_Clear();
     d0c:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     d10:	80 e8       	ldi	r24, 0x80	; 128
     d12:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>

                if (!adminVerified) {
                    // Admin authentication failed or timeout
                    LCD_Clear();
                    LCD_SetPosition(0, 0);
                    LCD_Print("Auth Failed");
     d16:	8a e8       	ldi	r24, 0x8A	; 138
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     d1e:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
     d22:	9f ef       	ldi	r25, 0xFF	; 255
     d24:	e0 e7       	ldi	r30, 0x70	; 112
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	91 50       	subi	r25, 0x01	; 1
     d2a:	e0 40       	sbci	r30, 0x00	; 0
     d2c:	f0 40       	sbci	r31, 0x00	; 0
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <main+0x428>
     d30:	19 c0       	rjmp	.+50     	; 0xd64 <main+0x464>
                    blinkLED_Buzzer(LED_PIN_RR);
                    _delay_ms(50);
                }
            } else {
                // No results to display
                LCD_Clear();
     d32:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     d36:	80 e8       	ldi	r24, 0x80	; 128
     d38:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                }
            } else {
                // No results to display
                LCD_Clear();
                LCD_SetPosition(0, 0);
                LCD_Print("No Results");
     d3c:	81 ed       	ldi	r24, 0xD1	; 209
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     d44:	80 ec       	ldi	r24, 0xC0	; 192
     d46:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                // No results to display
                LCD_Clear();
                LCD_SetPosition(0, 0);
                LCD_Print("No Results");
                LCD_SetPosition(1, 0);
                LCD_Print("To Display");
     d4a:	8c ed       	ldi	r24, 0xDC	; 220
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     d52:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
     d56:	ef ef       	ldi	r30, 0xFF	; 255
     d58:	f1 ee       	ldi	r31, 0xE1	; 225
     d5a:	24 e0       	ldi	r18, 0x04	; 4
     d5c:	e1 50       	subi	r30, 0x01	; 1
     d5e:	f0 40       	sbci	r31, 0x00	; 0
     d60:	20 40       	sbci	r18, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <main+0x45c>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <main+0x466>
     d66:	00 00       	nop
     d68:	28 cf       	rjmp	.-432    	; 0xbba <main+0x2ba>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     d6a:	80 e8       	ldi	r24, 0x80	; 128
     d6c:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>

                        // Registration Mode: Register users
                        while (!isButtonPressed(Button_PIN_St, 'B')) {
                            //LCD_Clear();  // Clear the screen for the next message
                            LCD_SetPosition(0, 0);
                            LCD_Print("Registration");
     d70:	86 ef       	ldi	r24, 0xF6	; 246
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     d78:	80 ec       	ldi	r24, 0xC0	; 192
     d7a:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        while (!isButtonPressed(Button_PIN_St, 'B')) {
                            //LCD_Clear();  // Clear the screen for the next message
                            LCD_SetPosition(0, 0);
                            LCD_Print("Registration");
                            LCD_SetPosition(1, 0);
                            LCD_Print("Tap your RFID");
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                            
                            status = MFRC522_request(0x26, serial);
     d86:	be 01       	movw	r22, r28
     d88:	6f 5b       	subi	r22, 0xBF	; 191
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	86 e2       	ldi	r24, 0x26	; 38
     d8e:	0e 94 81 01 	call	0x302	; 0x302 <MFRC522_request>
                            if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
     d92:	81 11       	cpse	r24, r1
     d94:	60 cf       	rjmp	.-320    	; 0xc56 <main+0x356>
     d96:	ce 01       	movw	r24, r28
     d98:	8f 5b       	subi	r24, 0xBF	; 191
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	0e 94 a9 01 	call	0x352	; 0x352 <MFRC522_anticoll>
     da0:	81 11       	cpse	r24, r1
     da2:	59 cf       	rjmp	.-334    	; 0xc56 <main+0x356>
                                if (!isRegistered(serial)) {
     da4:	ce 01       	movw	r24, r28
     da6:	8f 5b       	subi	r24, 0xBF	; 191
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	0e 94 ae 03 	call	0x75c	; 0x75c <isRegistered>
     dae:	81 11       	cpse	r24, r1
     db0:	22 c0       	rjmp	.+68     	; 0xdf6 <main+0x4f6>
                                    storeCard(serial);
     db2:	ce 01       	movw	r24, r28
     db4:	8f 5b       	subi	r24, 0xBF	; 191
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	0e 94 4b 03 	call	0x696	; 0x696 <storeCard>
                                    LCD_Clear();  // Clear the screen after successful registration
     dbc:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     dc0:	80 e8       	ldi	r24, 0x80	; 128
     dc2:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                            if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
                                if (!isRegistered(serial)) {
                                    storeCard(serial);
                                    LCD_Clear();  // Clear the screen after successful registration
                                    LCD_SetPosition(0, 0);
                                    LCD_Print("Registration");
     dc6:	86 ef       	ldi	r24, 0xF6	; 246
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     dce:	80 ec       	ldi	r24, 0xC0	; 192
     dd0:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                    storeCard(serial);
                                    LCD_Clear();  // Clear the screen after successful registration
                                    LCD_SetPosition(0, 0);
                                    LCD_Print("Registration");
                                    LCD_SetPosition(1, 0);
                                    LCD_Print("Successful");
     dd4:	81 e1       	ldi	r24, 0x11	; 17
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                                    blinkLED_Buzzer(LED_PIN_Reg);
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
     de2:	ef ef       	ldi	r30, 0xFF	; 255
     de4:	f1 ee       	ldi	r31, 0xE1	; 225
     de6:	24 e0       	ldi	r18, 0x04	; 4
     de8:	e1 50       	subi	r30, 0x01	; 1
     dea:	f0 40       	sbci	r31, 0x00	; 0
     dec:	20 40       	sbci	r18, 0x00	; 0
     dee:	e1 f7       	brne	.-8      	; 0xde8 <main+0x4e8>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <main+0x4f2>
     df2:	00 00       	nop
     df4:	30 cf       	rjmp	.-416    	; 0xc56 <main+0x356>
                                    _delay_ms(100);
                                } else {
                                    
                                    LCD_Clear();  // Clear the screen if already registered
     df6:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                    _delay_ms(100);
                                } else {
                                    
                                    LCD_Clear();  // Clear the screen if already registered
                                    LCD_SetPosition(0, 0);
                                    LCD_Print("Already");
     e00:	8c e1       	ldi	r24, 0x1C	; 28
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     e08:	80 ec       	ldi	r24, 0xC0	; 192
     e0a:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                    
                                    LCD_Clear();  // Clear the screen if already registered
                                    LCD_SetPosition(0, 0);
                                    LCD_Print("Already");
                                    LCD_SetPosition(1, 0);
                                    LCD_Print("Registered");
     e0e:	84 e2       	ldi	r24, 0x24	; 36
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                                    blinkLED_Buzzer(LED_PIN_Reg);
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
     e1c:	3f ef       	ldi	r19, 0xFF	; 255
     e1e:	81 ee       	ldi	r24, 0xE1	; 225
     e20:	94 e0       	ldi	r25, 0x04	; 4
     e22:	31 50       	subi	r19, 0x01	; 1
     e24:	80 40       	sbci	r24, 0x00	; 0
     e26:	90 40       	sbci	r25, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <main+0x522>
     e2a:	e2 cf       	rjmp	.-60     	; 0xdf0 <main+0x4f0>
                            }
                        }
                        break;
                    } else {
                        // Admin authentication failed, retry
                        LCD_Clear();  // Clear the screen for retry
     e2c:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        break;
                    } else {
                        // Admin authentication failed, retry
                        LCD_Clear();  // Clear the screen for retry
                        LCD_SetPosition(0, 0);
                        LCD_Print("Auth Failed");
     e36:	8a e8       	ldi	r24, 0x8A	; 138
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     e3e:	80 ec       	ldi	r24, 0xC0	; 192
     e40:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        // Admin authentication failed, retry
                        LCD_Clear();  // Clear the screen for retry
                        LCD_SetPosition(0, 0);
                        LCD_Print("Auth Failed");
                        LCD_SetPosition(1, 0);
                        LCD_Print("Try again");
     e44:	8f e2       	ldi	r24, 0x2F	; 47
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     e4c:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
     e50:	ef ef       	ldi	r30, 0xFF	; 255
     e52:	f1 ee       	ldi	r31, 0xE1	; 225
     e54:	24 e0       	ldi	r18, 0x04	; 4
     e56:	e1 50       	subi	r30, 0x01	; 1
     e58:	f0 40       	sbci	r31, 0x00	; 0
     e5a:	20 40       	sbci	r18, 0x00	; 0
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <main+0x556>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <main+0x560>
     e60:	00 00       	nop
     e62:	b5 ce       	rjmp	.-662    	; 0xbce <main+0x2ce>
     e64:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
                LCD_Print("Register first");
                _delay_ms(100);  // Show the message for 0.1 seconds
                continue;  // Return to the main loop
            }
            blinkLED_Buzzer(LED_PIN_RR);
            LCD_Clear();  // Clear the screen when start button is pressed
     e68:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     e6c:	80 e8       	ldi	r24, 0x80	; 128
     e6e:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
            blinkLED_Buzzer(LED_PIN_RR);
            LCD_Clear();  // Clear the screen when start button is pressed

            // Admin authentication before starting voting
            LCD_SetPosition(0, 0);
            LCD_Print("Tap Admin ID");
     e72:	86 e4       	ldi	r24, 0x46	; 70
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>

            while (1) {
                status = MFRC522_request(0x26, serial);  // Request card scan
     e7a:	be 01       	movw	r22, r28
     e7c:	6f 5b       	subi	r22, 0xBF	; 191
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	86 e2       	ldi	r24, 0x26	; 38
     e82:	0e 94 81 01 	call	0x302	; 0x302 <MFRC522_request>
                if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
     e86:	81 11       	cpse	r24, r1
     e88:	f8 cf       	rjmp	.-16     	; 0xe7a <main+0x57a>
     e8a:	ce 01       	movw	r24, r28
     e8c:	8f 5b       	subi	r24, 0xBF	; 191
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	0e 94 a9 01 	call	0x352	; 0x352 <MFRC522_anticoll>
     e94:	81 11       	cpse	r24, r1
     e96:	f1 cf       	rjmp	.-30     	; 0xe7a <main+0x57a>
                    if (checkAdmin(serial)) {
     e98:	ce 01       	movw	r24, r28
     e9a:	8f 5b       	subi	r24, 0xBF	; 191
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <checkAdmin>
     ea2:	88 23       	and	r24, r24
     ea4:	09 f4       	brne	.+2      	; 0xea8 <main+0x5a8>
     ea6:	71 c0       	rjmp	.+226    	; 0xf8a <main+0x68a>
     ea8:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
                        blinkLED_Buzzer(LED_PIN_RR);
                        LCD_Clear();  // Clear the screen after successful admin authentication
     eac:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     eb0:	80 e8       	ldi	r24, 0x80	; 128
     eb2:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
                    if (checkAdmin(serial)) {
                        blinkLED_Buzzer(LED_PIN_RR);
                        LCD_Clear();  // Clear the screen after successful admin authentication
                        LCD_SetPosition(0, 0);
                        LCD_Print("Admin Verified");
     eb6:	83 e5       	ldi	r24, 0x53	; 83
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     ebe:	ef ef       	ldi	r30, 0xFF	; 255
     ec0:	f1 ee       	ldi	r31, 0xE1	; 225
     ec2:	24 e0       	ldi	r18, 0x04	; 4
     ec4:	e1 50       	subi	r30, 0x01	; 1
     ec6:	f0 40       	sbci	r31, 0x00	; 0
     ec8:	20 40       	sbci	r18, 0x00	; 0
     eca:	e1 f7       	brne	.-8      	; 0xec4 <main+0x5c4>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <main+0x5ce>
     ece:	00 00       	nop
                        timeout--;
                    }

                    if (!adminVerified) {
                        // Admin authentication failed or timeout
                        LCD_Clear();
     ed0:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     ed4:	80 e8       	ldi	r24, 0x80	; 128
     ed6:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>

                    if (!adminVerified) {
                        // Admin authentication failed or timeout
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Tap your RFID");
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     ee2:	80 ec       	ldi	r24, 0xC0	; 192
     ee4:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        // Admin authentication failed or timeout
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Tap your RFID");
                        LCD_SetPosition(1, 0);
                        LCD_Print("To Vote");
     ee8:	82 e5       	ldi	r24, 0x52	; 82
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
            LCD_Print("Tap your RFID");
            LCD_SetPosition(1, 0);
            LCD_Print("To Vote");
            
            while (1) {
                status = MFRC522_request(0x26, serial);  // Request RFID scan for user
     ef0:	be 01       	movw	r22, r28
     ef2:	6f 5b       	subi	r22, 0xBF	; 191
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	86 e2       	ldi	r24, 0x26	; 38
     ef8:	0e 94 81 01 	call	0x302	; 0x302 <MFRC522_request>
                if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
     efc:	81 11       	cpse	r24, r1
     efe:	a2 c0       	rjmp	.+324    	; 0x1044 <main+0x744>
     f00:	ce 01       	movw	r24, r28
     f02:	8f 5b       	subi	r24, 0xBF	; 191
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	0e 94 a9 01 	call	0x352	; 0x352 <MFRC522_anticoll>
     f0a:	81 11       	cpse	r24, r1
     f0c:	9b c0       	rjmp	.+310    	; 0x1044 <main+0x744>
                    uint8_t userIndex = getUserIndex(serial);  // Find the user in registered IDs
     f0e:	ce 01       	movw	r24, r28
     f10:	8f 5b       	subi	r24, 0xBF	; 191
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	0e 94 6e 03 	call	0x6dc	; 0x6dc <getUserIndex>
                    if (userIndex != 255) {  // User is registered
     f18:	8f 3f       	cpi	r24, 0xFF	; 255
     f1a:	09 f4       	brne	.+2      	; 0xf1e <main+0x61e>
     f1c:	49 c1       	rjmp	.+658    	; 0x11b0 <main+0x8b0>
                        if (votedUsers[userIndex] == 0) {  // Check if the user has not voted
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	fc 01       	movw	r30, r24
     f22:	ea 56       	subi	r30, 0x6A	; 106
     f24:	fd 4f       	sbci	r31, 0xFD	; 253
     f26:	4f 01       	movw	r8, r30
     f28:	80 81       	ld	r24, Z
     f2a:	81 11       	cpse	r24, r1
     f2c:	66 c0       	rjmp	.+204    	; 0xffa <main+0x6fa>
                            LCD_Clear();
     f2e:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     f32:	80 e8       	ldi	r24, 0x80	; 128
     f34:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                    uint8_t userIndex = getUserIndex(serial);  // Find the user in registered IDs
                    if (userIndex != 255) {  // User is registered
                        if (votedUsers[userIndex] == 0) {  // Check if the user has not voted
                            LCD_Clear();
                            LCD_SetPosition(0, 0);
                            LCD_Print("Please vote");
     f38:	8a e5       	ldi	r24, 0x5A	; 90
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                            blinkLED_Buzzer(LED_PIN_Reg);
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
                            
                            while (1) {
                                if (isButtonPressed(Button_PIN_A, 'C')) {
     f46:	63 e4       	ldi	r22, 0x43	; 67
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     f4e:	88 23       	and	r24, r24
     f50:	79 f1       	breq	.+94     	; 0xfb0 <main+0x6b0>
                                    voteA++;
     f52:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <voteA>
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <voteA>
                                    LCD_Print("To Vote");
                                    break;
                                    
                                } else if (isButtonPressed(Button_PIN_D, 'C')) {
                                    voteD++;
                                    blinkLED_Buzzer(LED_PIN_Vote);
     f5c:	85 e0       	ldi	r24, 0x05	; 5
     f5e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
                                    LCD_Clear();
     f62:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     f66:	80 e8       	ldi	r24, 0x80	; 128
     f68:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                } else if (isButtonPressed(Button_PIN_D, 'C')) {
                                    voteD++;
                                    blinkLED_Buzzer(LED_PIN_Vote);
                                    LCD_Clear();
                                    LCD_SetPosition(0, 0);
                                    LCD_Print("Thank for voting");
     f6c:	86 e6       	ldi	r24, 0x66	; 102
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                                    votedUsers[userIndex] = 1;  // Mark the user as having voted
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	f4 01       	movw	r30, r8
     f78:	80 83       	st	Z, r24
     f7a:	ff ef       	ldi	r31, 0xFF	; 255
     f7c:	21 ee       	ldi	r18, 0xE1	; 225
     f7e:	34 e0       	ldi	r19, 0x04	; 4
     f80:	f1 50       	subi	r31, 0x01	; 1
     f82:	20 40       	sbci	r18, 0x00	; 0
     f84:	30 40       	sbci	r19, 0x00	; 0
     f86:	e1 f7       	brne	.-8      	; 0xf80 <main+0x680>
     f88:	4b c0       	rjmp	.+150    	; 0x1020 <main+0x720>
                        LCD_Print("Admin Verified");
                        _delay_ms(100);  // Give some time to show verification message
                        break;  // Break to start voting after admin check
                    } else {
                        // Admin authentication failed, retry
                        LCD_Clear();  // Clear the screen for retry
     f8a:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     f8e:	80 e8       	ldi	r24, 0x80	; 128
     f90:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        break;  // Break to start voting after admin check
                    } else {
                        // Admin authentication failed, retry
                        LCD_Clear();  // Clear the screen for retry
                        LCD_SetPosition(0, 0);
                        LCD_Print("Auth Failed");
     f94:	8a e8       	ldi	r24, 0x8A	; 138
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	81 ee       	ldi	r24, 0xE1	; 225
     fa0:	94 e0       	ldi	r25, 0x04	; 4
     fa2:	31 50       	subi	r19, 0x01	; 1
     fa4:	80 40       	sbci	r24, 0x00	; 0
     fa6:	90 40       	sbci	r25, 0x00	; 0
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <main+0x6a2>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <main+0x6ac>
     fac:	00 00       	nop
     fae:	5c cf       	rjmp	.-328    	; 0xe68 <main+0x568>
                                    LCD_Print("Tap your RFID");
                                    LCD_SetPosition(1, 0);
                                    LCD_Print("To Vote");
                                    break;
                                    
                                } else if (isButtonPressed(Button_PIN_B, 'C')) {
     fb0:	63 e4       	ldi	r22, 0x43	; 67
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     fb8:	88 23       	and	r24, r24
     fba:	31 f0       	breq	.+12     	; 0xfc8 <main+0x6c8>
                                    voteB++;
     fbc:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <voteB>
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <voteB>
     fc6:	ca cf       	rjmp	.-108    	; 0xf5c <main+0x65c>
                                    LCD_Print("Tap your RFID");
                                    LCD_SetPosition(1, 0);
                                    LCD_Print("To Vote");
                                    break;
                                    
                                } else if (isButtonPressed(Button_PIN_C, 'C')) {
     fc8:	63 e4       	ldi	r22, 0x43	; 67
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     fd0:	88 23       	and	r24, r24
     fd2:	31 f0       	breq	.+12     	; 0xfe0 <main+0x6e0>
                                    voteC++;
     fd4:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <voteC>
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <voteC>
     fde:	be cf       	rjmp	.-132    	; 0xf5c <main+0x65c>
                                    LCD_Print("Tap your RFID");
                                    LCD_SetPosition(1, 0);
                                    LCD_Print("To Vote");
                                    break;
                                    
                                } else if (isButtonPressed(Button_PIN_D, 'C')) {
     fe0:	63 e4       	ldi	r22, 0x43	; 67
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
     fe8:	88 23       	and	r24, r24
     fea:	09 f4       	brne	.+2      	; 0xfee <main+0x6ee>
     fec:	ac cf       	rjmp	.-168    	; 0xf46 <main+0x646>
                                    voteD++;
     fee:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <__data_end>
     ff8:	b1 cf       	rjmp	.-158    	; 0xf5c <main+0x65c>
                                    LCD_Print("To Vote");
                                    break;
                                }
                            }
                        } else {
                            LCD_Clear();
     ffa:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
     ffe:	80 e8       	ldi	r24, 0x80	; 128
    1000:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                }
                            }
                        } else {
                            LCD_Clear();
                            LCD_SetPosition(0, 0);
                            LCD_Print("Already voted");
    1004:	87 e7       	ldi	r24, 0x77	; 119
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                            blinkLED_Buzzer(LED_PIN_Reg);
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	91 ee       	ldi	r25, 0xE1	; 225
    1016:	e4 e0       	ldi	r30, 0x04	; 4
    1018:	81 50       	subi	r24, 0x01	; 1
    101a:	90 40       	sbci	r25, 0x00	; 0
    101c:	e0 40       	sbci	r30, 0x00	; 0
    101e:	e1 f7       	brne	.-8      	; 0x1018 <main+0x718>
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <main+0x722>
    1022:	00 00       	nop
                        LCD_SetPosition(0, 0);
                        LCD_Print("Invalid Vote");
                        blinkLED_Buzzer(LED_PIN_Reg);
                        _delay_ms(100);
                        
                        LCD_Clear();
    1024:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    1028:	80 e8       	ldi	r24, 0x80	; 128
    102a:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        blinkLED_Buzzer(LED_PIN_Reg);
                        _delay_ms(100);
                        
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Tap your RFID");
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    1036:	80 ec       	ldi	r24, 0xC0	; 192
    1038:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                        
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Tap your RFID");
                        LCD_SetPosition(1, 0);
                        LCD_Print("To Vote");
    103c:	82 e5       	ldi	r24, 0x52	; 82
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                    }
                }

                // Check for Result button press
                if (isButtonPressed(Button_PIN_Result, 'B')) {
    1044:	62 e4       	ldi	r22, 0x42	; 66
    1046:	86 e0       	ldi	r24, 0x06	; 6
    1048:	0e 94 03 04 	call	0x806	; 0x806 <isButtonPressed>
    104c:	88 23       	and	r24, r24
    104e:	09 f4       	brne	.+2      	; 0x1052 <main+0x752>
    1050:	4f cf       	rjmp	.-354    	; 0xef0 <main+0x5f0>
                    LCD_Clear();
    1052:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    1056:	80 e8       	ldi	r24, 0x80	; 128
    1058:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>

                // Check for Result button press
                if (isButtonPressed(Button_PIN_Result, 'B')) {
                    LCD_Clear();
                    LCD_SetPosition(0, 0);
                    LCD_Print("Tap Admin ID");
    105c:	86 e4       	ldi	r24, 0x46	; 70
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    1064:	92 e3       	ldi	r25, 0x32	; 50
    1066:	89 2e       	mov	r8, r25
    1068:	91 2c       	mov	r9, r1
                    // Wait for admin authentication with timeout (0.5 second)
                    uint16_t timeout = 500 / 10;  // 1000ms, with _delay_ms(10)
                    uint8_t adminVerified = 0;

                    while (timeout > 0) {
                        status = MFRC522_request(0x26, serial);  // Request RFID card scan
    106a:	be 01       	movw	r22, r28
    106c:	6f 5b       	subi	r22, 0xBF	; 191
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	86 e2       	ldi	r24, 0x26	; 38
    1072:	0e 94 81 01 	call	0x302	; 0x302 <MFRC522_request>
                        if (status == MI_OK && MFRC522_anticoll(serial) == MI_OK) {
    1076:	81 11       	cpse	r24, r1
    1078:	bb c0       	rjmp	.+374    	; 0x11f0 <main+0x8f0>
    107a:	ce 01       	movw	r24, r28
    107c:	8f 5b       	subi	r24, 0xBF	; 191
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	0e 94 a9 01 	call	0x352	; 0x352 <MFRC522_anticoll>
    1084:	81 11       	cpse	r24, r1
    1086:	b4 c0       	rjmp	.+360    	; 0x11f0 <main+0x8f0>
                            if (checkAdmin(serial)) {
    1088:	ce 01       	movw	r24, r28
    108a:	8f 5b       	subi	r24, 0xBF	; 191
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <checkAdmin>
    1092:	88 23       	and	r24, r24
    1094:	09 f4       	brne	.+2      	; 0x1098 <main+0x798>
    1096:	99 c0       	rjmp	.+306    	; 0x11ca <main+0x8ca>
    1098:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
                                adminVerified = 1;
                                // Admin authenticated, display result
                                blinkLED_Buzzer(LED_PIN_RR);
                                uint8_t totalVoted = voteA + voteB + voteC + voteD;
    109c:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <voteA>
    10a0:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <voteB>
    10a4:	89 0f       	add	r24, r25
    10a6:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <voteC>
    10aa:	89 0f       	add	r24, r25
    10ac:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <__data_end>
    10b0:	89 0f       	add	r24, r25
    10b2:	28 96       	adiw	r28, 0x08	; 8
    10b4:	8f af       	std	Y+63, r24	; 0x3f
    10b6:	28 97       	sbiw	r28, 0x08	; 8
                                uint8_t userNum = eeprom_read_byte(&userCount);
    10b8:	84 e6       	ldi	r24, 0x64	; 100
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_read_byte>
    10c0:	68 2e       	mov	r6, r24
    10c2:	83 e0       	ldi	r24, 0x03	; 3
    10c4:	88 2e       	mov	r8, r24
    10c6:	91 2c       	mov	r9, r1
                                
                                // Show the result for 6 seconds (3 alternations of 2 seconds)
                                uint16_t resultDisplayTime = 6000 / 1000; // 6 seconds in 1-second increments
                                while (resultDisplayTime > 0) {
                                    // Display the total votes for 1 second
                                    LCD_Clear();
    10c8:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    10cc:	80 e8       	ldi	r24, 0x80	; 128
    10ce:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                while (resultDisplayTime > 0) {
                                    // Display the total votes for 1 second
                                    LCD_Clear();
                                    LCD_SetPosition(0, 0);
                                    char resultMsg1[MAX_LEN];
                                    snprintf(resultMsg1, MAX_LEN, "  A:%d      B:%d", voteA, voteB);
    10d2:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <voteB>
    10d6:	1f 92       	push	r1
    10d8:	8f 93       	push	r24
    10da:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <voteA>
    10de:	1f 92       	push	r1
    10e0:	8f 93       	push	r24
    10e2:	86 e9       	ldi	r24, 0x96	; 150
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	1f 92       	push	r1
    10ec:	7f 92       	push	r7
    10ee:	1f 93       	push	r17
    10f0:	0f 93       	push	r16
    10f2:	0e 94 5f 0a 	call	0x14be	; 0x14be <snprintf>
                                    LCD_Print(resultMsg1);
    10f6:	c8 01       	movw	r24, r16
    10f8:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    10fc:	80 ec       	ldi	r24, 0xC0	; 192
    10fe:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                    char resultMsg1[MAX_LEN];
                                    snprintf(resultMsg1, MAX_LEN, "  A:%d      B:%d", voteA, voteB);
                                    LCD_Print(resultMsg1);
                                    LCD_SetPosition(1, 0);
                                    char resultMsg2[MAX_LEN];
                                    snprintf(resultMsg2, MAX_LEN, "  C:%d      D:%d", voteC, voteD);
    1102:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
    1106:	1f 92       	push	r1
    1108:	8f 93       	push	r24
    110a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <voteC>
    110e:	1f 92       	push	r1
    1110:	8f 93       	push	r24
    1112:	27 ea       	ldi	r18, 0xA7	; 167
    1114:	31 e0       	ldi	r19, 0x01	; 1
    1116:	3f 93       	push	r19
    1118:	2f 93       	push	r18
    111a:	1f 92       	push	r1
    111c:	7f 92       	push	r7
    111e:	ff 92       	push	r15
    1120:	ef 92       	push	r14
    1122:	0e 94 5f 0a 	call	0x14be	; 0x14be <snprintf>
                                    LCD_Print(resultMsg2);
    1126:	c7 01       	movw	r24, r14
    1128:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    112c:	9f ef       	ldi	r25, 0xFF	; 255
    112e:	e3 ed       	ldi	r30, 0xD3	; 211
    1130:	f0 e3       	ldi	r31, 0x30	; 48
    1132:	91 50       	subi	r25, 0x01	; 1
    1134:	e0 40       	sbci	r30, 0x00	; 0
    1136:	f0 40       	sbci	r31, 0x00	; 0
    1138:	e1 f7       	brne	.-8      	; 0x1132 <main+0x832>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <main+0x83c>
    113c:	00 00       	nop
                                    _delay_ms(1000);

                                    // Display the registered and voted count for 1 second
                                    LCD_Clear();
    113e:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    1142:	80 e8       	ldi	r24, 0x80	; 128
    1144:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>

                                    // Display the registered and voted count for 1 second
                                    LCD_Clear();
                                    LCD_SetPosition(0, 0);
                                    char regMsg[MAX_LEN];
                                    snprintf(regMsg, MAX_LEN, "Registered :%d", userNum);
    1148:	1f 92       	push	r1
    114a:	6f 92       	push	r6
    114c:	3f 92       	push	r3
    114e:	2f 92       	push	r2
    1150:	1f 92       	push	r1
    1152:	7f 92       	push	r7
    1154:	df 92       	push	r13
    1156:	cf 92       	push	r12
    1158:	0e 94 5f 0a 	call	0x14be	; 0x14be <snprintf>
                                    LCD_Print(regMsg);
    115c:	c6 01       	movw	r24, r12
    115e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    1162:	80 ec       	ldi	r24, 0xC0	; 192
    1164:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                    char regMsg[MAX_LEN];
                                    snprintf(regMsg, MAX_LEN, "Registered :%d", userNum);
                                    LCD_Print(regMsg);
                                    LCD_SetPosition(1, 0);
                                    char votedMsg[MAX_LEN];
                                    snprintf(votedMsg, MAX_LEN, "Voted :%d", totalVoted);
    1168:	1f 92       	push	r1
    116a:	28 96       	adiw	r28, 0x08	; 8
    116c:	2f ad       	ldd	r18, Y+63	; 0x3f
    116e:	28 97       	sbiw	r28, 0x08	; 8
    1170:	2f 93       	push	r18
    1172:	5f 92       	push	r5
    1174:	4f 92       	push	r4
    1176:	1f 92       	push	r1
    1178:	7f 92       	push	r7
    117a:	bf 92       	push	r11
    117c:	af 92       	push	r10
    117e:	0e 94 5f 0a 	call	0x14be	; 0x14be <snprintf>
                                    LCD_Print(votedMsg);
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	c5 01       	movw	r24, r10
    118e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    1192:	9f ef       	ldi	r25, 0xFF	; 255
    1194:	e3 ed       	ldi	r30, 0xD3	; 211
    1196:	f0 e3       	ldi	r31, 0x30	; 48
    1198:	91 50       	subi	r25, 0x01	; 1
    119a:	e0 40       	sbci	r30, 0x00	; 0
    119c:	f0 40       	sbci	r31, 0x00	; 0
    119e:	e1 f7       	brne	.-8      	; 0x1198 <main+0x898>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <main+0x8a2>
    11a2:	00 00       	nop
    11a4:	21 e0       	ldi	r18, 0x01	; 1
    11a6:	82 1a       	sub	r8, r18
    11a8:	91 08       	sbc	r9, r1
                                uint8_t totalVoted = voteA + voteB + voteC + voteD;
                                uint8_t userNum = eeprom_read_byte(&userCount);
                                
                                // Show the result for 6 seconds (3 alternations of 2 seconds)
                                uint16_t resultDisplayTime = 6000 / 1000; // 6 seconds in 1-second increments
                                while (resultDisplayTime > 0) {
    11aa:	09 f0       	breq	.+2      	; 0x11ae <main+0x8ae>
    11ac:	8d cf       	rjmp	.-230    	; 0x10c8 <main+0x7c8>
    11ae:	dd cb       	rjmp	.-2118   	; 0x96a <main+0x6a>
                            LCD_Print("Tap your RFID");
                            LCD_SetPosition(1, 0);
                            LCD_Print("To Vote");
                        }
                    } else {
                        LCD_Clear();
    11b0:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    11b4:	80 e8       	ldi	r24, 0x80	; 128
    11b6:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                            LCD_Print("To Vote");
                        }
                    } else {
                        LCD_Clear();
                        LCD_SetPosition(0, 0);
                        LCD_Print("Invalid Vote");
    11ba:	85 e8       	ldi	r24, 0x85	; 133
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
                        blinkLED_Buzzer(LED_PIN_Reg);
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <blinkLED_Buzzer>
    11c8:	d8 ce       	rjmp	.-592    	; 0xf7a <main+0x67a>
                                }
                                // After showing the result, return to the initial state (registration mode)
                                goto initial_state;
                            } else {
                                // Admin authentication failed
                                LCD_Clear();
    11ca:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_Clear>
    }
}

void LCD_SetPosition(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    LCD_SendCommand(pos);
    11ce:	80 e8       	ldi	r24, 0x80	; 128
    11d0:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SendCommand>
                                goto initial_state;
                            } else {
                                // Admin authentication failed
                                LCD_Clear();
                                LCD_SetPosition(0, 0);
                                LCD_Print("Auth Failed");
    11d4:	8a e8       	ldi	r24, 0x8A	; 138
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Print>
    11dc:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkLED_Buzzer.part.2>
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	80 e7       	ldi	r24, 0x70	; 112
    11e4:	92 e0       	ldi	r25, 0x02	; 2
    11e6:	31 50       	subi	r19, 0x01	; 1
    11e8:	80 40       	sbci	r24, 0x00	; 0
    11ea:	90 40       	sbci	r25, 0x00	; 0
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <main+0x8e6>
    11ee:	6e ce       	rjmp	.-804    	; 0xecc <main+0x5cc>
    11f0:	ef e3       	ldi	r30, 0x3F	; 63
    11f2:	fc e9       	ldi	r31, 0x9C	; 156
    11f4:	31 97       	sbiw	r30, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <main+0x8f4>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <main+0x8fa>
    11fa:	00 00       	nop
    11fc:	f1 e0       	ldi	r31, 0x01	; 1
    11fe:	8f 1a       	sub	r8, r31
    1200:	91 08       	sbc	r9, r1

                    // Wait for admin authentication with timeout (0.5 second)
                    uint16_t timeout = 500 / 10;  // 1000ms, with _delay_ms(10)
                    uint8_t adminVerified = 0;

                    while (timeout > 0) {
    1202:	09 f0       	breq	.+2      	; 0x1206 <main+0x906>
    1204:	32 cf       	rjmp	.-412    	; 0x106a <main+0x76a>
    1206:	64 ce       	rjmp	.-824    	; 0xed0 <main+0x5d0>
    1208:	2f ef       	ldi	r18, 0xFF	; 255
    120a:	33 ec       	ldi	r19, 0xC3	; 195
    120c:	89 e0       	ldi	r24, 0x09	; 9
    120e:	21 50       	subi	r18, 0x01	; 1
    1210:	30 40       	sbci	r19, 0x00	; 0
    1212:	80 40       	sbci	r24, 0x00	; 0
    1214:	e1 f7       	brne	.-8      	; 0x120e <main+0x90e>
    1216:	4d cd       	rjmp	.-1382   	; 0xcb2 <main+0x3b2>

00001218 <malloc>:
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	91 05       	cpc	r25, r1
    1224:	10 f4       	brcc	.+4      	; 0x122a <malloc+0x12>
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <__flp>
    122e:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <__flp+0x1>
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	a0 e0       	ldi	r26, 0x00	; 0
    123a:	30 97       	sbiw	r30, 0x00	; 0
    123c:	99 f4       	brne	.+38     	; 0x1264 <malloc+0x4c>
    123e:	21 15       	cp	r18, r1
    1240:	31 05       	cpc	r19, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <malloc+0x2e>
    1244:	4a c0       	rjmp	.+148    	; 0x12da <malloc+0xc2>
    1246:	28 1b       	sub	r18, r24
    1248:	39 0b       	sbc	r19, r25
    124a:	24 30       	cpi	r18, 0x04	; 4
    124c:	31 05       	cpc	r19, r1
    124e:	d8 f5       	brcc	.+118    	; 0x12c6 <malloc+0xae>
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	9b 81       	ldd	r25, Y+3	; 0x03
    1254:	61 15       	cp	r22, r1
    1256:	71 05       	cpc	r23, r1
    1258:	89 f1       	breq	.+98     	; 0x12bc <malloc+0xa4>
    125a:	fb 01       	movw	r30, r22
    125c:	93 83       	std	Z+3, r25	; 0x03
    125e:	82 83       	std	Z+2, r24	; 0x02
    1260:	fe 01       	movw	r30, r28
    1262:	11 c0       	rjmp	.+34     	; 0x1286 <malloc+0x6e>
    1264:	40 81       	ld	r20, Z
    1266:	51 81       	ldd	r21, Z+1	; 0x01
    1268:	02 81       	ldd	r16, Z+2	; 0x02
    126a:	13 81       	ldd	r17, Z+3	; 0x03
    126c:	48 17       	cp	r20, r24
    126e:	59 07       	cpc	r21, r25
    1270:	e0 f0       	brcs	.+56     	; 0x12aa <malloc+0x92>
    1272:	48 17       	cp	r20, r24
    1274:	59 07       	cpc	r21, r25
    1276:	99 f4       	brne	.+38     	; 0x129e <malloc+0x86>
    1278:	10 97       	sbiw	r26, 0x00	; 0
    127a:	61 f0       	breq	.+24     	; 0x1294 <malloc+0x7c>
    127c:	12 96       	adiw	r26, 0x02	; 2
    127e:	0c 93       	st	X, r16
    1280:	12 97       	sbiw	r26, 0x02	; 2
    1282:	13 96       	adiw	r26, 0x03	; 3
    1284:	1c 93       	st	X, r17
    1286:	32 96       	adiw	r30, 0x02	; 2
    1288:	cf 01       	movw	r24, r30
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret
    1294:	00 93 ac 02 	sts	0x02AC, r16	; 0x8002ac <__flp>
    1298:	10 93 ad 02 	sts	0x02AD, r17	; 0x8002ad <__flp+0x1>
    129c:	f4 cf       	rjmp	.-24     	; 0x1286 <malloc+0x6e>
    129e:	21 15       	cp	r18, r1
    12a0:	31 05       	cpc	r19, r1
    12a2:	51 f0       	breq	.+20     	; 0x12b8 <malloc+0xa0>
    12a4:	42 17       	cp	r20, r18
    12a6:	53 07       	cpc	r21, r19
    12a8:	38 f0       	brcs	.+14     	; 0x12b8 <malloc+0xa0>
    12aa:	a9 01       	movw	r20, r18
    12ac:	db 01       	movw	r26, r22
    12ae:	9a 01       	movw	r18, r20
    12b0:	bd 01       	movw	r22, r26
    12b2:	df 01       	movw	r26, r30
    12b4:	f8 01       	movw	r30, r16
    12b6:	c1 cf       	rjmp	.-126    	; 0x123a <malloc+0x22>
    12b8:	ef 01       	movw	r28, r30
    12ba:	f9 cf       	rjmp	.-14     	; 0x12ae <malloc+0x96>
    12bc:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <__flp+0x1>
    12c0:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <__flp>
    12c4:	cd cf       	rjmp	.-102    	; 0x1260 <malloc+0x48>
    12c6:	fe 01       	movw	r30, r28
    12c8:	e2 0f       	add	r30, r18
    12ca:	f3 1f       	adc	r31, r19
    12cc:	81 93       	st	Z+, r24
    12ce:	91 93       	st	Z+, r25
    12d0:	22 50       	subi	r18, 0x02	; 2
    12d2:	31 09       	sbc	r19, r1
    12d4:	39 83       	std	Y+1, r19	; 0x01
    12d6:	28 83       	st	Y, r18
    12d8:	d7 cf       	rjmp	.-82     	; 0x1288 <malloc+0x70>
    12da:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <__brkval>
    12de:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <__brkval+0x1>
    12e2:	23 2b       	or	r18, r19
    12e4:	41 f4       	brne	.+16     	; 0x12f6 <malloc+0xde>
    12e6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__malloc_heap_start>
    12ea:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__malloc_heap_start+0x1>
    12ee:	30 93 ab 02 	sts	0x02AB, r19	; 0x8002ab <__brkval+0x1>
    12f2:	20 93 aa 02 	sts	0x02AA, r18	; 0x8002aa <__brkval>
    12f6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_end>
    12fa:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    12fe:	21 15       	cp	r18, r1
    1300:	31 05       	cpc	r19, r1
    1302:	41 f4       	brne	.+16     	; 0x1314 <malloc+0xfc>
    1304:	2d b7       	in	r18, 0x3d	; 61
    1306:	3e b7       	in	r19, 0x3e	; 62
    1308:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    130c:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    1310:	24 1b       	sub	r18, r20
    1312:	35 0b       	sbc	r19, r21
    1314:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <__brkval>
    1318:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <__brkval+0x1>
    131c:	e2 17       	cp	r30, r18
    131e:	f3 07       	cpc	r31, r19
    1320:	a0 f4       	brcc	.+40     	; 0x134a <malloc+0x132>
    1322:	2e 1b       	sub	r18, r30
    1324:	3f 0b       	sbc	r19, r31
    1326:	28 17       	cp	r18, r24
    1328:	39 07       	cpc	r19, r25
    132a:	78 f0       	brcs	.+30     	; 0x134a <malloc+0x132>
    132c:	ac 01       	movw	r20, r24
    132e:	4e 5f       	subi	r20, 0xFE	; 254
    1330:	5f 4f       	sbci	r21, 0xFF	; 255
    1332:	24 17       	cp	r18, r20
    1334:	35 07       	cpc	r19, r21
    1336:	48 f0       	brcs	.+18     	; 0x134a <malloc+0x132>
    1338:	4e 0f       	add	r20, r30
    133a:	5f 1f       	adc	r21, r31
    133c:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <__brkval+0x1>
    1340:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <__brkval>
    1344:	81 93       	st	Z+, r24
    1346:	91 93       	st	Z+, r25
    1348:	9f cf       	rjmp	.-194    	; 0x1288 <malloc+0x70>
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	e0 e0       	ldi	r30, 0x00	; 0
    134e:	9c cf       	rjmp	.-200    	; 0x1288 <malloc+0x70>

00001350 <free>:
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	e9 f0       	breq	.+58     	; 0x1392 <free+0x42>
    1358:	fc 01       	movw	r30, r24
    135a:	32 97       	sbiw	r30, 0x02	; 2
    135c:	13 82       	std	Z+3, r1	; 0x03
    135e:	12 82       	std	Z+2, r1	; 0x02
    1360:	a0 91 ac 02 	lds	r26, 0x02AC	; 0x8002ac <__flp>
    1364:	b0 91 ad 02 	lds	r27, 0x02AD	; 0x8002ad <__flp+0x1>
    1368:	ed 01       	movw	r28, r26
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	10 97       	sbiw	r26, 0x00	; 0
    1370:	a1 f4       	brne	.+40     	; 0x139a <free+0x4a>
    1372:	20 81       	ld	r18, Z
    1374:	31 81       	ldd	r19, Z+1	; 0x01
    1376:	82 0f       	add	r24, r18
    1378:	93 1f       	adc	r25, r19
    137a:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <__brkval>
    137e:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <__brkval+0x1>
    1382:	28 17       	cp	r18, r24
    1384:	39 07       	cpc	r19, r25
    1386:	09 f0       	breq	.+2      	; 0x138a <free+0x3a>
    1388:	61 c0       	rjmp	.+194    	; 0x144c <free+0xfc>
    138a:	f0 93 ab 02 	sts	0x02AB, r31	; 0x8002ab <__brkval+0x1>
    138e:	e0 93 aa 02 	sts	0x02AA, r30	; 0x8002aa <__brkval>
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret
    1398:	ea 01       	movw	r28, r20
    139a:	ce 17       	cp	r28, r30
    139c:	df 07       	cpc	r29, r31
    139e:	e8 f5       	brcc	.+122    	; 0x141a <free+0xca>
    13a0:	4a 81       	ldd	r20, Y+2	; 0x02
    13a2:	5b 81       	ldd	r21, Y+3	; 0x03
    13a4:	9e 01       	movw	r18, r28
    13a6:	41 15       	cp	r20, r1
    13a8:	51 05       	cpc	r21, r1
    13aa:	b1 f7       	brne	.-20     	; 0x1398 <free+0x48>
    13ac:	e9 01       	movw	r28, r18
    13ae:	fb 83       	std	Y+3, r31	; 0x03
    13b0:	ea 83       	std	Y+2, r30	; 0x02
    13b2:	49 91       	ld	r20, Y+
    13b4:	59 91       	ld	r21, Y+
    13b6:	c4 0f       	add	r28, r20
    13b8:	d5 1f       	adc	r29, r21
    13ba:	ec 17       	cp	r30, r28
    13bc:	fd 07       	cpc	r31, r29
    13be:	61 f4       	brne	.+24     	; 0x13d8 <free+0x88>
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	02 96       	adiw	r24, 0x02	; 2
    13c6:	84 0f       	add	r24, r20
    13c8:	95 1f       	adc	r25, r21
    13ca:	e9 01       	movw	r28, r18
    13cc:	99 83       	std	Y+1, r25	; 0x01
    13ce:	88 83       	st	Y, r24
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	9b 83       	std	Y+3, r25	; 0x03
    13d6:	8a 83       	std	Y+2, r24	; 0x02
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	e0 e0       	ldi	r30, 0x00	; 0
    13dc:	12 96       	adiw	r26, 0x02	; 2
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	13 97       	sbiw	r26, 0x03	; 3
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	b9 f5       	brne	.+110    	; 0x1456 <free+0x106>
    13e8:	2d 91       	ld	r18, X+
    13ea:	3c 91       	ld	r19, X
    13ec:	11 97       	sbiw	r26, 0x01	; 1
    13ee:	cd 01       	movw	r24, r26
    13f0:	02 96       	adiw	r24, 0x02	; 2
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <__brkval>
    13fa:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <__brkval+0x1>
    13fe:	28 17       	cp	r18, r24
    1400:	39 07       	cpc	r19, r25
    1402:	39 f6       	brne	.-114    	; 0x1392 <free+0x42>
    1404:	30 97       	sbiw	r30, 0x00	; 0
    1406:	51 f5       	brne	.+84     	; 0x145c <free+0x10c>
    1408:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <__flp+0x1>
    140c:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <__flp>
    1410:	b0 93 ab 02 	sts	0x02AB, r27	; 0x8002ab <__brkval+0x1>
    1414:	a0 93 aa 02 	sts	0x02AA, r26	; 0x8002aa <__brkval>
    1418:	bc cf       	rjmp	.-136    	; 0x1392 <free+0x42>
    141a:	d3 83       	std	Z+3, r29	; 0x03
    141c:	c2 83       	std	Z+2, r28	; 0x02
    141e:	40 81       	ld	r20, Z
    1420:	51 81       	ldd	r21, Z+1	; 0x01
    1422:	84 0f       	add	r24, r20
    1424:	95 1f       	adc	r25, r21
    1426:	c8 17       	cp	r28, r24
    1428:	d9 07       	cpc	r29, r25
    142a:	61 f4       	brne	.+24     	; 0x1444 <free+0xf4>
    142c:	4e 5f       	subi	r20, 0xFE	; 254
    142e:	5f 4f       	sbci	r21, 0xFF	; 255
    1430:	88 81       	ld	r24, Y
    1432:	99 81       	ldd	r25, Y+1	; 0x01
    1434:	48 0f       	add	r20, r24
    1436:	59 1f       	adc	r21, r25
    1438:	51 83       	std	Z+1, r21	; 0x01
    143a:	40 83       	st	Z, r20
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	9b 81       	ldd	r25, Y+3	; 0x03
    1440:	93 83       	std	Z+3, r25	; 0x03
    1442:	82 83       	std	Z+2, r24	; 0x02
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	09 f0       	breq	.+2      	; 0x144c <free+0xfc>
    144a:	b0 cf       	rjmp	.-160    	; 0x13ac <free+0x5c>
    144c:	f0 93 ad 02 	sts	0x02AD, r31	; 0x8002ad <__flp+0x1>
    1450:	e0 93 ac 02 	sts	0x02AC, r30	; 0x8002ac <__flp>
    1454:	9e cf       	rjmp	.-196    	; 0x1392 <free+0x42>
    1456:	fd 01       	movw	r30, r26
    1458:	dc 01       	movw	r26, r24
    145a:	c0 cf       	rjmp	.-128    	; 0x13dc <free+0x8c>
    145c:	13 82       	std	Z+3, r1	; 0x03
    145e:	12 82       	std	Z+2, r1	; 0x02
    1460:	d7 cf       	rjmp	.-82     	; 0x1410 <free+0xc0>

00001462 <memcmp>:
    1462:	fb 01       	movw	r30, r22
    1464:	dc 01       	movw	r26, r24
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <memcmp+0xe>
    1468:	8d 91       	ld	r24, X+
    146a:	01 90       	ld	r0, Z+
    146c:	80 19       	sub	r24, r0
    146e:	21 f4       	brne	.+8      	; 0x1478 <memcmp+0x16>
    1470:	41 50       	subi	r20, 0x01	; 1
    1472:	50 40       	sbci	r21, 0x00	; 0
    1474:	c8 f7       	brcc	.-14     	; 0x1468 <memcmp+0x6>
    1476:	88 1b       	sub	r24, r24
    1478:	99 0b       	sbc	r25, r25
    147a:	08 95       	ret

0000147c <strcat>:
    147c:	fb 01       	movw	r30, r22
    147e:	dc 01       	movw	r26, r24
    1480:	0d 90       	ld	r0, X+
    1482:	00 20       	and	r0, r0
    1484:	e9 f7       	brne	.-6      	; 0x1480 <strcat+0x4>
    1486:	11 97       	sbiw	r26, 0x01	; 1
    1488:	01 90       	ld	r0, Z+
    148a:	0d 92       	st	X+, r0
    148c:	00 20       	and	r0, r0
    148e:	e1 f7       	brne	.-8      	; 0x1488 <strcat+0xc>
    1490:	08 95       	ret

00001492 <strcpy>:
    1492:	fb 01       	movw	r30, r22
    1494:	dc 01       	movw	r26, r24
    1496:	01 90       	ld	r0, Z+
    1498:	0d 92       	st	X+, r0
    149a:	00 20       	and	r0, r0
    149c:	e1 f7       	brne	.-8      	; 0x1496 <strcpy+0x4>
    149e:	08 95       	ret

000014a0 <strncpy>:
    14a0:	fb 01       	movw	r30, r22
    14a2:	dc 01       	movw	r26, r24
    14a4:	41 50       	subi	r20, 0x01	; 1
    14a6:	50 40       	sbci	r21, 0x00	; 0
    14a8:	48 f0       	brcs	.+18     	; 0x14bc <strncpy+0x1c>
    14aa:	01 90       	ld	r0, Z+
    14ac:	0d 92       	st	X+, r0
    14ae:	00 20       	and	r0, r0
    14b0:	c9 f7       	brne	.-14     	; 0x14a4 <strncpy+0x4>
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <strncpy+0x16>
    14b4:	1d 92       	st	X+, r1
    14b6:	41 50       	subi	r20, 0x01	; 1
    14b8:	50 40       	sbci	r21, 0x00	; 0
    14ba:	e0 f7       	brcc	.-8      	; 0x14b4 <strncpy+0x14>
    14bc:	08 95       	ret

000014be <snprintf>:
    14be:	ae e0       	ldi	r26, 0x0E	; 14
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e6       	ldi	r30, 0x65	; 101
    14c4:	fa e0       	ldi	r31, 0x0A	; 10
    14c6:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__prologue_saves__+0x1c>
    14ca:	0d 89       	ldd	r16, Y+21	; 0x15
    14cc:	1e 89       	ldd	r17, Y+22	; 0x16
    14ce:	8f 89       	ldd	r24, Y+23	; 0x17
    14d0:	98 8d       	ldd	r25, Y+24	; 0x18
    14d2:	26 e0       	ldi	r18, 0x06	; 6
    14d4:	2c 83       	std	Y+4, r18	; 0x04
    14d6:	1a 83       	std	Y+2, r17	; 0x02
    14d8:	09 83       	std	Y+1, r16	; 0x01
    14da:	97 ff       	sbrs	r25, 7
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <snprintf+0x24>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e8       	ldi	r25, 0x80	; 128
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	ae 01       	movw	r20, r28
    14ea:	45 5e       	subi	r20, 0xE5	; 229
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255
    14ee:	69 8d       	ldd	r22, Y+25	; 0x19
    14f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	0e 94 8f 0a 	call	0x151e	; 0x151e <vfprintf>
    14fa:	4d 81       	ldd	r20, Y+5	; 0x05
    14fc:	5e 81       	ldd	r21, Y+6	; 0x06
    14fe:	57 fd       	sbrc	r21, 7
    1500:	0a c0       	rjmp	.+20     	; 0x1516 <snprintf+0x58>
    1502:	2f 81       	ldd	r18, Y+7	; 0x07
    1504:	38 85       	ldd	r19, Y+8	; 0x08
    1506:	42 17       	cp	r20, r18
    1508:	53 07       	cpc	r21, r19
    150a:	0c f4       	brge	.+2      	; 0x150e <snprintf+0x50>
    150c:	9a 01       	movw	r18, r20
    150e:	02 0f       	add	r16, r18
    1510:	13 1f       	adc	r17, r19
    1512:	f8 01       	movw	r30, r16
    1514:	10 82       	st	Z, r1
    1516:	2e 96       	adiw	r28, 0x0e	; 14
    1518:	e4 e0       	ldi	r30, 0x04	; 4
    151a:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__epilogue_restores__+0x1c>

0000151e <vfprintf>:
    151e:	ab e0       	ldi	r26, 0x0B	; 11
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e9       	ldi	r30, 0x95	; 149
    1524:	fa e0       	ldi	r31, 0x0A	; 10
    1526:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__prologue_saves__>
    152a:	7c 01       	movw	r14, r24
    152c:	3b 01       	movw	r6, r22
    152e:	8a 01       	movw	r16, r20
    1530:	fc 01       	movw	r30, r24
    1532:	17 82       	std	Z+7, r1	; 0x07
    1534:	16 82       	std	Z+6, r1	; 0x06
    1536:	83 81       	ldd	r24, Z+3	; 0x03
    1538:	81 ff       	sbrs	r24, 1
    153a:	c8 c1       	rjmp	.+912    	; 0x18cc <vfprintf+0x3ae>
    153c:	ce 01       	movw	r24, r28
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	5c 01       	movw	r10, r24
    1542:	f7 01       	movw	r30, r14
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	f3 01       	movw	r30, r6
    1548:	93 fd       	sbrc	r25, 3
    154a:	85 91       	lpm	r24, Z+
    154c:	93 ff       	sbrs	r25, 3
    154e:	81 91       	ld	r24, Z+
    1550:	3f 01       	movw	r6, r30
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <vfprintf+0x3a>
    1556:	53 c1       	rjmp	.+678    	; 0x17fe <vfprintf+0x2e0>
    1558:	85 32       	cpi	r24, 0x25	; 37
    155a:	39 f4       	brne	.+14     	; 0x156a <vfprintf+0x4c>
    155c:	93 fd       	sbrc	r25, 3
    155e:	85 91       	lpm	r24, Z+
    1560:	93 ff       	sbrs	r25, 3
    1562:	81 91       	ld	r24, Z+
    1564:	3f 01       	movw	r6, r30
    1566:	85 32       	cpi	r24, 0x25	; 37
    1568:	29 f4       	brne	.+10     	; 0x1574 <vfprintf+0x56>
    156a:	b7 01       	movw	r22, r14
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    1572:	e7 cf       	rjmp	.-50     	; 0x1542 <vfprintf+0x24>
    1574:	91 2c       	mov	r9, r1
    1576:	21 2c       	mov	r2, r1
    1578:	31 2c       	mov	r3, r1
    157a:	ff e1       	ldi	r31, 0x1F	; 31
    157c:	f3 15       	cp	r31, r3
    157e:	38 f0       	brcs	.+14     	; 0x158e <vfprintf+0x70>
    1580:	8b 32       	cpi	r24, 0x2B	; 43
    1582:	11 f1       	breq	.+68     	; 0x15c8 <vfprintf+0xaa>
    1584:	90 f4       	brcc	.+36     	; 0x15aa <vfprintf+0x8c>
    1586:	80 32       	cpi	r24, 0x20	; 32
    1588:	09 f1       	breq	.+66     	; 0x15cc <vfprintf+0xae>
    158a:	83 32       	cpi	r24, 0x23	; 35
    158c:	29 f1       	breq	.+74     	; 0x15d8 <vfprintf+0xba>
    158e:	37 fc       	sbrc	r3, 7
    1590:	3c c0       	rjmp	.+120    	; 0x160a <vfprintf+0xec>
    1592:	20 ed       	ldi	r18, 0xD0	; 208
    1594:	28 0f       	add	r18, r24
    1596:	2a 30       	cpi	r18, 0x0A	; 10
    1598:	50 f5       	brcc	.+84     	; 0x15ee <vfprintf+0xd0>
    159a:	36 fe       	sbrs	r3, 6
    159c:	20 c0       	rjmp	.+64     	; 0x15de <vfprintf+0xc0>
    159e:	8a e0       	ldi	r24, 0x0A	; 10
    15a0:	98 9e       	mul	r9, r24
    15a2:	20 0d       	add	r18, r0
    15a4:	11 24       	eor	r1, r1
    15a6:	92 2e       	mov	r9, r18
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <vfprintf+0x98>
    15aa:	8d 32       	cpi	r24, 0x2D	; 45
    15ac:	91 f0       	breq	.+36     	; 0x15d2 <vfprintf+0xb4>
    15ae:	80 33       	cpi	r24, 0x30	; 48
    15b0:	71 f7       	brne	.-36     	; 0x158e <vfprintf+0x70>
    15b2:	68 94       	set
    15b4:	30 f8       	bld	r3, 0
    15b6:	f3 01       	movw	r30, r6
    15b8:	93 fd       	sbrc	r25, 3
    15ba:	85 91       	lpm	r24, Z+
    15bc:	93 ff       	sbrs	r25, 3
    15be:	81 91       	ld	r24, Z+
    15c0:	3f 01       	movw	r6, r30
    15c2:	81 11       	cpse	r24, r1
    15c4:	da cf       	rjmp	.-76     	; 0x157a <vfprintf+0x5c>
    15c6:	21 c0       	rjmp	.+66     	; 0x160a <vfprintf+0xec>
    15c8:	68 94       	set
    15ca:	31 f8       	bld	r3, 1
    15cc:	68 94       	set
    15ce:	32 f8       	bld	r3, 2
    15d0:	f2 cf       	rjmp	.-28     	; 0x15b6 <vfprintf+0x98>
    15d2:	68 94       	set
    15d4:	33 f8       	bld	r3, 3
    15d6:	ef cf       	rjmp	.-34     	; 0x15b6 <vfprintf+0x98>
    15d8:	68 94       	set
    15da:	34 f8       	bld	r3, 4
    15dc:	ec cf       	rjmp	.-40     	; 0x15b6 <vfprintf+0x98>
    15de:	ea e0       	ldi	r30, 0x0A	; 10
    15e0:	2e 9e       	mul	r2, r30
    15e2:	20 0d       	add	r18, r0
    15e4:	11 24       	eor	r1, r1
    15e6:	22 2e       	mov	r2, r18
    15e8:	68 94       	set
    15ea:	35 f8       	bld	r3, 5
    15ec:	e4 cf       	rjmp	.-56     	; 0x15b6 <vfprintf+0x98>
    15ee:	8e 32       	cpi	r24, 0x2E	; 46
    15f0:	29 f4       	brne	.+10     	; 0x15fc <vfprintf+0xde>
    15f2:	36 fc       	sbrc	r3, 6
    15f4:	04 c1       	rjmp	.+520    	; 0x17fe <vfprintf+0x2e0>
    15f6:	68 94       	set
    15f8:	36 f8       	bld	r3, 6
    15fa:	dd cf       	rjmp	.-70     	; 0x15b6 <vfprintf+0x98>
    15fc:	8c 36       	cpi	r24, 0x6C	; 108
    15fe:	19 f4       	brne	.+6      	; 0x1606 <vfprintf+0xe8>
    1600:	68 94       	set
    1602:	37 f8       	bld	r3, 7
    1604:	d8 cf       	rjmp	.-80     	; 0x15b6 <vfprintf+0x98>
    1606:	88 36       	cpi	r24, 0x68	; 104
    1608:	b1 f2       	breq	.-84     	; 0x15b6 <vfprintf+0x98>
    160a:	98 2f       	mov	r25, r24
    160c:	9f 7d       	andi	r25, 0xDF	; 223
    160e:	95 54       	subi	r25, 0x45	; 69
    1610:	93 30       	cpi	r25, 0x03	; 3
    1612:	e0 f0       	brcs	.+56     	; 0x164c <vfprintf+0x12e>
    1614:	83 36       	cpi	r24, 0x63	; 99
    1616:	a1 f1       	breq	.+104    	; 0x1680 <vfprintf+0x162>
    1618:	83 37       	cpi	r24, 0x73	; 115
    161a:	c1 f1       	breq	.+112    	; 0x168c <vfprintf+0x16e>
    161c:	83 35       	cpi	r24, 0x53	; 83
    161e:	09 f0       	breq	.+2      	; 0x1622 <vfprintf+0x104>
    1620:	63 c0       	rjmp	.+198    	; 0x16e8 <vfprintf+0x1ca>
    1622:	28 01       	movw	r4, r16
    1624:	f2 e0       	ldi	r31, 0x02	; 2
    1626:	4f 0e       	add	r4, r31
    1628:	51 1c       	adc	r5, r1
    162a:	f8 01       	movw	r30, r16
    162c:	c0 80       	ld	r12, Z
    162e:	d1 80       	ldd	r13, Z+1	; 0x01
    1630:	69 2d       	mov	r22, r9
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	36 fc       	sbrc	r3, 6
    1636:	02 c0       	rjmp	.+4      	; 0x163c <vfprintf+0x11e>
    1638:	6f ef       	ldi	r22, 0xFF	; 255
    163a:	7f ef       	ldi	r23, 0xFF	; 255
    163c:	c6 01       	movw	r24, r12
    163e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <strnlen_P>
    1642:	4c 01       	movw	r8, r24
    1644:	68 94       	set
    1646:	37 f8       	bld	r3, 7
    1648:	82 01       	movw	r16, r4
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <vfprintf+0x142>
    164c:	0c 5f       	subi	r16, 0xFC	; 252
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	ff e3       	ldi	r31, 0x3F	; 63
    1652:	f9 83       	std	Y+1, r31	; 0x01
    1654:	88 24       	eor	r8, r8
    1656:	83 94       	inc	r8
    1658:	91 2c       	mov	r9, r1
    165a:	65 01       	movw	r12, r10
    165c:	e8 94       	clt
    165e:	37 f8       	bld	r3, 7
    1660:	33 fe       	sbrs	r3, 3
    1662:	2d c0       	rjmp	.+90     	; 0x16be <vfprintf+0x1a0>
    1664:	52 2c       	mov	r5, r2
    1666:	81 14       	cp	r8, r1
    1668:	91 04       	cpc	r9, r1
    166a:	71 f5       	brne	.+92     	; 0x16c8 <vfprintf+0x1aa>
    166c:	55 20       	and	r5, r5
    166e:	09 f4       	brne	.+2      	; 0x1672 <vfprintf+0x154>
    1670:	68 cf       	rjmp	.-304    	; 0x1542 <vfprintf+0x24>
    1672:	b7 01       	movw	r22, r14
    1674:	80 e2       	ldi	r24, 0x20	; 32
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    167c:	5a 94       	dec	r5
    167e:	f6 cf       	rjmp	.-20     	; 0x166c <vfprintf+0x14e>
    1680:	f8 01       	movw	r30, r16
    1682:	80 81       	ld	r24, Z
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	0e 5f       	subi	r16, 0xFE	; 254
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	e4 cf       	rjmp	.-56     	; 0x1654 <vfprintf+0x136>
    168c:	28 01       	movw	r4, r16
    168e:	f2 e0       	ldi	r31, 0x02	; 2
    1690:	4f 0e       	add	r4, r31
    1692:	51 1c       	adc	r5, r1
    1694:	f8 01       	movw	r30, r16
    1696:	c0 80       	ld	r12, Z
    1698:	d1 80       	ldd	r13, Z+1	; 0x01
    169a:	69 2d       	mov	r22, r9
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	36 fc       	sbrc	r3, 6
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x188>
    16a2:	6f ef       	ldi	r22, 0xFF	; 255
    16a4:	7f ef       	ldi	r23, 0xFF	; 255
    16a6:	c6 01       	movw	r24, r12
    16a8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <strnlen>
    16ac:	4c 01       	movw	r8, r24
    16ae:	82 01       	movw	r16, r4
    16b0:	d5 cf       	rjmp	.-86     	; 0x165c <vfprintf+0x13e>
    16b2:	b7 01       	movw	r22, r14
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    16bc:	2a 94       	dec	r2
    16be:	28 14       	cp	r2, r8
    16c0:	19 04       	cpc	r1, r9
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <vfprintf+0x1a8>
    16c4:	b0 f7       	brcc	.-20     	; 0x16b2 <vfprintf+0x194>
    16c6:	ce cf       	rjmp	.-100    	; 0x1664 <vfprintf+0x146>
    16c8:	f6 01       	movw	r30, r12
    16ca:	37 fc       	sbrc	r3, 7
    16cc:	85 91       	lpm	r24, Z+
    16ce:	37 fe       	sbrs	r3, 7
    16d0:	81 91       	ld	r24, Z+
    16d2:	6f 01       	movw	r12, r30
    16d4:	b7 01       	movw	r22, r14
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    16dc:	51 10       	cpse	r5, r1
    16de:	5a 94       	dec	r5
    16e0:	f1 e0       	ldi	r31, 0x01	; 1
    16e2:	8f 1a       	sub	r8, r31
    16e4:	91 08       	sbc	r9, r1
    16e6:	bf cf       	rjmp	.-130    	; 0x1666 <vfprintf+0x148>
    16e8:	84 36       	cpi	r24, 0x64	; 100
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <vfprintf+0x1d4>
    16ec:	89 36       	cpi	r24, 0x69	; 105
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <vfprintf+0x1d4>
    16f0:	77 c0       	rjmp	.+238    	; 0x17e0 <vfprintf+0x2c2>
    16f2:	f8 01       	movw	r30, r16
    16f4:	37 fe       	sbrs	r3, 7
    16f6:	6b c0       	rjmp	.+214    	; 0x17ce <vfprintf+0x2b0>
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	0c 5f       	subi	r16, 0xFC	; 252
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	f3 2d       	mov	r31, r3
    1706:	ff 76       	andi	r31, 0x6F	; 111
    1708:	3f 2e       	mov	r3, r31
    170a:	97 ff       	sbrs	r25, 7
    170c:	09 c0       	rjmp	.+18     	; 0x1720 <vfprintf+0x202>
    170e:	90 95       	com	r25
    1710:	80 95       	com	r24
    1712:	70 95       	com	r23
    1714:	61 95       	neg	r22
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	8f 4f       	sbci	r24, 0xFF	; 255
    171a:	9f 4f       	sbci	r25, 0xFF	; 255
    171c:	68 94       	set
    171e:	37 f8       	bld	r3, 7
    1720:	2a e0       	ldi	r18, 0x0A	; 10
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	a5 01       	movw	r20, r10
    1726:	0e 94 af 0c 	call	0x195e	; 0x195e <__ultoa_invert>
    172a:	c8 2e       	mov	r12, r24
    172c:	ca 18       	sub	r12, r10
    172e:	8c 2c       	mov	r8, r12
    1730:	43 2c       	mov	r4, r3
    1732:	36 fe       	sbrs	r3, 6
    1734:	0c c0       	rjmp	.+24     	; 0x174e <vfprintf+0x230>
    1736:	e8 94       	clt
    1738:	40 f8       	bld	r4, 0
    173a:	c9 14       	cp	r12, r9
    173c:	40 f4       	brcc	.+16     	; 0x174e <vfprintf+0x230>
    173e:	34 fe       	sbrs	r3, 4
    1740:	05 c0       	rjmp	.+10     	; 0x174c <vfprintf+0x22e>
    1742:	32 fc       	sbrc	r3, 2
    1744:	03 c0       	rjmp	.+6      	; 0x174c <vfprintf+0x22e>
    1746:	f3 2d       	mov	r31, r3
    1748:	fe 7e       	andi	r31, 0xEE	; 238
    174a:	4f 2e       	mov	r4, r31
    174c:	89 2c       	mov	r8, r9
    174e:	44 fe       	sbrs	r4, 4
    1750:	95 c0       	rjmp	.+298    	; 0x187c <vfprintf+0x35e>
    1752:	fe 01       	movw	r30, r28
    1754:	ec 0d       	add	r30, r12
    1756:	f1 1d       	adc	r31, r1
    1758:	80 81       	ld	r24, Z
    175a:	80 33       	cpi	r24, 0x30	; 48
    175c:	09 f0       	breq	.+2      	; 0x1760 <vfprintf+0x242>
    175e:	87 c0       	rjmp	.+270    	; 0x186e <vfprintf+0x350>
    1760:	24 2d       	mov	r18, r4
    1762:	29 7e       	andi	r18, 0xE9	; 233
    1764:	42 2e       	mov	r4, r18
    1766:	84 2d       	mov	r24, r4
    1768:	88 70       	andi	r24, 0x08	; 8
    176a:	58 2e       	mov	r5, r24
    176c:	43 fc       	sbrc	r4, 3
    176e:	95 c0       	rjmp	.+298    	; 0x189a <vfprintf+0x37c>
    1770:	40 fe       	sbrs	r4, 0
    1772:	8f c0       	rjmp	.+286    	; 0x1892 <vfprintf+0x374>
    1774:	9c 2c       	mov	r9, r12
    1776:	82 14       	cp	r8, r2
    1778:	18 f4       	brcc	.+6      	; 0x1780 <vfprintf+0x262>
    177a:	2c 0c       	add	r2, r12
    177c:	92 2c       	mov	r9, r2
    177e:	98 18       	sub	r9, r8
    1780:	44 fe       	sbrs	r4, 4
    1782:	91 c0       	rjmp	.+290    	; 0x18a6 <vfprintf+0x388>
    1784:	b7 01       	movw	r22, r14
    1786:	80 e3       	ldi	r24, 0x30	; 48
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    178e:	42 fe       	sbrs	r4, 2
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <vfprintf+0x286>
    1792:	88 e7       	ldi	r24, 0x78	; 120
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	41 fe       	sbrs	r4, 1
    1798:	02 c0       	rjmp	.+4      	; 0x179e <vfprintf+0x280>
    179a:	88 e5       	ldi	r24, 0x58	; 88
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	b7 01       	movw	r22, r14
    17a0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    17a4:	c9 14       	cp	r12, r9
    17a6:	08 f4       	brcc	.+2      	; 0x17aa <vfprintf+0x28c>
    17a8:	8a c0       	rjmp	.+276    	; 0x18be <vfprintf+0x3a0>
    17aa:	ca 94       	dec	r12
    17ac:	d1 2c       	mov	r13, r1
    17ae:	9f ef       	ldi	r25, 0xFF	; 255
    17b0:	c9 1a       	sub	r12, r25
    17b2:	d9 0a       	sbc	r13, r25
    17b4:	ca 0c       	add	r12, r10
    17b6:	db 1c       	adc	r13, r11
    17b8:	f6 01       	movw	r30, r12
    17ba:	82 91       	ld	r24, -Z
    17bc:	6f 01       	movw	r12, r30
    17be:	b7 01       	movw	r22, r14
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    17c6:	ac 14       	cp	r10, r12
    17c8:	bd 04       	cpc	r11, r13
    17ca:	b1 f7       	brne	.-20     	; 0x17b8 <vfprintf+0x29a>
    17cc:	4f cf       	rjmp	.-354    	; 0x166c <vfprintf+0x14e>
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	07 2e       	mov	r0, r23
    17d4:	00 0c       	add	r0, r0
    17d6:	88 0b       	sbc	r24, r24
    17d8:	99 0b       	sbc	r25, r25
    17da:	0e 5f       	subi	r16, 0xFE	; 254
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	92 cf       	rjmp	.-220    	; 0x1704 <vfprintf+0x1e6>
    17e0:	d3 2c       	mov	r13, r3
    17e2:	e8 94       	clt
    17e4:	d4 f8       	bld	r13, 4
    17e6:	2a e0       	ldi	r18, 0x0A	; 10
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	85 37       	cpi	r24, 0x75	; 117
    17ec:	39 f1       	breq	.+78     	; 0x183c <vfprintf+0x31e>
    17ee:	23 2d       	mov	r18, r3
    17f0:	29 7f       	andi	r18, 0xF9	; 249
    17f2:	d2 2e       	mov	r13, r18
    17f4:	8f 36       	cpi	r24, 0x6F	; 111
    17f6:	01 f1       	breq	.+64     	; 0x1838 <vfprintf+0x31a>
    17f8:	48 f4       	brcc	.+18     	; 0x180c <vfprintf+0x2ee>
    17fa:	88 35       	cpi	r24, 0x58	; 88
    17fc:	a9 f0       	breq	.+42     	; 0x1828 <vfprintf+0x30a>
    17fe:	f7 01       	movw	r30, r14
    1800:	86 81       	ldd	r24, Z+6	; 0x06
    1802:	97 81       	ldd	r25, Z+7	; 0x07
    1804:	2b 96       	adiw	r28, 0x0b	; 11
    1806:	e2 e1       	ldi	r30, 0x12	; 18
    1808:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__epilogue_restores__>
    180c:	80 37       	cpi	r24, 0x70	; 112
    180e:	49 f0       	breq	.+18     	; 0x1822 <vfprintf+0x304>
    1810:	88 37       	cpi	r24, 0x78	; 120
    1812:	a9 f7       	brne	.-22     	; 0x17fe <vfprintf+0x2e0>
    1814:	d4 fe       	sbrs	r13, 4
    1816:	02 c0       	rjmp	.+4      	; 0x181c <vfprintf+0x2fe>
    1818:	68 94       	set
    181a:	d2 f8       	bld	r13, 2
    181c:	20 e1       	ldi	r18, 0x10	; 16
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	0d c0       	rjmp	.+26     	; 0x183c <vfprintf+0x31e>
    1822:	68 94       	set
    1824:	d4 f8       	bld	r13, 4
    1826:	f6 cf       	rjmp	.-20     	; 0x1814 <vfprintf+0x2f6>
    1828:	34 fe       	sbrs	r3, 4
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <vfprintf+0x314>
    182c:	82 2f       	mov	r24, r18
    182e:	86 60       	ori	r24, 0x06	; 6
    1830:	d8 2e       	mov	r13, r24
    1832:	20 e1       	ldi	r18, 0x10	; 16
    1834:	32 e0       	ldi	r19, 0x02	; 2
    1836:	02 c0       	rjmp	.+4      	; 0x183c <vfprintf+0x31e>
    1838:	28 e0       	ldi	r18, 0x08	; 8
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	f8 01       	movw	r30, r16
    183e:	d7 fe       	sbrs	r13, 7
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <vfprintf+0x342>
    1842:	60 81       	ld	r22, Z
    1844:	71 81       	ldd	r23, Z+1	; 0x01
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	0c 5f       	subi	r16, 0xFC	; 252
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
    184e:	a5 01       	movw	r20, r10
    1850:	0e 94 af 0c 	call	0x195e	; 0x195e <__ultoa_invert>
    1854:	c8 2e       	mov	r12, r24
    1856:	ca 18       	sub	r12, r10
    1858:	3d 2c       	mov	r3, r13
    185a:	e8 94       	clt
    185c:	37 f8       	bld	r3, 7
    185e:	67 cf       	rjmp	.-306    	; 0x172e <vfprintf+0x210>
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 5f       	subi	r16, 0xFE	; 254
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	f0 cf       	rjmp	.-32     	; 0x184e <vfprintf+0x330>
    186e:	42 fc       	sbrc	r4, 2
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <vfprintf+0x358>
    1872:	83 94       	inc	r8
    1874:	78 cf       	rjmp	.-272    	; 0x1766 <vfprintf+0x248>
    1876:	83 94       	inc	r8
    1878:	83 94       	inc	r8
    187a:	75 cf       	rjmp	.-278    	; 0x1766 <vfprintf+0x248>
    187c:	84 2d       	mov	r24, r4
    187e:	86 78       	andi	r24, 0x86	; 134
    1880:	09 f4       	brne	.+2      	; 0x1884 <vfprintf+0x366>
    1882:	71 cf       	rjmp	.-286    	; 0x1766 <vfprintf+0x248>
    1884:	f6 cf       	rjmp	.-20     	; 0x1872 <vfprintf+0x354>
    1886:	b7 01       	movw	r22, r14
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    1890:	83 94       	inc	r8
    1892:	82 14       	cp	r8, r2
    1894:	c0 f3       	brcs	.-16     	; 0x1886 <vfprintf+0x368>
    1896:	51 2c       	mov	r5, r1
    1898:	73 cf       	rjmp	.-282    	; 0x1780 <vfprintf+0x262>
    189a:	52 2c       	mov	r5, r2
    189c:	58 18       	sub	r5, r8
    189e:	82 14       	cp	r8, r2
    18a0:	08 f4       	brcc	.+2      	; 0x18a4 <vfprintf+0x386>
    18a2:	6e cf       	rjmp	.-292    	; 0x1780 <vfprintf+0x262>
    18a4:	f8 cf       	rjmp	.-16     	; 0x1896 <vfprintf+0x378>
    18a6:	84 2d       	mov	r24, r4
    18a8:	86 78       	andi	r24, 0x86	; 134
    18aa:	09 f4       	brne	.+2      	; 0x18ae <vfprintf+0x390>
    18ac:	7b cf       	rjmp	.-266    	; 0x17a4 <vfprintf+0x286>
    18ae:	8b e2       	ldi	r24, 0x2B	; 43
    18b0:	41 fe       	sbrs	r4, 1
    18b2:	80 e2       	ldi	r24, 0x20	; 32
    18b4:	47 fc       	sbrc	r4, 7
    18b6:	8d e2       	ldi	r24, 0x2D	; 45
    18b8:	b7 01       	movw	r22, r14
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	71 cf       	rjmp	.-286    	; 0x17a0 <vfprintf+0x282>
    18be:	b7 01       	movw	r22, r14
    18c0:	80 e3       	ldi	r24, 0x30	; 48
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fputc>
    18c8:	9a 94       	dec	r9
    18ca:	6c cf       	rjmp	.-296    	; 0x17a4 <vfprintf+0x286>
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
    18ce:	9f ef       	ldi	r25, 0xFF	; 255
    18d0:	99 cf       	rjmp	.-206    	; 0x1804 <vfprintf+0x2e6>

000018d2 <strnlen_P>:
    18d2:	fc 01       	movw	r30, r24
    18d4:	05 90       	lpm	r0, Z+
    18d6:	61 50       	subi	r22, 0x01	; 1
    18d8:	70 40       	sbci	r23, 0x00	; 0
    18da:	01 10       	cpse	r0, r1
    18dc:	d8 f7       	brcc	.-10     	; 0x18d4 <strnlen_P+0x2>
    18de:	80 95       	com	r24
    18e0:	90 95       	com	r25
    18e2:	8e 0f       	add	r24, r30
    18e4:	9f 1f       	adc	r25, r31
    18e6:	08 95       	ret

000018e8 <strnlen>:
    18e8:	fc 01       	movw	r30, r24
    18ea:	61 50       	subi	r22, 0x01	; 1
    18ec:	70 40       	sbci	r23, 0x00	; 0
    18ee:	01 90       	ld	r0, Z+
    18f0:	01 10       	cpse	r0, r1
    18f2:	d8 f7       	brcc	.-10     	; 0x18ea <strnlen+0x2>
    18f4:	80 95       	com	r24
    18f6:	90 95       	com	r25
    18f8:	8e 0f       	add	r24, r30
    18fa:	9f 1f       	adc	r25, r31
    18fc:	08 95       	ret

000018fe <fputc>:
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	18 2f       	mov	r17, r24
    1908:	09 2f       	mov	r16, r25
    190a:	eb 01       	movw	r28, r22
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	81 fd       	sbrc	r24, 1
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <fputc+0x26>
    1912:	1f ef       	ldi	r17, 0xFF	; 255
    1914:	0f ef       	ldi	r16, 0xFF	; 255
    1916:	81 2f       	mov	r24, r17
    1918:	90 2f       	mov	r25, r16
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret
    1924:	82 ff       	sbrs	r24, 2
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <fputc+0x52>
    1928:	2e 81       	ldd	r18, Y+6	; 0x06
    192a:	3f 81       	ldd	r19, Y+7	; 0x07
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	28 17       	cp	r18, r24
    1932:	39 07       	cpc	r19, r25
    1934:	3c f4       	brge	.+14     	; 0x1944 <fputc+0x46>
    1936:	e8 81       	ld	r30, Y
    1938:	f9 81       	ldd	r31, Y+1	; 0x01
    193a:	cf 01       	movw	r24, r30
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	99 83       	std	Y+1, r25	; 0x01
    1940:	88 83       	st	Y, r24
    1942:	10 83       	st	Z, r17
    1944:	8e 81       	ldd	r24, Y+6	; 0x06
    1946:	9f 81       	ldd	r25, Y+7	; 0x07
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	9f 83       	std	Y+7, r25	; 0x07
    194c:	8e 83       	std	Y+6, r24	; 0x06
    194e:	e3 cf       	rjmp	.-58     	; 0x1916 <fputc+0x18>
    1950:	e8 85       	ldd	r30, Y+8	; 0x08
    1952:	f9 85       	ldd	r31, Y+9	; 0x09
    1954:	81 2f       	mov	r24, r17
    1956:	09 95       	icall
    1958:	89 2b       	or	r24, r25
    195a:	a1 f3       	breq	.-24     	; 0x1944 <fputc+0x46>
    195c:	da cf       	rjmp	.-76     	; 0x1912 <fputc+0x14>

0000195e <__ultoa_invert>:
    195e:	fa 01       	movw	r30, r20
    1960:	aa 27       	eor	r26, r26
    1962:	28 30       	cpi	r18, 0x08	; 8
    1964:	51 f1       	breq	.+84     	; 0x19ba <__ultoa_invert+0x5c>
    1966:	20 31       	cpi	r18, 0x10	; 16
    1968:	81 f1       	breq	.+96     	; 0x19ca <__ultoa_invert+0x6c>
    196a:	e8 94       	clt
    196c:	6f 93       	push	r22
    196e:	6e 7f       	andi	r22, 0xFE	; 254
    1970:	6e 5f       	subi	r22, 0xFE	; 254
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	8f 4f       	sbci	r24, 0xFF	; 255
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	af 4f       	sbci	r26, 0xFF	; 255
    197a:	b1 e0       	ldi	r27, 0x01	; 1
    197c:	3e d0       	rcall	.+124    	; 0x19fa <__ultoa_invert+0x9c>
    197e:	b4 e0       	ldi	r27, 0x04	; 4
    1980:	3c d0       	rcall	.+120    	; 0x19fa <__ultoa_invert+0x9c>
    1982:	67 0f       	add	r22, r23
    1984:	78 1f       	adc	r23, r24
    1986:	89 1f       	adc	r24, r25
    1988:	9a 1f       	adc	r25, r26
    198a:	a1 1d       	adc	r26, r1
    198c:	68 0f       	add	r22, r24
    198e:	79 1f       	adc	r23, r25
    1990:	8a 1f       	adc	r24, r26
    1992:	91 1d       	adc	r25, r1
    1994:	a1 1d       	adc	r26, r1
    1996:	6a 0f       	add	r22, r26
    1998:	71 1d       	adc	r23, r1
    199a:	81 1d       	adc	r24, r1
    199c:	91 1d       	adc	r25, r1
    199e:	a1 1d       	adc	r26, r1
    19a0:	20 d0       	rcall	.+64     	; 0x19e2 <__ultoa_invert+0x84>
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <__ultoa_invert+0x48>
    19a4:	68 94       	set
    19a6:	3f 91       	pop	r19
    19a8:	2a e0       	ldi	r18, 0x0A	; 10
    19aa:	26 9f       	mul	r18, r22
    19ac:	11 24       	eor	r1, r1
    19ae:	30 19       	sub	r19, r0
    19b0:	30 5d       	subi	r19, 0xD0	; 208
    19b2:	31 93       	st	Z+, r19
    19b4:	de f6       	brtc	.-74     	; 0x196c <__ultoa_invert+0xe>
    19b6:	cf 01       	movw	r24, r30
    19b8:	08 95       	ret
    19ba:	46 2f       	mov	r20, r22
    19bc:	47 70       	andi	r20, 0x07	; 7
    19be:	40 5d       	subi	r20, 0xD0	; 208
    19c0:	41 93       	st	Z+, r20
    19c2:	b3 e0       	ldi	r27, 0x03	; 3
    19c4:	0f d0       	rcall	.+30     	; 0x19e4 <__ultoa_invert+0x86>
    19c6:	c9 f7       	brne	.-14     	; 0x19ba <__ultoa_invert+0x5c>
    19c8:	f6 cf       	rjmp	.-20     	; 0x19b6 <__ultoa_invert+0x58>
    19ca:	46 2f       	mov	r20, r22
    19cc:	4f 70       	andi	r20, 0x0F	; 15
    19ce:	40 5d       	subi	r20, 0xD0	; 208
    19d0:	4a 33       	cpi	r20, 0x3A	; 58
    19d2:	18 f0       	brcs	.+6      	; 0x19da <__ultoa_invert+0x7c>
    19d4:	49 5d       	subi	r20, 0xD9	; 217
    19d6:	31 fd       	sbrc	r19, 1
    19d8:	40 52       	subi	r20, 0x20	; 32
    19da:	41 93       	st	Z+, r20
    19dc:	02 d0       	rcall	.+4      	; 0x19e2 <__ultoa_invert+0x84>
    19de:	a9 f7       	brne	.-22     	; 0x19ca <__ultoa_invert+0x6c>
    19e0:	ea cf       	rjmp	.-44     	; 0x19b6 <__ultoa_invert+0x58>
    19e2:	b4 e0       	ldi	r27, 0x04	; 4
    19e4:	a6 95       	lsr	r26
    19e6:	97 95       	ror	r25
    19e8:	87 95       	ror	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	ba 95       	dec	r27
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__ultoa_invert+0x86>
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	61 05       	cpc	r22, r1
    19f6:	71 05       	cpc	r23, r1
    19f8:	08 95       	ret
    19fa:	9b 01       	movw	r18, r22
    19fc:	ac 01       	movw	r20, r24
    19fe:	0a 2e       	mov	r0, r26
    1a00:	06 94       	lsr	r0
    1a02:	57 95       	ror	r21
    1a04:	47 95       	ror	r20
    1a06:	37 95       	ror	r19
    1a08:	27 95       	ror	r18
    1a0a:	ba 95       	dec	r27
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__ultoa_invert+0xa2>
    1a0e:	62 0f       	add	r22, r18
    1a10:	73 1f       	adc	r23, r19
    1a12:	84 1f       	adc	r24, r20
    1a14:	95 1f       	adc	r25, r21
    1a16:	a0 1d       	adc	r26, r0
    1a18:	08 95       	ret

00001a1a <eeprom_read_block>:
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22

00001a1e <eeprom_read_blraw>:
    1a1e:	fc 01       	movw	r30, r24
    1a20:	f9 99       	sbic	0x1f, 1	; 31
    1a22:	fe cf       	rjmp	.-4      	; 0x1a20 <eeprom_read_blraw+0x2>
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <eeprom_read_blraw+0x14>
    1a26:	f2 bd       	out	0x22, r31	; 34
    1a28:	e1 bd       	out	0x21, r30	; 33
    1a2a:	f8 9a       	sbi	0x1f, 0	; 31
    1a2c:	31 96       	adiw	r30, 0x01	; 1
    1a2e:	00 b4       	in	r0, 0x20	; 32
    1a30:	0d 92       	st	X+, r0
    1a32:	41 50       	subi	r20, 0x01	; 1
    1a34:	50 40       	sbci	r21, 0x00	; 0
    1a36:	b8 f7       	brcc	.-18     	; 0x1a26 <eeprom_read_blraw+0x8>
    1a38:	08 95       	ret

00001a3a <eeprom_read_byte>:
    1a3a:	f9 99       	sbic	0x1f, 1	; 31
    1a3c:	fe cf       	rjmp	.-4      	; 0x1a3a <eeprom_read_byte>
    1a3e:	92 bd       	out	0x22, r25	; 34
    1a40:	81 bd       	out	0x21, r24	; 33
    1a42:	f8 9a       	sbi	0x1f, 0	; 31
    1a44:	99 27       	eor	r25, r25
    1a46:	80 b5       	in	r24, 0x20	; 32
    1a48:	08 95       	ret

00001a4a <eeprom_write_block>:
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <eeprom_write_block+0xc>
    1a50:	2d 91       	ld	r18, X+
    1a52:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <eeprom_write_r18>
    1a56:	41 50       	subi	r20, 0x01	; 1
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	d0 f7       	brcc	.-12     	; 0x1a50 <eeprom_write_block+0x6>
    1a5c:	08 95       	ret

00001a5e <eeprom_write_byte>:
    1a5e:	26 2f       	mov	r18, r22

00001a60 <eeprom_write_r18>:
    1a60:	f9 99       	sbic	0x1f, 1	; 31
    1a62:	fe cf       	rjmp	.-4      	; 0x1a60 <eeprom_write_r18>
    1a64:	1f ba       	out	0x1f, r1	; 31
    1a66:	92 bd       	out	0x22, r25	; 34
    1a68:	81 bd       	out	0x21, r24	; 33
    1a6a:	20 bd       	out	0x20, r18	; 32
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	fa 9a       	sbi	0x1f, 2	; 31
    1a72:	f9 9a       	sbi	0x1f, 1	; 31
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	08 95       	ret

00001a7a <__prologue_saves__>:
    1a7a:	2f 92       	push	r2
    1a7c:	3f 92       	push	r3
    1a7e:	4f 92       	push	r4
    1a80:	5f 92       	push	r5
    1a82:	6f 92       	push	r6
    1a84:	7f 92       	push	r7
    1a86:	8f 92       	push	r8
    1a88:	9f 92       	push	r9
    1a8a:	af 92       	push	r10
    1a8c:	bf 92       	push	r11
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	ca 1b       	sub	r28, r26
    1aa4:	db 0b       	sbc	r29, r27
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	09 94       	ijmp

00001ab2 <__epilogue_restores__>:
    1ab2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ab4:	39 88       	ldd	r3, Y+17	; 0x11
    1ab6:	48 88       	ldd	r4, Y+16	; 0x10
    1ab8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aba:	6e 84       	ldd	r6, Y+14	; 0x0e
    1abc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1abe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ac2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ac4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ac6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ac8:	df 80       	ldd	r13, Y+7	; 0x07
    1aca:	ee 80       	ldd	r14, Y+6	; 0x06
    1acc:	fd 80       	ldd	r15, Y+5	; 0x05
    1ace:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ad2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ad4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ad6:	ce 0f       	add	r28, r30
    1ad8:	d1 1d       	adc	r29, r1
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	ed 01       	movw	r28, r26
    1ae6:	08 95       	ret

00001ae8 <_exit>:
    1ae8:	f8 94       	cli

00001aea <__stop_program>:
    1aea:	ff cf       	rjmp	.-2      	; 0x1aea <__stop_program>
